{"embedding": [0.3915095031261444, -0.7991527318954468, -0.12316735833883286, -0.13267232477664948, 0.2833952307701111, -0.07384021580219269, -0.20161141455173492, 0.2707221210002899, 0.3069671094417572, -0.6956637501716614, 0.004232421983033419, 0.2972937226295471, 0.23773297667503357, 0.5830150246620178, -0.6688143610954285, 0.29080238938331604, 0.17777256667613983, 0.12909992039203644, 0.818841278553009, -0.4034827947616577, -0.16095876693725586, 0.0016516267787665129, 0.5635693669319153, 0.5089049935340881, -0.05955010652542114, 0.233010396361351, 0.3469153940677643, 0.07082797586917877, 0.1056942269206047, 0.16116538643836975, -0.45385926961898804, 0.01705363392829895, 0.12796524167060852, 0.22274333238601685, 0.33555611968040466, 0.33727818727493286, -0.1259440779685974, -0.14222291111946106, -0.2995254099369049, 0.25561484694480896, 0.1759752482175827, 0.38327860832214355, 0.1839103251695633, -0.4235807955265045, 0.19105809926986694, 0.34870827198028564, -0.5703700184822083, 1.3053021430969238, 0.17397433519363403, 0.4369950592517853, 0.14578630030155182, -0.18596187233924866, 0.1750282645225525, 0.4592514634132385, -0.08528131991624832, 0.23617525398731232, -0.47407713532447815, 0.6273007988929749, 0.17809128761291504, -0.07221408188343048, -0.0333247147500515, 0.46677088737487793, -0.29843899607658386, -0.22570237517356873, 0.27303174138069153, -0.25057122111320496, -0.06711498647928238, -0.1538260281085968, 0.5154491066932678, -0.39773130416870117, 0.8945053815841675, -0.02311243675649166, -0.4702613353729248, -0.21200920641422272, 0.2460065484046936, 0.1485701948404312, -0.27630430459976196, 0.6512112021446228, -0.1248776838183403, -0.09244996309280396, 0.37657344341278076, 0.22804813086986542, 0.28011423349380493, -0.352716326713562, 0.687978982925415, 0.5973300933837891, 0.363042950630188, 0.48381951451301575, -0.252483606338501, -0.18779462575912476, 0.11538193374872208, -0.3173038363456726, 0.399039089679718, 0.376420259475708, 0.27556943893432617, -0.5936407446861267, -0.01709640584886074, -0.5184441208839417, 0.08009348064661026, -0.2157454490661621, -0.7523406147956848, 0.5866580009460449, -0.5870818495750427, 0.03386758267879486, 0.11688344180583954, -0.3786507546901703, -0.22169610857963562, -0.1652086228132248, 0.26807862520217896, -0.03604890778660774, -0.36487680673599243, -0.2983535826206207, 0.19309954345226288, -0.3541813790798187, -0.26795661449432373, 0.21442222595214844, -0.527897834777832, -0.1688743382692337, -0.3207964301109314, -0.1689525544643402, 0.23809491097927094, 0.16877815127372742, 0.14238552749156952, -0.19232718646526337, 0.33965161442756653, 1.133690357208252, -0.41334962844848633, -0.20856881141662598, 0.505924642086029, -0.050762832164764404, -0.08223482221364975, 0.4974793791770935, 0.14741250872612, 0.6488286852836609, -0.3861631751060486, 0.16378489136695862, -0.4644130766391754, 0.17666323482990265, 0.16783864796161652, 0.17337210476398468, 0.1720893681049347, 0.06108234077692032, 0.1711866706609726, -0.553780198097229, 0.5114453434944153, -0.19988268613815308, 0.13088031113147736, -0.37570130825042725, -0.6316062211990356, -0.7537901997566223, 0.09762788563966751, -0.16350869834423065, -0.18736883997917175, -0.10054571181535721, 0.17504003643989563, 0.029685184359550476, -0.43293365836143494, 0.21624864637851715, -0.16803273558616638, 0.03151850774884224, -0.20184454321861267, -0.12463406473398209, -0.12806890904903412, 0.019747372716665268, -0.2489141821861267, -0.24604791402816772, -0.16469421982765198, -0.4869050979614258, 0.20990777015686035, 0.41520678997039795, -0.7493410706520081, 0.17167790234088898, -1.3425812721252441, -0.11994767934083939, 0.3200688362121582, 0.7356471419334412, 0.22511784732341766, 0.09447668492794037, 0.15914654731750488, -0.8585179448127747, -0.6450445055961609, -0.25154536962509155, -0.4219760596752167, -0.04830602556467056, 0.3858540952205658, 0.6638549566268921, 0.24558676779270172, 0.2683963179588318, 0.3776354491710663, -0.09147818386554718, -0.2709565758705139, 0.07547261565923691, 0.4756363034248352, 0.045499976724386215, 0.16366834938526154, 0.08660205453634262, 0.42471569776535034, 0.0861988216638565, -0.2610049545764923, 0.6941824555397034, -0.046490393579006195, -0.48801112174987793, 0.2633041441440582, 0.2894841134548187, -0.19163629412651062, -0.9722947478294373, -0.3800095319747925, -0.24794341623783112, -0.04786388576030731, -0.12247825413942337, -0.4444265365600586, 0.055276647210121155, 0.11650203913450241, -0.22984442114830017, 0.12586548924446106, -0.08526245504617691, 0.44463083148002625, -0.2690327763557434, 0.42128145694732666, 0.537290632724762, 0.41619202494621277, -0.01971743069589138, -0.3831983506679535, -0.044059522449970245, 0.4248054325580597, 0.29542306065559387, 0.4195078909397125, -0.2567632496356964, 0.11520926654338837, -0.21606728434562683, 0.37010836601257324, 0.6114526987075806, 0.14915825426578522, 0.3694084882736206, -0.043271515518426895, -0.4449926018714905, -0.26915305852890015, 0.3147486746311188, -0.6221255660057068, -0.05720891058444977, 0.2273423671722412, 0.06342355906963348, 0.38762328028678894, -0.02203262411057949, -0.26022353768348694, -0.47043243050575256, 0.06426993012428284, 0.4889931082725525, -0.14836899936199188, -0.04464363306760788, -0.5129786133766174, -0.6103021502494812, -0.20052723586559296, -0.3815133273601532, -0.7037871479988098, -1.1804540157318115, -0.3775022327899933, -0.4770848751068115, 0.18232564628124237, -0.3342400789260864, -0.21323822438716888, 0.3893004357814789, -1.011910080909729, 0.8824303150177002, 0.2613990902900696, 0.11188862472772598, -0.09902596473693848, -0.030716294422745705, -0.13293449580669403, 0.00840489286929369, 1.3603568077087402, 0.03776639327406883, 0.11517932265996933, 0.4229639172554016, -0.29568880796432495, 0.09223118424415588, -0.2478969842195511, 0.14982689917087555, -0.5298035740852356, -0.034185029566287994, -0.18347346782684326, 0.45502281188964844, 0.2820685803890228, -0.052222657948732376, 0.33362877368927, 0.3886428773403168, -0.1817326545715332, -0.3888165056705475, -0.33155447244644165, -0.0038658923003822565, -0.6520664691925049, -0.4693029820919037, 0.05777457356452942, -0.054878003895282745, 0.358259916305542, 0.2857542335987091, -0.9834995865821838, 0.24816006422042847, 0.45162466168403625, -0.5331817865371704, 0.26407867670059204, 0.873805820941925, 0.17423413693904877, 0.22407501935958862, 0.085227370262146, -0.37995094060897827, -0.2807585895061493, 0.22105801105499268, -0.2674563229084015, 0.163982555270195, 0.09964921325445175, -0.11418558657169342, 0.4657299816608429, -0.23222972452640533, 0.7090962529182434, -0.11399955302476883, 0.6812540292739868, 0.3043689727783203, 0.08655553311109543, 0.705041766166687, -0.5073671936988831, -0.0342278890311718, -0.16815871000289917, 0.37959811091423035, 0.11061055958271027, 0.6435824632644653, -0.1740713119506836, 0.4268554151058197, -0.3279692530632019, -0.18042463064193726, -0.12548156082630157, 0.676121711730957, -0.27546170353889465, -0.36287549138069153, -0.31025567650794983, -0.25423502922058105, 0.05996730178594589, -0.060470446944236755, -0.3802891671657562, -0.4920370280742645, -0.026376454159617424, 0.2774477005004883, -0.03285926580429077, 0.12438926100730896, 0.10522079467773438, -0.1868099570274353, -0.28150856494903564, -0.5024407505989075, -0.1998283416032791, -0.31645384430885315, 0.18046417832374573, -0.040149543434381485, -0.09010609239339828, 0.5083075165748596, 0.24182291328907013, -0.42086857557296753, -0.08588855713605881, 0.11158572137355804, -0.2188853919506073, 0.05976012349128723, 0.596761167049408, 0.2667334973812103, -0.2589101791381836, 0.327120304107666, -0.7777024507522583, 0.2988337576389313, 0.033737149089574814, 0.20343239605426788, 0.5814427733421326, -0.23683233559131622, 0.31243133544921875, -0.5289995670318604, -0.4733497202396393, -0.025459248572587967, -0.31288883090019226, -0.26201745867729187, -0.5572478771209717, 0.11507120728492737, -0.15590642392635345, 0.5314198136329651, 0.5042917728424072, -0.07600042968988419, -0.22181807458400726, -0.12999111413955688, -0.06150652840733528, -0.4663310647010803, -0.024639124050736427, -0.2813434302806854, -0.12171327322721481, 0.017823338508605957, -0.10786616057157516, -0.06590145826339722, 0.1447192132472992, -0.11706893146038055, -0.20715118944644928, -0.3675973415374756, 0.45153525471687317, 0.460589736700058, 0.32974040508270264, -0.6154576539993286, 0.1536572426557541, -0.6244289875030518, -0.028433237224817276, 0.11320608854293823, 0.4038679003715515, 0.10855886340141296, 1.2180041074752808, 0.463053822517395, 0.37532180547714233, 0.32087448239326477, 0.09338122606277466, -0.044411249458789825, -0.6922540068626404, -0.06341259181499481, -0.5293955206871033, -0.3943662643432617, 0.42449232935905457, -0.039373915642499924, 0.21317270398139954, 0.5338908433914185, -0.131612628698349, -0.6829326152801514, -0.21823625266551971, -0.04807623475790024, 0.08794765919446945, 0.3954954147338867, -0.4147806167602539, 0.20888380706310272, -0.368430495262146, 0.200663760304451, 0.5084224939346313, -0.19729600846767426, 0.08494450151920319, -0.5280489921569824, 0.0033054559025913477, -0.033044230192899704, -0.16651245951652527, -0.025121912360191345, 0.040081679821014404, -0.12209675461053848, 0.23386244475841522, 0.18037943542003632, -0.14300009608268738, -0.33202946186065674, 0.5250027775764465, 0.19110962748527527, 0.2636788487434387, 0.11599508672952652, 0.36925777792930603, 0.4840860962867737, -0.5426144003868103, -0.21374638378620148, 0.3338630497455597, 0.15653292834758759, -0.6715516448020935, 0.029155833646655083, 0.4895121455192566, 0.08719832450151443, -0.05408242344856262, -0.3545989990234375, 0.47512760758399963, -0.22427336871623993, -0.6141850352287292, 0.3013617694377899, -0.01666215807199478, 0.7216992974281311, 0.05829213187098503, -0.16313791275024414, -0.4660194516181946, 0.2899251878261566, 0.22723998129367828, 0.09274716675281525, -0.4183206856250763, -0.33310985565185547, -0.09260449558496475, -0.6252824664115906, 0.304629385471344, 0.46933335065841675, -0.34707316756248474, -0.29665032029151917, -0.3410102128982544, -0.1981312483549118, 0.24186816811561584, 0.13820716738700867, -0.22319337725639343, -0.4503253698348999, 0.7225431203842163, -0.3969716727733612, 0.08862370997667313, -0.032910026609897614, -0.6522256731987, 0.17023225128650665, 0.3301454484462738, 0.6295609474182129, -0.27839162945747375, 0.06905954331159592, -0.5220204591751099, 0.04615037143230438, 0.24485820531845093, -0.5830236077308655, -0.2500283718109131, 0.4226486384868622, -0.40628308057785034, 0.3924177587032318, 0.8445324897766113, -0.2396923303604126, -0.4491034150123596, 0.2758706510066986, 0.327464759349823, -0.16049063205718994, -0.09395536780357361, 0.054432887583971024, 0.12728868424892426, -1.0653630495071411, -0.5886991620063782, 0.777793288230896, 0.0645233765244484, 0.2749396860599518, -0.54855877161026, -0.48364418745040894, 0.7636314630508423, 0.296182781457901, 0.3177849054336548, 0.5301638841629028, -0.11381053179502487, 0.041012540459632874, 0.44258174300193787, -0.6963291168212891, 0.047267645597457886, 0.39442309737205505, 0.4209137260913849, 0.1590772271156311, -0.1423308253288269, -0.2831563353538513, 0.37001338601112366, 0.2630719542503357, -0.5352115631103516, -0.44988828897476196, -1.1857541799545288, -0.5513721108436584, -0.05612433701753616, 0.3723573684692383, -0.5237924456596375, -0.9354196786880493, -0.6309024095535278, -0.05184360221028328, 0.3568548858165741, 0.04931493103504181, 0.01585862971842289, -0.5301530957221985, 0.3526134192943573, 0.24906647205352783, 0.1576593816280365, 0.12066802382469177, 0.1904551088809967, -0.7466355562210083, 0.22789616882801056, -0.3602270185947418, 0.29645800590515137, -0.04533950984477997, 0.0826697051525116, 0.2558145523071289, -0.4900330901145935, -0.3772750496864319, 0.23901954293251038, -0.16634581983089447, 0.14348649978637695, 0.24559170007705688, 0.3074670732021332, -0.15044498443603516, -0.3442347049713135, -0.0668143779039383, 0.06698332726955414, -0.05226130783557892, 0.09805711358785629, -0.4441561996936798, -0.4540693759918213, -0.09691271185874939, -0.1591125726699829, 0.11765051633119583, 0.6763013005256653, -0.10380631685256958, -0.4246513247489929, -0.5414007902145386, -0.4711727797985077, 0.33436644077301025, -0.017564963549375534, 0.5848835706710815, -0.048014916479587555, 0.07697310298681259, -0.15106259286403656, -0.10993539541959763, 0.10017265379428864, -0.553307294845581, 0.35405677556991577, 0.5968959331512451, 0.22446651756763458, -0.13950419425964355, 0.7261837124824524, 0.38783037662506104, -0.11608877778053284, 0.4390787184238434, 0.11652446538209915, -0.6001549959182739, 0.23552772402763367, 0.21253733336925507, -0.1856175661087036, 0.007626012898981571, 0.14642119407653809, -0.30292582511901855, 0.018243305385112762, 0.03405516594648361, -0.1776568740606308, -0.20641222596168518, -0.8889490962028503, -0.4821220934391022, -0.8003772497177124, 0.45272448658943176, 0.2785924971103668, -0.02345651015639305, -0.1285596787929535, -0.12382614612579346, -0.7025399804115295, 0.029961660504341125, -0.42980173230171204, 0.4006832540035248, 0.2271648347377777, -0.6081512570381165, -1.0124112367630005, 0.17068298161029816, 0.30364659428596497, -0.0745745301246643, 0.5125137567520142, 0.5148699879646301, -0.054011020809412, -0.27170026302337646, 0.09978840500116348, 0.228718563914299, -0.09823121130466461, 0.3636719584465027, 0.11830810457468033, -0.552219569683075, -0.16264592111110687, -0.7423341870307922, -0.07275179773569107, 0.275946706533432, 0.467629075050354, -1.0055196285247803, -0.09582144767045975, -0.4270036816596985, -0.26351600885391235, 0.23119822144508362, -0.2577045261859894, -0.11830195784568787, 0.10965621471405029, 0.3786679208278656, -0.32204434275627136, 0.8632820248603821, -0.06696528196334839, -0.0629153922200203, 0.4874471426010132, -0.2630099654197693, 0.386715829372406, 0.2790693938732147, 0.16028684377670288, 0.1821879893541336, 0.6042847037315369, -0.24041062593460083, 0.09553380310535431, 0.939342737197876, 0.6230883002281189, -0.42847880721092224, -0.17379648983478546, 0.09413950145244598, 0.11807312071323395, -0.011840454302728176, -0.12087048590183258, -0.16088511049747467, -0.05900653451681137, -0.04125767573714256, 0.09245184808969498, 0.06732448935508728, -0.5916637182235718, 1.0772751569747925, 0.6756438612937927, -0.1706903725862503, 0.4194912910461426, -0.17775565385818481, -0.005576832685619593, -0.8174048662185669, -0.2717285454273224, -0.025691978633403778, -0.1311388462781906, 0.08298448473215103, -0.7613178491592407, -0.6229287385940552, -0.24193958938121796, -0.6276226043701172, -0.36600324511528015, -0.6747244596481323, 0.5204319357872009, -0.47632962465286255, 0.24001383781433105, 0.38022080063819885, 0.3534463047981262, -0.1807629019021988, -0.37703806161880493, 0.048755619674921036, 0.268235981464386, -0.2008901685476303, -0.31812724471092224, 0.025002628564834595, 0.35793372988700867, -0.267966091632843, -0.33141574263572693, 0.3248673975467682, -0.35623809695243835, 0.5066470503807068, -0.3404199182987213, 0.2347179353237152, -0.46685990691185, 0.2351142317056656, 0.3778286278247833, -0.4460063576698303, 0.6179236769676208, -0.08538087457418442, 0.04680163040757179, 0.025272274389863014, 0.016064520925283432, -0.04764010012149811, 0.10961734503507614, 0.4713137745857239, -0.12352114170789719, 0.9927619695663452, 0.3380303680896759, -0.3193363845348358, 0.5139870047569275, 0.07285580039024353, -0.11280684173107147, 0.251768559217453, 0.3962351679801941, -0.0014277079608291388, -0.32254353165626526, -0.38056814670562744, 0.598724365234375, -0.3748345673084259, -0.05320899188518524, 0.6028857827186584, -0.01860852725803852, -0.4422147274017334, 0.08072341978549957, 0.21524444222450256, -0.8052485585212708, 0.3735528886318207, -0.7748357653617859, -0.5742425322532654, -0.16769824922084808, 0.38134104013442993, -0.7143468856811523, -0.36178863048553467, -0.1680310070514679, 0.23150792717933655, 0.6353919506072998, 0.6630005836486816, 0.269438236951828, 0.20840880274772644, 0.11504592001438141, 0.600970983505249], "query": "class RabbitExt(Connector):\n\n    def __init__(self) -> None:\n        self.connection: Optional[pika.BlockingConnection] = None\n        self.channel: Optional[pika.adapters.blocking_connection.BlockingChannel] = None\n        super().__init__()\n\n    @staticmethod\n    def get_connection_exception() -> ExceptionsList:\n        # Includes:\n        #   AuthenticationError,\n        #   ProbableAuthenticationError,\n        #   ProbableAccessDeniedError,\n        #   ConnectionClosed...\n        return (\n            AMQPConnectionError,\n            # Includes failures in name resolution\n            socket.gaierror,\n        )  # type: ignore\n\n    def connect(self, **kwargs: str) -> \"RabbitExt\":\n        # Beware, if you specify a user different by the default,\n        # then the send method will fail with PRECONDITION_FAILED\n        # because the user_id will not pass the verification\n        variables = self.variables | kwargs\n\n        ssl_enabled = Env.to_bool(variables.get(\"ssl_enabled\"))\n\n        log.info(\"Connecting to the Rabbit (SSL = {})\", ssl_enabled)\n\n        if (host := variables.get(\"host\")) is None:  # pragma: no cover\n            raise ServiceUnavailable(\"Missing hostname\")\n\n        if (user := variables.get(\"user\")) is None:  # pragma: no cover\n            raise ServiceUnavailable(\"Missing credentials\")\n\n        if (password := variables.get(\"password\")) is None:  # pragma: no cover\n            raise ServiceUnavailable(\"Missing credentials\")\n\n        port = int(variables.get(\"port\", \"0\"))\n        vhost = variables.get(\"vhost\", \"/\")\n\n        if ssl_enabled:\n            # This started failing with python 3.10:\n            # context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n            # -> Cannot create a client socket with a PROTOCOL_TLS_SERVER context\n            context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\n\n            context.load_default_certs()\n\n            # Disable certificate verification:\n            # context.verify_mode = ssl.CERT_NONE\n            # Enable certificate verification:\n            context.verify_mode = ssl.CERT_REQUIRED\n            context.check_hostname = True\n            # Path to pem file to verify self signed certificates\n            context.load_verify_locations(cafile=SSL_CERTIFICATE)\n            # System CA to verify true cerificates\n            context.load_verify_locations(cafile=certifi.where())\n            # ########################################\n\n            # Enable client certification verification?\n            # context.load_cert_chain(certfile=server_cert, keyfile=server_key)\n            # context.load_verify_locations(cafile=client_certs)\n\n            self.connection = pika.BlockingConnection(\n                pika.ConnectionParameters(\n                    host=host,\n                    port=port,\n                    virtual_host=vhost,\n                    credentials=pika.PlainCredentials(user, password),\n                    ssl_options=pika.SSLOptions(\n                        context=context, server_hostname=self.get_hostname(host)\n                    ),\n                )\n            )\n\n        else:\n            self.connection = pika.BlockingConnection(\n                pika.ConnectionParameters(\n                    host=host,\n                    port=port,\n                    virtual_host=vhost,\n                    credentials=pika.PlainCredentials(user, password),\n                )\n            )\n\n        return self\n\n    def disconnect(self) -> None:\n        self.disconnected = True\n        try:\n            if self.connection:\n                if self.connection.is_closed:\n                    log.debug(\"Connection already closed\")\n                else:\n                    self.connection.close()\n        # No need to close the connection in this case... right?\n        # Stream connection lost: ConnectionResetError(104, 'Connection reset by peer')\n        except StreamLostError:  # pragma: no cover\n            pass\n\n    def is_connected(self) -> bool:\n        if not self.connection or not self.connection.is_open:\n            return False\n\n        try:\n            # this will verify if channel is still open and will try to recreate it\n            # In some conditions the connection is open but in a wrong state and the\n            # channel creation raises a ConnectionWrongStateError exception\n            # This way the connection will be considered as closed and invalidated\n            self.get_channel()\n            return True\n        # raised when `Channel allocation requires an open connection`\n        except ConnectionWrongStateError:  # pragma: no cover\n            return False\n\n    @classmethod\n    def get_hostname(cls, host: str) -> str:\n        \"\"\"\n        Method used from both RabbitMQ and Celery to guess the host server name\n        that matches the SSL certificate.\n        Host can be the internal rabbit.dockerized.io url or any other external url\n        if the host is an external address it will be assumed to match the cert host\n        if the host is an internal address (.dockerized.io) the DOMAIN will be\n        inspected to verify in the certificate will probably be a self signed cert\n        (if the domain is localhost) or a true valid certificate\n        \"\"\"\n\n        return host if cls.is_external(host) else DOMAIN\n\n    def exchange_exists(self, exchange: str) -> bool:\n        channel = self.get_channel()\n        try:\n            channel.exchange_declare(exchange=exchange, passive=True)\n            return True\n        except ChannelClosedByBroker as e:\n            log.error(e)\n            return False\n\n    def create_exchange(self, exchange: str) -> None:\n        channel = self.get_channel()\n        channel.exchange_declare(\n            exchange=exchange, exchange_type=\"direct\", durable=True, auto_delete=False\n        )\n\n    def delete_exchange(self, exchange: str) -> None:\n        channel = self.get_channel()\n        channel.exchange_delete(exchange, if_unused=False)\n\n    def queue_exists(self, queue: str) -> bool:\n        channel = self.get_channel()\n        try:\n            channel.queue_declare(queue=queue, passive=True)\n            return True\n        except ChannelClosedByBroker as e:\n            log.error(e)\n            return False\n\n    def create_queue(self, queue: str) -> None:\n        channel = self.get_channel()\n        channel.queue_declare(\n            queue=queue, durable=True, exclusive=False, auto_delete=False\n        )\n\n    def delete_queue(self, queue: str) -> None:\n        channel = self.get_channel()\n        channel.queue_delete(\n            queue,\n            if_unused=False,\n            if_empty=False,\n        )\n\n    def get_bindings(self, exchange: str) -> Optional[list[dict[str, str]]]:\n        if not self.exchange_exists(exchange):\n            log.error(\"Exchange {} does not exist\", exchange)\n            return None\n\n        host = self.variables.get(\"host\", \"\")\n        schema = \"\"\n        if not host.startswith(\"http\"):\n            if Env.to_bool(self.variables.get(\"ssl_enabled\")):\n                schema = \"https://\"\n            else:\n                schema = \"http://\"\n\n        port = self.variables.get(\"management_port\")\n        # url-encode unsafe characters by also including / (thanks to safe parameter)\n        # / -> %2F\n        vhost = urllib.parse.quote(self.variables.get(\"vhost\", \"/\"), safe=\"\")\n        user = self.variables.get(\"user\")\n        password = self.variables.get(\"password\")\n        if not user or not password:  # pragma: no cover\n            log.error(\"Invalid rabbitmq username or password, can't retrieve bindings\")\n            return None\n\n        # API Reference:\n        # A list of all bindings in which a given exchange is the source.\n        r = requests.get(\n            f\"{schema}{host}:{port}/api/exchanges/{vhost}/{exchange}/bindings/source\",\n            auth=HTTPBasicAuth(user, password),\n            # this verify=False is needed because APIs are called on\n            # the internal docker network where the TLS certificate is invalid\n            verify=False,\n            timeout=5,\n        )\n        response = r.json()\n        if r.status_code != 200:  # pragma: no cover\n            err = response.get(\"error\", \"Unknown error\")\n            raise RestApiException(\n                f\"RabbitMQ: {err}\",\n                status_code=r.status_code,\n            )\n\n        bindings = []\n        for row in response:\n            # row == {\n            #   'source': exchange-name,\n            #   'vhost': probably '/',\n            #   'destination': queue-or-dest-exchange-name,\n            #   'destination_type': 'queue' or 'exchange',\n            #   'routing_key': routing_key,\n            #   'arguments': dict,\n            #   'properties_key': ?? as routing_key?\n            # }\n\n            bindings.append(\n                {\n                    \"exchange\": row[\"source\"],\n                    \"routing_key\": row[\"routing_key\"],\n                    \"queue\": row[\"destination\"],\n                }\n            )\n\n        return bindings\n\n    def queue_bind(self, queue: str, exchange: str, routing_key: str) -> None:\n        channel = self.get_channel()\n        channel.queue_bind(queue=queue, exchange=exchange, routing_key=routing_key)\n\n    def queue_unbind(self, queue: str, exchange: str, routing_key: str) -> None:\n        channel = self.get_channel()\n        channel.queue_unbind(queue=queue, exchange=exchange, routing_key=routing_key)\n\n    def send_json(\n        self,\n        message: Any,\n        routing_key: str = \"\",\n        exchange: str = \"\",\n        headers: Optional[dict[str, Any]] = None,\n    ) -> bool:\n        return self.send(\n            body=orjson.dumps(message),\n            routing_key=routing_key,\n            exchange=exchange,\n            headers=headers,\n        )\n\n    def send(\n        self,\n        body: bytes,\n        routing_key: str = \"\",\n        exchange: str = \"\",\n        headers: Optional[dict[str, Any]] = None,\n    ) -> bool:\n        \"\"\"\n        Send a message to the RabbitMQ queue\n\n        :param body: the data to be send.\n                        If this message should be json-encoded please use .send_json()\n        :param exchange: RabbitMQ exchange where the message should be sent.\n                         Empty for default exchange.\n        :param queue: RabbitMQ routing key.\n        \"\"\"\n\n        # Settings for the message:\n        permanent_delivery = 2  # make message persistent\n\n        if headers is None:\n            headers = {}\n\n        props = pika.BasicProperties(\n            delivery_mode=permanent_delivery,\n            headers=headers,\n            # This should be the same used by the connect method, i.e.:\n            # self.variables + kwargs\n            # Otherwise it will fail with error:\n            # Failed to write message, channel is dead (\n            #     (406, \"PRECONDITION_FAILED - user_id property\n            #            set to 'CUSTOM' but authenticated user was 'BASE'\n            #           \"\n            #     )\n            # )\n            user_id=self.variables.get(\"user\"),\n        )\n\n        try:\n            channel = self.get_channel()\n            channel.basic_publish(\n                exchange=exchange,\n                routing_key=routing_key,\n                body=body,\n                properties=props,\n                mandatory=True,\n            )\n            log.debug(\"Message sent to RabbitMQ\")\n            return True\n        except UnroutableError as e:\n            log.error(e)\n\n        except ConnectionClosed as e:  # pragma: no cover\n            log.error(\"Failed to write message, connection is dead ({})\", e)\n\n        except AMQPConnectionError as e:  # pragma: no cover\n            log.error(\"Failed to write message, connection failed ({})\", e)\n\n        except AMQPChannelError as e:\n            log.error(\"Failed to write message, channel is dead ({})\", e)\n            self.channel = None\n\n        except AttributeError as e:  # pragma: no cover\n            log.error(\"Failed to write message:, {}\", e)\n\n        return False\n\n    def get_channel(self) -> pika.adapters.blocking_connection.BlockingChannel:\n        \"\"\"\n        Return existing channel (if healthy) or create and return new one\n        \"\"\"\n\n        if not self.connection:  # pragma: no cover\n            raise ServiceUnavailable(f\"Service {self.name} is not available\")\n\n        # This workflow is to convert an Optional[Channel] into a Channel\n        if self.channel is None or self.channel.is_closed:\n            log.debug(\"Creating channel\")\n            channel = self.connection.channel()\n            channel.confirm_delivery()\n\n            self.channel = channel\n            return channel\n        else:\n            return self.channel", "answer": "{}"}