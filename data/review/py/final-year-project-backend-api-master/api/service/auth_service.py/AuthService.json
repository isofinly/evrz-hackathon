{"embedding": [-0.056040868163108826, 0.14012117683887482, -0.07396156340837479, 0.43199947476387024, 0.48272091150283813, -1.1402345895767212, -0.775132417678833, 0.7637666463851929, -0.4042125344276428, -0.14160454273223877, 0.3494081199169159, -0.38216888904571533, 0.04865163564682007, 0.2234184443950653, 0.5466324687004089, 0.010218878276646137, 0.12913092970848083, -0.04043015465140343, 0.1363081932067871, -0.8825260400772095, -0.3438318371772766, 0.276874840259552, 0.3706519305706024, 0.43390554189682007, -0.658236026763916, -0.13570302724838257, -0.3428023159503937, -0.11825492978096008, 0.7746382355690002, 0.07070498168468475, 0.025483237579464912, 0.2117190808057785, 0.8474406599998474, 0.22100625932216644, -0.26426762342453003, -0.8559168577194214, 0.23966097831726074, 0.03689279407262802, -0.8251664042472839, 0.3461643159389496, -0.6317000389099121, 0.3697393536567688, 0.033113352954387665, 0.12581810355186462, -0.018761558458209038, 0.3596777021884918, 0.18044619262218475, 0.7294116020202637, 0.32170531153678894, 0.16783030331134796, -0.6287654638290405, -0.565301239490509, -0.3126004934310913, -0.11540555953979492, 0.27721256017684937, -0.7322139739990234, -0.2753305435180664, 0.11282338201999664, 0.11435375362634659, -0.2622971832752228, 0.11272776871919632, 0.3616907298564911, -0.13874001801013947, 0.8026793599128723, 0.6916037201881409, 0.741553783416748, -0.5469173789024353, 0.4742792248725891, 0.15151473879814148, 0.2866874933242798, -0.011707916855812073, -0.360127329826355, 0.04891252517700195, 0.17299777269363403, 0.5158960819244385, -0.20835678279399872, -0.4505220949649811, -0.40915927290916443, -0.34051111340522766, 0.20500199496746063, 0.7326733469963074, -0.4833447337150574, -0.2288132607936859, 0.44541504979133606, 0.37646692991256714, 0.2729000747203827, 0.06407561898231506, -0.5433396697044373, -0.9876810312271118, 0.016457444056868553, 0.004444688558578491, -0.06621392071247101, -0.0671796053647995, 0.10668427497148514, -0.23201793432235718, -0.26479974389076233, -0.24195170402526855, 0.2548634707927704, -0.06219454109668732, -0.6888036727905273, 0.04822725057601929, 0.5717044472694397, -0.4862879812717438, 0.7456049919128418, -0.07384910434484482, -0.23995618522167206, -0.2542763352394104, -0.6058316230773926, 0.30160093307495117, 0.06489218026399612, -1.1874803304672241, -0.30291980504989624, -0.12362366914749146, 0.11855870485305786, -0.3109503388404846, -0.3262057304382324, 0.3797600567340851, 0.2003021538257599, -0.18897096812725067, -0.6034611463546753, 0.3800823986530304, -0.8097100853919983, 0.008175652474164963, -0.06941712647676468, 0.5799354910850525, 0.19178825616836548, -0.49728792905807495, -0.17113815248012543, 0.23081566393375397, -0.33723512291908264, -0.14414352178573608, 0.1096339002251625, 0.27039557695388794, -0.07544124126434326, 0.10490129888057709, -0.48747244477272034, -0.19198831915855408, -0.12753869593143463, 0.39154139161109924, -0.10914727300405502, -0.06981167197227478, 0.24864119291305542, -0.7486433386802673, -0.32801058888435364, 0.10359340906143188, -0.19043445587158203, -0.15430957078933716, -0.03367607295513153, -0.26259589195251465, -0.3156268894672394, 0.6270092129707336, -0.5092507004737854, 0.33408892154693604, -0.471852570772171, -0.4728848338127136, 0.25854048132896423, -0.1258932650089264, -0.7414705157279968, -0.007450061850249767, 0.002966473810374737, -0.09086289256811142, -1.0482815504074097, -0.15982089936733246, 0.24600951373577118, 0.41794872283935547, 0.15513144433498383, 0.19871750473976135, 0.008740942925214767, 0.007354218512773514, -0.3075609505176544, -0.45950591564178467, 0.4337388575077057, -0.7211395502090454, -0.24811525642871857, -0.26471462845802307, -0.12098917365074158, 0.7775010466575623, -0.36676931381225586, -0.5053586959838867, -0.3511737883090973, -0.31536969542503357, -0.3773830235004425, -0.11399238556623459, 0.014431798830628395, 0.1259135752916336, 0.546327531337738, 0.11556125432252884, 0.5257354378700256, -0.09960586577653885, 0.5740469098091125, -0.6173999905586243, 0.07780130952596664, -0.2797721028327942, -0.24973662197589874, 0.2025226652622223, 0.5060778260231018, 0.09339635819196701, 0.5267926454544067, 0.7030563950538635, -1.076988697052002, -0.36610203981399536, 0.6258955597877502, -0.008607831783592701, -0.4711214303970337, -0.20528942346572876, 0.3277583420276642, -0.3575293719768524, 0.6005955338478088, -0.1249292865395546, -0.44948267936706543, -0.36700454354286194, -0.15689127147197723, -0.2772347033023834, 0.29831889271736145, 0.46802493929862976, -0.6280224919319153, 0.9529901146888733, -0.21511292457580566, 0.19602873921394348, 0.2861107289791107, 0.20087605714797974, -0.3416232764720917, -0.6499693989753723, -0.9095075726509094, -0.08107513934373856, 0.5407834053039551, -0.3366340100765228, 0.16175232827663422, 0.26052647829055786, -0.7307459115982056, -0.03577039763331413, 0.1082514300942421, 0.20382219552993774, 0.14254698157310486, -0.6481236219406128, -0.5514897108078003, 0.4673621654510498, -0.018502529710531235, -0.4015159606933594, 0.18944400548934937, 0.45383891463279724, -0.29181718826293945, 0.0747048482298851, -0.10854342579841614, 0.10308194905519485, 0.43959328532218933, 0.5087894201278687, 0.15074151754379272, 0.01002202183008194, -0.6566646695137024, -0.8900451064109802, -0.30062010884284973, 0.3401431441307068, -0.3303901255130768, 0.07855737209320068, -0.5195925831794739, -0.14937102794647217, 0.8991298079490662, 0.045050960034132004, -0.26920798420906067, 0.12334346771240234, -0.0965416431427002, -0.07595343142747879, 0.23287904262542725, 0.027554161846637726, -0.3827568292617798, -0.19551320374011993, 0.1744348704814911, 0.6881838440895081, -0.30952322483062744, 0.8491335511207581, 0.10818237066268921, -0.3771197199821472, -0.44283321499824524, -0.20353978872299194, 0.27841854095458984, 0.028437068685889244, -0.4805365204811096, -0.12837019562721252, -0.3172558844089508, -0.4175191819667816, -0.9969821572303772, 0.42605704069137573, 0.9405940771102905, 0.34150347113609314, 0.04951293393969536, -0.04785587266087532, -0.5312106609344482, 0.12057269364595413, 0.14843329787254333, 0.15629567205905914, -0.41794174909591675, -0.22287073731422424, -0.001047280733473599, 0.09508069604635239, 0.049714431166648865, -0.3285122811794281, -0.05391262471675873, 0.16038325428962708, 0.12539829313755035, -0.16171807050704956, 0.28476884961128235, 1.2232407331466675, -0.5795224905014038, 0.926272988319397, -0.24611258506774902, 0.6043776869773865, -0.04230445995926857, 0.18474937975406647, -0.08024643361568451, 0.2586669325828552, -0.3672255277633667, 0.3009651005268097, 0.2131684124469757, -0.28428202867507935, -0.12338787317276001, -0.2889399230480194, 0.49354150891304016, 0.46756207942962646, 0.5888864994049072, 0.17950809001922607, 0.22174382209777832, 0.8344962000846863, 0.35954684019088745, 1.5931951999664307, -0.6349182724952698, 0.37450110912323, 0.0422179289162159, -0.10171543061733246, 0.272174596786499, -0.8871512413024902, -0.4388551712036133, -0.005885432008653879, -0.1985430270433426, 0.4010138213634491, -0.3948245644569397, -0.3377592861652374, -0.5231722593307495, 0.0012095115380361676, -0.48917415738105774, -0.5295790433883667, -0.6773176789283752, 0.4395281672477722, 0.2674216330051422, -0.23758068680763245, -0.6602957248687744, -0.20839674770832062, -0.03644043579697609, -0.268571138381958, 0.36072680354118347, -0.271226167678833, 0.30139562487602234, 0.7212751507759094, 0.36031028628349304, 0.48273640871047974, -0.556127667427063, 0.15051335096359253, -0.08914975821971893, 0.2543441951274872, -0.0929400622844696, 0.09702778607606888, 0.2719641625881195, -0.2955009639263153, 0.5467516183853149, -0.032655470073223114, -0.15025176107883453, -0.5051649808883667, -0.5695033669471741, 0.5122019648551941, -0.17759723961353302, -0.402118057012558, -0.24371184408664703, -0.7297375202178955, 0.3631631135940552, 0.4639320969581604, 0.4223345220088959, -0.2238905131816864, 0.458732008934021, -0.8021349310874939, 0.4117797017097473, 0.2795594334602356, 0.11552846431732178, 0.24406549334526062, 0.2943183481693268, 0.39065539836883545, -0.757887065410614, 0.007684835698455572, -0.10929106175899506, 0.15993301570415497, 0.06989540904760361, -0.3383191227912903, -0.16009849309921265, -0.0487261563539505, -0.3598310649394989, -0.2960819602012634, 0.5483263731002808, -0.8001066446304321, -0.02851017192006111, -0.06459234654903412, -0.2939225137233734, 0.28146228194236755, 0.47000035643577576, 0.7584724426269531, 0.008743020705878735, 0.1527899205684662, 0.4048464000225067, 0.6122238636016846, -0.30846935510635376, -0.34019219875335693, 0.5046947002410889, -0.2137921005487442, -0.1854768842458725, -0.07680636644363403, -0.04114970937371254, 0.7227802872657776, -0.3486717939376831, 0.38330304622650146, 1.1875666379928589, 0.6936836242675781, 0.5755144357681274, -0.005092294421046972, 0.1984604001045227, 0.6716294884681702, 0.19233515858650208, -0.8447837829589844, 0.407116562128067, -0.2587348222732544, 0.18040907382965088, -0.7899697422981262, -0.30907395482063293, 0.24234062433242798, 0.35285893082618713, -0.8234020471572876, -0.29946330189704895, 0.12862662971019745, -0.09811673313379288, -0.39249998331069946, 0.18614648282527924, -0.09107720851898193, -0.16347801685333252, 1.1245864629745483, 0.6368603706359863, 0.12372440844774246, 0.06383999437093735, 0.9430230855941772, -0.10736927390098572, -0.7529469132423401, 0.5205826163291931, 0.7603909969329834, -0.23464825749397278, 0.10732530057430267, 0.1718038022518158, -0.4645807147026062, 0.17537294328212738, -0.36901673674583435, 0.10833416134119034, 0.40914005041122437, 0.5344347953796387, 0.35126742720603943, 0.24573491513729095, -0.1339704990386963, -0.1989050954580307, -0.4191513955593109, 0.8574415445327759, 0.39199763536453247, 0.4126363694667816, 0.6241112947463989, 0.1426335573196411, 0.04857249930500984, -0.19167892634868622, -0.11449570953845978, -0.7567002773284912, -0.5696169137954712, -0.022935641929507256, 0.11023979634046555, -0.11196504533290863, 0.6979520320892334, -0.5003357529640198, -0.24114064872264862, 0.1683303713798523, -0.03556426241993904, 0.38782942295074463, -0.36710745096206665, -0.12771496176719666, -0.09619171917438507, -0.8698583245277405, 0.5120289921760559, -0.4395023584365845, -0.07050451636314392, -0.8697683215141296, -0.14709556102752686, -0.23253299295902252, 0.03245885670185089, 0.16958707571029663, -0.26668581366539, 0.0699491873383522, -0.47186172008514404, -0.7154189944267273, -0.1830858439207077, -0.5027486681938171, 0.18102993071079254, -0.08526309579610825, 0.009823083877563477, -0.04754115268588066, 0.3095835745334625, 0.05455911159515381, -0.49381253123283386, -0.37223199009895325, 0.1140940934419632, -0.030887536704540253, -0.3540363609790802, -0.004824522417038679, 0.6261828541755676, -0.7030563354492188, -0.4103114604949951, 0.15708447992801666, 0.26682835817337036, 0.47596216201782227, 0.21118444204330444, 0.6253654360771179, 0.15519696474075317, -0.31665125489234924, -0.16398541629314423, -0.111130490899086, 0.09263421595096588, 0.2242371290922165, 0.32334885001182556, -0.11238505691289902, 0.3579712510108948, 0.2166096270084381, -0.9753848314285278, 0.1166955828666687, 0.32356083393096924, -0.3408849537372589, -0.13755513727664948, -0.39214956760406494, -0.4397426247596741, -0.576981782913208, 0.5813470482826233, 0.1213926300406456, 0.10912889242172241, 0.09474542737007141, -0.8637387156486511, -0.1831595003604889, -0.6070051789283752, -0.433012455701828, -0.41454634070396423, 0.3872285485267639, -0.20781542360782623, -0.12432931363582611, 0.34837594628334045, 0.20871177315711975, 0.716834306716919, -0.1714174896478653, -0.003167398041114211, 0.5519421696662903, 0.10052124410867691, 0.16572721302509308, 0.08140188455581665, 0.0885312631726265, -0.07814992964267731, 0.1861964911222458, -0.5432524681091309, -0.46114692091941833, 0.059725962579250336, -0.19345007836818695, 0.5875285863876343, 0.060296934098005295, -0.592065155506134, 0.4030423164367676, -0.6618638634681702, -0.3238995671272278, 0.5277969837188721, 0.6705886125564575, -0.3047942519187927, 0.27164319157600403, -0.3414543569087982, 0.20821650326251984, 0.4198783040046692, -0.03420165553689003, 0.714040219783783, 0.33741599321365356, -0.047947704792022705, -0.6972118020057678, 0.07398304343223572, 0.04533001035451889, 0.06251070648431778, 0.25347205996513367, 0.4226996898651123, 0.11038307845592499, -0.832237184047699, -0.13159935176372528, -0.4469008147716522, -0.213075652718544, 0.367358922958374, 0.9075919985771179, -0.12084441632032394, 0.3345538079738617, -0.6291369199752808, 0.38071486353874207, 0.48979055881500244, 0.552148163318634, 0.04478299245238304, -0.905331015586853, 0.47826388478279114, 0.01265415083616972, 0.4308214485645294, -0.30882713198661804, -0.36873388290405273, 0.17296992242336273, 0.17049507796764374, -0.020780036225914955, 0.368068665266037, 0.18955858051776886, 0.293441504240036, 0.19729335606098175, -0.2795240879058838, 0.3215112090110779, 0.3440249264240265, 0.2047978639602661, -0.18751868605613708, 0.20346702635288239, -0.33497220277786255, 0.5852563977241516, -0.16999344527721405, -0.04515175148844719, 0.32111963629722595, -0.2606521546840668, -0.6379098296165466, -0.32673582434654236, -0.5534711480140686, 0.036573782563209534, -0.1399630308151245, -0.03709552064538002, 0.10345469415187836, 0.1682162880897522, 0.46411535143852234, -0.7054329514503479, 0.46274712681770325, 0.6548560261726379, 0.1740768402814865, -0.15255206823349, 0.10782232135534286, -0.1527222841978073, 0.05457209050655365, 0.8397058844566345, -0.016261277720332146, -0.12895934283733368, 0.6897847056388855, -0.059764910489320755, -0.3628906011581421, 0.9428099393844604, 0.33984309434890747, -0.35618555545806885, -1.2968008518218994, -0.38714510202407837, -0.07061191648244858, -0.29822978377342224, 0.11689066886901855, 0.39602476358413696, 0.3141458034515381, -0.12464100122451782, 0.5640414953231812, -0.4432717263698578, -0.3452385365962982, 0.16056834161281586, 0.15159016847610474, 0.5709868669509888, 0.46481388807296753, 0.20042145252227783, 0.2834920883178711, -0.6239894032478333, 0.7791377902030945, 0.30340245366096497, 0.19597449898719788, -0.1676834672689438, 0.5301485061645508, -0.635509729385376, -0.046913523226976395, 0.2816564440727234, -0.014682800509035587, 0.8324131369590759, 0.16738373041152954, -0.25346192717552185, -0.011118934489786625, 0.36799708008766174, 0.35379281640052795, -0.1968882977962494, -0.1066550463438034, -0.43216249346733093, -0.44531282782554626, -0.28452807664871216, -0.4536142647266388, -0.12837016582489014, -0.7039468288421631, -0.2420067936182022, -0.46329450607299805, -0.056023113429546356, 0.040820393711328506, 1.1605918407440186, 0.03993561491370201, -0.5688445568084717, -0.07255171984434128, 0.49212220311164856, 0.17927727103233337, 0.15367043018341064, 0.1771807223558426, -0.7964452505111694, -0.0377303771674633, -0.7201099991798401, 0.294954776763916, 0.31504592299461365, 1.1915919780731201, -0.0921255424618721, 0.09770497679710388, -0.09553023427724838, -0.2896244525909424, -0.09335250407457352, 0.20537909865379333, -0.1528368592262268, -0.3895062208175659, -0.5355982780456543, 0.6568225622177124, 0.177572563290596, 0.5946708917617798, -0.5425275564193726, 0.026900790631771088, 0.10291582345962524, 0.27619296312332153, -0.0027504186145961285, -0.5089675784111023, -0.06908801943063736, -0.4481862187385559, 0.39736077189445496, -0.6131736636161804, -1.105094075202942, -0.10043614357709885, -0.022580310702323914, -0.37506869435310364, 0.9441006183624268, 0.2905568778514862, -0.245942160487175, -0.3792910873889923, -0.2404060959815979, -0.24703651666641235, 0.6211545467376709, 0.5442313551902771, -0.5740687251091003, 0.05539065599441528, -0.018909549340605736, 0.6917046904563904, -0.05480740964412689, -0.29778942465782166, 0.2160417139530182, -0.33827120065689087, 0.7710983157157898, -0.32744908332824707, 0.4644540846347809, 0.023466933518648148, 0.5203269124031067, 0.20139503479003906, 0.27973678708076477, -0.5395930409431458, -0.10916110128164291, 0.1888614445924759, 0.6671772599220276, 0.06299911439418793, 0.38850438594818115], "query": "class AuthService():\n\n    @staticmethod\n    def login_student(data):\n        response = {}\n        reg_no = data['reg_no']\n        password = data['password']\n        # \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b\n        try:\n            student = Student.query.filter_by(reg_no=reg_no).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not student:\n            response['success'] = False\n            response['message'] = 'Invalid reg number or password'\n            return response, 401\n\n        if not student.verify_password(password):\n            response['success'] = False\n            response['message'] = 'Invalid reg number or password'\n            return response, 401\n\n        encode_data = {\n            'reg_no': student.reg_no,\n            'student': True,\n            'entity': 'student'\n        }\n        token = encode_auth_token(data=encode_data, expiry=datetime.utcnow() + timedelta(days=1))\n\n        if not isinstance(token, bytes):\n            response['success'] = False\n            response['message'] = token\n            return response, 500\n\n        response['success'] = True\n        response['message'] = 'Logged in successfully'\n        response['x-auth-token'] = token.decode()\n        return response, 200\n\n    @staticmethod\n    def logout_student(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding error\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Ensure this method logs out only students\n        if decoded_payload.get('reg_no') is None:\n            response['success'] = True\n            response['message'] = 'Unathorized to perform action'\n            return response, 403\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke check Error', 500)\n\n        # Mark token as revoked and logout student\n        try:\n            RevokedToken(token=auth_token).save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Logged out successfully'\n        return response, 200\n\n    @staticmethod\n    def login_lecturer(data):\n        response = {}\n        email = data['email']\n        password = data['password']\n\n        try:\n            lecturer = Lecturer.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not lecturer:\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        if not lecturer.verify_password(password):\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        encode_data = {\n            'email': lecturer.email,\n            'lecturer': True,\n            'entity': 'lecturer'\n        }\n        token = encode_auth_token(data=encode_data, expiry=datetime.utcnow() + timedelta(days=1))\n\n        if not isinstance(token, bytes):\n            response['success'] = False\n            response['message'] = token\n            return response, 500\n\n        response['success'] = True\n        response['message'] = 'Logged in successfully'\n        response['x-auth-token'] = token.decode()\n        return response, 200\n\n    @staticmethod\n    def logout_lecturer(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding error\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Ensure this method logs out only lecturers\n        if decoded_payload.get('lecturer') is None:\n            response['success'] = True\n            response['message'] = 'Unathorized to perform action'\n            return response, 403\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke check Error', 500)\n\n        # Mark token as revoked and logout student\n        try:\n            RevokedToken(token=auth_token).save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Logged out successfully'\n        return response, 200\n\n    @staticmethod\n    def login_hod(data):\n        response = {}\n        email = data['email']\n        password = data['password']\n\n        try:\n            hod = HOD.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not hod:\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        if not hod.verify_password(password):\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        encode_data = {\n            'email': hod.email,\n            'hod': True,\n            'entity': 'hod'\n        }\n        token = encode_auth_token(data=encode_data, expiry=datetime.utcnow() + timedelta(days=1))\n\n        if not isinstance(token, bytes):\n            response['success'] = False\n            response['message'] = token\n            return response, 500\n\n        response['success'] = True\n        response['message'] = 'Logged in successfully'\n        response['x-auth-token'] = token.decode()\n        return response, 200\n\n    @staticmethod\n    def logout_hod(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding error\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Ensure this method logs out only hods\n        if decoded_payload.get('hod') is None:\n            response['success'] = True\n            response['message'] = 'Unathorized to perform action'\n            return response, 403\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke Check Error', 500)\n\n        # Mark token as revoked and logout student\n        try:\n            RevokedToken(token=auth_token).save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Logged out successfully'\n        return response, 200\n\n    @staticmethod\n    def login_admin(data):\n        response = {}\n        email = data['email']\n        password = data['password']\n\n        try:\n            admin = Admin.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not admin:\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        if not admin.verify_password(password):\n            response['success'] = False\n            response['message'] = 'Invalid email or password'\n            return response, 401\n\n        encode_data = {\n            'email': admin.email,\n            'admin': True,\n            'entity': 'admin'\n        }\n        token = encode_auth_token(data=encode_data, expiry=datetime.utcnow() + timedelta(days=1))\n\n        if not isinstance(token, bytes):\n            response['success'] = False\n            response['message'] = token\n            return response, 500\n\n        response['success'] = True\n        response['message'] = 'Logged in successfully'\n        response['x-auth-token'] = token.decode()\n        return response, 200\n\n    @staticmethod\n    def logout_admin(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        # Error decoding error\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        # Ensure this method logs out only admins\n        if decoded_payload.get('admin') is None:\n            response['success'] = True\n            response['message'] = 'Unathorized to perform action'\n            return response, 403\n\n        # Check revoked token\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Revoked token. Please log in again'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke check Error', 500)\n\n        # Mark token as revoked and logout student\n        try:\n            RevokedToken(token=auth_token).save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'Logged out successfully'\n        return response, 200\n\n    @staticmethod\n    def verify(auth_token):\n        response = {}\n        decoded_payload = decode_auth_token(auth_token=auth_token)\n\n        if isinstance(decoded_payload, str):\n            response['success'] = False\n            response['message'] = decoded_payload\n            return response, 401\n\n        try:\n            if RevokedToken.check(token=auth_token):\n                response['success'] = False\n                response['message'] = 'Token revoked'\n                return response, 403\n        except Exception:\n            raise AppException('Internal Server Error. Revoke Check Error', 500)\n\n        response['success'] = True\n        response['entity'] = decoded_payload['entity']\n        return response, 200", "answer": "{}"}