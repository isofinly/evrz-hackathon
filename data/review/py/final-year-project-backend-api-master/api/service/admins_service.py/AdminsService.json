{"embedding": [0.19860215485095978, 0.15797515213489532, -0.30216190218925476, -0.017698200419545174, 0.3505736291408539, -0.6975345611572266, -0.7118013501167297, -0.19538085162639618, -0.2987610697746277, -0.09983166307210922, -0.07546327263116837, -0.5209535956382751, 0.049121011048555374, 0.40748849511146545, 0.7289488315582275, 0.055006399750709534, 0.34510257840156555, -0.44586479663848877, 0.5696775317192078, -0.8715236186981201, -0.29206812381744385, 0.17290730774402618, 0.3262629210948944, 0.24031709134578705, -0.6016716361045837, -0.3751866817474365, 0.02758553996682167, -0.19483333826065063, 0.9839812517166138, 0.268621027469635, 0.643311083316803, 0.26550528407096863, 0.27919456362724304, -0.17822188138961792, -0.2853063941001892, -0.428438663482666, -0.03011549450457096, -0.32887086272239685, -0.5725420117378235, 0.44069769978523254, 0.035931117832660675, 0.5111972689628601, -0.04993539676070213, 0.05004607141017914, -0.012814955785870552, 0.18065567314624786, -0.23829706013202667, 0.037229396402835846, 0.6677106022834778, -0.10490023344755173, -0.5533521771430969, -0.034624338150024414, -0.12095058709383011, -0.2583392262458801, 0.34982988238334656, -1.0835212469100952, -0.8199282288551331, 0.3884608745574951, 0.45382511615753174, -0.4410724639892578, 0.619655191898346, 0.2692831754684448, 0.10971827805042267, 0.8460481762886047, 0.13637104630470276, 0.25495779514312744, 0.012673376128077507, 0.059658318758010864, 0.27585479617118835, 0.3697400987148285, -0.04237031564116478, 0.37309715151786804, 0.2040010392665863, 0.5711358189582825, 0.3618198037147522, -0.04215160012245178, -0.02785852551460266, -0.7754346132278442, -0.2015002965927124, -0.08843421190977097, 0.8560149073600769, -0.7097650766372681, -0.519463300704956, 0.25514402985572815, 0.4982241094112396, 0.5812107920646667, 0.4804140031337738, -0.4530763030052185, -0.751395046710968, 0.10998475551605225, -0.3441164791584015, 0.36539366841316223, 0.17419306933879852, 0.586468517780304, -0.00795439537614584, -0.2708802819252014, -0.3047087490558624, 0.19880346953868866, -0.18617130815982819, -0.22858783602714539, 0.09752378612756729, 0.05178798735141754, 0.3974735140800476, 0.19674590229988098, -0.14247775077819824, -0.6074393391609192, -0.2398345023393631, -0.3076161742210388, 0.4085320830345154, 0.18914952874183655, -0.7147794961929321, 0.03261570632457733, -0.12617936730384827, -0.010482234880328178, -0.5195155143737793, -0.39975976943969727, 0.11459410190582275, 0.18983744084835052, -0.6456774473190308, -0.8458129167556763, 0.2589661180973053, -0.3268599212169647, -0.03903227299451828, 0.2354671061038971, 0.5612332224845886, 0.2938397228717804, -0.624737560749054, 0.006527033168822527, 0.8556492924690247, -0.4480740427970886, 0.09698247164487839, -0.15000107884407043, 0.4423667788505554, -0.21451567113399506, 0.215701624751091, 0.09661980718374252, -0.4597516357898712, -0.23558488488197327, 0.13637308776378632, 0.3845074474811554, -0.15286843478679657, -0.3463551104068756, -0.40884360671043396, -0.2814953029155731, 0.27911385893821716, -0.46830546855926514, -0.10718980431556702, 0.2738341689109802, -0.5429115891456604, -0.22828155755996704, 0.6461382508277893, -0.5325301885604858, 0.0821264386177063, -0.6605499386787415, -0.8564031720161438, 0.11831419169902802, 0.17546246945858002, -0.8329799175262451, 0.25881293416023254, -0.40336644649505615, 0.012369047850370407, -0.6640740036964417, -0.2830645442008972, 0.38687026500701904, -0.17398938536643982, 0.34656253457069397, -0.3264102041721344, 0.04867285117506981, -0.10443049669265747, -0.42784374952316284, -0.3431708514690399, 0.31508868932724, -0.7289420366287231, -0.3144037127494812, -0.5793119072914124, -0.06722398847341537, 0.8587352633476257, -0.2985045611858368, 0.14067433774471283, -0.616493821144104, -0.3260520100593567, -0.5746934413909912, -0.3571467995643616, 0.040974073112010956, -0.012531748041510582, -0.1705172061920166, -0.1660979986190796, 0.5966318845748901, 0.6673552989959717, 0.5767322182655334, -0.7634948492050171, 0.012221035547554493, -0.19628173112869263, 0.027755538001656532, -0.013681475073099136, 0.39775940775871277, 0.2967824339866638, 0.6131697297096252, -0.380062073469162, -0.17401638627052307, -0.5385547280311584, 0.4210991859436035, 0.0005911813350394368, -0.7213525176048279, -0.3156353533267975, 0.4659569263458252, -0.4501902461051941, 0.6420588493347168, -0.4668736755847931, -0.838721513748169, -0.392917275428772, -0.015866298228502274, 0.024900151416659355, -0.02588120475411415, 1.0528448820114136, -0.5656774640083313, 1.1233853101730347, -0.3796786069869995, 0.0630510076880455, -0.11058978736400604, -0.3139766752719879, -0.8985045552253723, -0.7019621729850769, -0.9136987328529358, -0.09939736127853394, -0.6652820110321045, -0.4283941984176636, -0.2436639815568924, 0.12510651350021362, -0.393370121717453, -0.01880209520459175, -0.10668348520994186, 0.4952475428581238, -0.024530945345759392, -0.5313493609428406, -0.47125834226608276, 0.13193686306476593, 0.4420768618583679, -0.08004511147737503, -0.0241085235029459, 0.3358377516269684, -0.10372227430343628, -0.11145152151584625, -0.41044923663139343, -0.028891343623399734, 0.2159428596496582, 0.7233073115348816, 0.22441132366657257, -0.14118479192256927, -0.619132936000824, -0.15073060989379883, -0.24812909960746765, 0.23325780034065247, -0.1035294458270073, -0.148980513215065, -0.6782898902893066, -0.1453588455915451, 1.3427619934082031, -0.31277966499328613, -0.3693651854991913, -0.5246595740318298, -0.3382093608379364, -0.4578418731689453, -0.20407022535800934, -0.46096742153167725, -0.4348822832107544, -0.25604483485221863, 0.33382415771484375, 0.11029668897390366, -0.03807738050818443, 0.2033364623785019, 0.4116970896720886, -0.15695400536060333, -0.5261691212654114, 0.008308655582368374, -0.20705527067184448, -0.06229372322559357, -0.39491164684295654, -0.6288408041000366, -0.42710018157958984, -0.023405669257044792, -0.2547818720340729, 0.5180252194404602, 0.4105544686317444, 0.5987116098403931, -0.2456945925951004, 0.21248726546764374, 0.04178847745060921, -0.02889854647219181, 0.06639955937862396, 0.0012329895980656147, -0.4386114478111267, -0.26534733176231384, -0.3076750636100769, -0.49978700280189514, 0.16901709139347076, 0.11111622303724289, 0.3197445869445801, 0.25628188252449036, -0.028132662177085876, 0.12888793647289276, 0.1580672264099121, 1.5989630222320557, -0.0246577151119709, -0.15156099200248718, -0.5823608636856079, 0.41357237100601196, -0.4487854242324829, -0.010245631448924541, -0.24802391231060028, -0.4647769331932068, -0.15700294077396393, 0.6228054165840149, 0.524574875831604, -0.7274938821792603, -0.17724056541919708, -0.565701961517334, 0.21185807883739471, 0.22282516956329346, 0.6918519139289856, 0.35957086086273193, 0.5078045725822449, 1.0199419260025024, -0.24875836074352264, 1.2287343740463257, -0.49494221806526184, 0.6484547257423401, -0.09658747911453247, 0.2856267988681793, -0.029474971815943718, -0.8640763759613037, -0.8212791681289673, 0.20017284154891968, -0.1007455438375473, 0.6111099720001221, 0.08739078044891357, -0.738838791847229, -0.9306034445762634, 0.05899709090590477, -0.07630646973848343, -0.1381312608718872, -0.9384279251098633, 0.3745318651199341, -0.06883296370506287, 0.13291150331497192, -0.7586437463760376, -0.08863174915313721, 0.2854447662830353, -0.5773082375526428, 0.255427747964859, -0.0792296752333641, 0.35841241478919983, 0.6655119061470032, 0.7436217069625854, 0.13358263671398163, -0.5102960467338562, 0.1739414632320404, -0.18941299617290497, 0.1936633586883545, -0.1824875771999359, -0.15455085039138794, 0.5043834447860718, -0.3532823324203491, 0.405449241399765, 0.08948934823274612, 0.19331549108028412, -0.2805376350879669, -0.5958933234214783, 0.23604808747768402, -0.5848882794380188, -0.2883265018463135, 0.16298015415668488, -0.4075615704059601, 0.4965423345565796, 0.3612573742866516, 0.12142881751060486, 0.17629137635231018, 0.5890551209449768, -0.7106371521949768, -0.15887489914894104, -0.2790391445159912, -0.21300949156284332, -0.07402360439300537, 0.024041105061769485, 0.3922375738620758, -0.778773844242096, 0.43933534622192383, 0.06165925785899162, -0.4136660695075989, -0.4391920566558838, 0.060458794236183167, -0.17790764570236206, -0.3404170572757721, -0.40812796354293823, -0.12734416127204895, 0.06260768324136734, -0.12184339761734009, 0.031322043389081955, -0.0724741667509079, -0.022642651572823524, -0.08445233851671219, -0.234693244099617, 0.5596922636032104, 0.09782601147890091, -0.18335361778736115, -0.1356908679008484, 0.9131852984428406, -0.715971052646637, -0.1952517032623291, 0.7779358625411987, -0.08153563737869263, -0.5435136556625366, -0.5492559671401978, 0.3240605294704437, 0.11491494625806808, -0.3011290431022644, 0.5762446522712708, 0.9933903813362122, 0.23152852058410645, 0.8710855841636658, 0.19302663207054138, 0.07272373884916306, 0.8233470320701599, 0.8059748411178589, -0.19100812077522278, 0.2176019251346588, -0.8324218988418579, -0.27474477887153625, -0.8720569014549255, -0.012312907725572586, 0.03376085311174393, 0.06712984293699265, -0.5612547993659973, -0.3798147737979889, 0.13830004632472992, -0.09107734262943268, -0.06542257964611053, 0.024943102151155472, -0.3052496016025543, 0.14548879861831665, 1.1628046035766602, 0.21142476797103882, 0.22463947534561157, 0.24860449135303497, 0.2513241767883301, -0.3188169300556183, -0.5283800959587097, 0.02707243151962757, 0.3407188355922699, -0.043051932007074356, 0.25505566596984863, -0.055201854556798935, -0.0854373425245285, 0.457343727350235, -0.07763746380805969, -0.1348237544298172, 0.5729672312736511, -0.45193421840667725, 0.4175146520137787, 0.25248342752456665, -0.01595126837491989, -0.393171489238739, -0.04752387851476669, 1.0218790769577026, 0.2347155511379242, 0.08535505831241608, -0.11503461748361588, 0.05358687415719032, 0.25567880272865295, -0.13273295760154724, -0.35828647017478943, 0.24071446061134338, -0.316317081451416, -0.6307021975517273, 0.01200496032834053, -0.38052695989608765, -0.20771633088588715, -0.8107435703277588, 0.2707045376300812, 0.45487627387046814, 0.6003958582878113, 0.22953389585018158, 0.23554855585098267, -0.04735098034143448, 0.2725541591644287, -1.1900314092636108, 0.5323649644851685, -0.6303828358650208, -0.703348696231842, -0.30970442295074463, -0.11976813524961472, -0.18745705485343933, 0.7296889424324036, 0.20142720639705658, -0.22856861352920532, 0.28096434473991394, -0.2685423493385315, 0.04396003857254982, 0.1480383276939392, 0.008915789425373077, 0.04368065297603607, 0.044381994754076004, 0.0809745192527771, 0.1106286272406578, -0.18815994262695312, -0.1800364851951599, -0.030578264966607094, -0.18067453801631927, 0.3569037914276123, -0.01631355658173561, -0.12234454602003098, 0.019763564690947533, 0.3594987094402313, -0.050354767590761185, -0.17878428101539612, 0.16857755184173584, 0.26832130551338196, 0.3505310118198395, 0.4486726224422455, 0.5207317471504211, 0.4910539388656616, -0.24120211601257324, 0.013508954085409641, -0.012236999347805977, 0.044277917593717575, 0.2767149806022644, 0.48180970549583435, -0.32004955410957336, -0.016584785655140877, 0.7249928712844849, -1.0343760251998901, 0.0031311933416873217, -0.056453511118888855, 0.117716483771801, -0.07536806911230087, -0.012472535483539104, 0.19348296523094177, -0.3508032262325287, 1.0173519849777222, 0.15276885032653809, 0.3615255355834961, 0.5937482714653015, -0.19464239478111267, -0.4154922068119049, -0.4433080852031708, -0.7062219977378845, -0.164781853556633, 0.4369869530200958, -0.26345163583755493, -0.5132963061332703, 0.1129126325249672, 0.27753403782844543, 0.4133777618408203, -0.2155526876449585, 0.8594831824302673, 0.41941168904304504, -0.1686551421880722, 0.2093159407377243, 0.0904495045542717, 0.26597437262535095, -0.12605975568294525, -0.3440677523612976, -0.3313280940055847, -0.2995331287384033, 0.17840875685214996, -0.10794498026371002, 0.6056668758392334, -0.02509278431534767, -0.38984060287475586, -0.05959715321660042, -0.2339964509010315, 0.03574986010789871, 0.050441887229681015, 0.9364607334136963, -0.43215200304985046, 0.09296558052301407, -0.38496482372283936, -0.1764296293258667, -0.013459466397762299, -0.05692003294825554, 0.879744827747345, 0.1323232650756836, -0.12860797345638275, -0.19012130796909332, 0.02558775804936886, 0.3781391680240631, -0.2340543270111084, 0.27151060104370117, 0.27923452854156494, 0.0926923006772995, -0.2767798900604248, 0.0016008077654987574, -0.40042823553085327, -0.1578582376241684, 0.23544764518737793, 1.2502267360687256, -0.0809512659907341, 0.15118037164211273, -0.482217937707901, -0.23982909321784973, -0.34789255261421204, 0.8682899475097656, 0.26050373911857605, -0.4213857352733612, 0.7716926336288452, 0.1638474315404892, 0.2543050944805145, 0.2530718147754669, -0.5187228322029114, 0.36520862579345703, -0.21886438131332397, 0.13177786767482758, 0.1797933578491211, 0.26428842544555664, 0.2587549388408661, -0.14409980177879333, -0.41450345516204834, -0.07529402524232864, 0.24727120995521545, -0.22708046436309814, -0.2962983250617981, 0.4453900456428528, 0.2197607159614563, 0.6755547523498535, -0.5598013401031494, 0.2867403030395508, 0.15190018713474274, -0.13867606222629547, -0.11619248986244202, -0.5093069672584534, -0.47123125195503235, -0.007393567822873592, 0.3992438316345215, 0.01679784432053566, 0.408710241317749, 0.011289372108876705, 0.5076932311058044, -0.23447027802467346, 0.06260409206151962, 0.42655035853385925, -0.08349098265171051, 0.2658694088459015, 0.25709959864616394, 0.18851958215236664, 0.11235064268112183, 1.0794131755828857, 0.36984074115753174, -0.30064821243286133, 0.44351184368133545, 0.5202791690826416, -0.6668952703475952, 0.4609730839729309, 0.397124320268631, -0.32484492659568787, -0.6715741157531738, -0.24825219810009003, -0.3200348913669586, -0.8454489707946777, -0.07017406076192856, 0.43837371468544006, -0.040342479944229126, -0.33217576146125793, 0.4347679018974304, -0.6903840899467468, 0.3966560661792755, 0.3970812261104584, 0.21294738352298737, 0.2615358531475067, 0.6113934516906738, 0.6313722133636475, 0.211927592754364, 0.2622135579586029, 0.8730012774467468, 0.08362219482660294, 0.25291934609413147, 0.29401010274887085, 0.016135040670633316, -0.4796305298805237, 0.1772865504026413, 0.14198781549930573, 0.08476758003234863, 0.7112088203430176, 0.31347158551216125, 0.3048364818096161, -0.371456116437912, 0.2003701776266098, -0.082082599401474, -0.9422203898429871, 0.1908734291791916, -0.2811911404132843, -0.1403690129518509, -0.21031314134597778, -0.491117000579834, 0.043554652482271194, -0.6145973801612854, -0.5311797261238098, -0.10143320262432098, -0.17750442028045654, 0.12022009491920471, 0.9172593951225281, 0.24755096435546875, 0.10366407036781311, 0.40594953298568726, 0.9031850099563599, -0.3462907671928406, 0.33534371852874756, 0.2071959227323532, -0.4397181570529938, 0.3009650707244873, -0.4427418112754822, 0.6069410443305969, 0.6350041031837463, 0.9783973693847656, 0.20417630672454834, -0.09116146713495255, 0.24096114933490753, 0.5033348202705383, 0.22330613434314728, -0.020825674757361412, 0.04413639008998871, 0.04683979973196983, -0.4678245782852173, 0.42326536774635315, -0.2955096960067749, 0.21485422551631927, -0.5315603017807007, 0.14848679304122925, -0.8122234344482422, 0.6592621803283691, 0.29073643684387207, -0.3311985433101654, -0.10163948684930801, -0.5103903412818909, 0.0971292108297348, 0.35263270139694214, -1.2856100797653198, -0.15366432070732117, 0.010243864730000496, -0.7930783629417419, 0.0950951799750328, -0.028741922229528427, -0.20372459292411804, -0.09405852854251862, -0.11850331723690033, -0.5150991082191467, 0.44253912568092346, 0.5149359107017517, -0.4627453684806824, -0.004845667630434036, -0.1783882975578308, 0.9016978144645691, -0.1719304770231247, -0.12947049736976624, 0.3802972733974457, -0.5761289000511169, 0.25391367077827454, -0.038944683969020844, 0.35026514530181885, 0.22045400738716125, 0.2274026870727539, 0.240255206823349, 0.5950577259063721, -0.38240328431129456, 0.30854514241218567, 0.34180325269699097, 0.3442051410675049, 0.4235176146030426, 0.13535374402999878], "query": "class AdminsService():\n\n    @staticmethod\n    def create(data):\n        response = {}\n        try:\n            admin = Admin(**data)\n            admin.save()\n        except Exception:\n            db.session.rollback()\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['message'] = 'New admin registered successfully'\n        return response, 201\n\n    @staticmethod\n    def get_exam_oar(session, semester, course_code, department_code, email):\n        response = {}\n\n        try:\n            admin = Admin.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not admin:\n            response['success'] = False\n            response['message'] = 'Admin Not Found'\n            return response, 404\n\n        # Find course and department\n        try:\n            course = Course.query.filter_by(code=course_code).first()\n            department = Department.query.filter_by(code=department_code).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not course or not department:\n            response['success'] = False\n            response['message'] = 'Invalid department or course'\n            return response, 404\n\n        # Perform formatting to check if table with provided session and semester exists\n        formatted_session = session.lstrip('20')[0] + session.lstrip('20')[1]\n        table_to_search = f'STUDENTS_EXAM_{semester.upper()}_{formatted_session}'\n        table_name = select_table_name(table_to_search)\n\n        if table_name is None:\n            response['success'] = False\n            response['message'] = 'Invalid session or semester selected'\n            return response, 404\n\n        # Perform query and fetch students\n        try:\n            sql = f'''\n                SELECT firstname, lastname, othername, reg_no\n                FROM students\n                INNER JOIN {table_name} ON {table_name}.student_id = students.id\n                WHERE students.department_id = {department.id}\n                AND {table_name}.course_id = {course.id}\n            '''\n            result = db.session.execute(sql)\n            Student = namedtuple('Student', result.keys())\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        response['data'] = []\n        for record in result.fetchall():\n            student = Student(*record)\n            data = {}\n            data['firstname'] = student.firstname\n            data['lastname'] = student.lastname\n            data['othername'] = student.othername\n            data['reg_no'] = student.reg_no\n            response['data'].append(data)\n\n        response['success'] = True\n        return response, 200\n\n    @staticmethod\n    def get_lecture_oar(session, semester, course_code, department_code, email):\n        response = {}\n\n        try:\n            admin = Admin.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not admin:\n            response['success'] = False\n            response['message'] = 'Admin Not Found'\n            return response, 404\n\n        # Find course and department\n        try:\n            course = Course.query.filter_by(code=course_code).first()\n            department = Department.query.filter_by(code=department_code).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not course or not department:\n            response['success'] = False\n            response['message'] = 'Invalid department or course'\n            return response, 404\n\n        # Perform formatting to check if table with provided session and semester exists\n        formatted_session = session.lstrip('20')[0] + session.lstrip('20')[1]\n        table_to_search = f'STUDENT_LECTURES_{semester.upper()}_{formatted_session}'\n        table_name = select_table_name(table_to_search)\n\n        if table_name is None:\n            response['success'] = False\n            response['message'] = 'Invalid session or semester selected'\n            return response, 404\n\n        # Perform query and fetch students\n        try:\n            # Get lecturer total lecture count for course\n            lecturer_table_to_search = f'LECTURER_LECTURES_{semester.upper()}_{formatted_session}'\n            lecturer_lectures_table_name = select_table_name(lecturer_table_to_search)\n            sql = f'''\n                SELECT count\n                FROM {lecturer_lectures_table_name}\n                WHERE course_id = {course.id}\n                LIMIT 1\n            '''\n            result = db.session.execute(sql)\n            record = result.fetchone()\n            # print(result.fetchone())\n            if not record:\n                response['success'] = False\n                response['message'] = 'No lecture has been taken for this class this session/semester'\n                return response, 403\n\n            lecturer_lecture_count = record[0]\n            sql_count = ' '\n            for day_count in range(lecturer_lecture_count):\n                sql_count += f'day{day_count + 1}, '\n            # print(lecturer_lecture_count)\n            # print(sql_count)\n\n            # Get student details\n            sql = f'''\n                SELECT firstname, lastname, othername, reg_no, {sql_count} count\n                FROM students\n                INNER JOIN {table_name} ON {table_name}.student_id = students.id\n                WHERE students.department_id = {department.id}\n                AND {table_name}.course_id = {course.id}\n            '''\n            result = db.session.execute(sql)\n            Student = namedtuple('Student', result.keys())\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        response['data'] = {'students': [], 'lecturer_count': lecturer_lecture_count}\n        for record in result.fetchall():\n            # print(record)\n            student = Student(*record)\n            # print(student)\n            data = {}\n            data['firstname'] = student.firstname\n            data['lastname'] = student.lastname\n            data['othername'] = student.othername\n            data['reg_no'] = student.reg_no\n            for day_count in range(lecturer_lecture_count):\n                data[f'day{day_count + 1}'] = record[day_count + 4]\n            data['count'] = student.count\n            response['data']['students'].append(data)\n\n        response['success'] = True\n        return response, 200\n\n    @staticmethod\n    def get_mastersheet(session, semester, level, department_code, email):\n        response = {}\n\n        try:\n            admin = Admin.query.filter_by(email=email).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not admin:\n            response['success'] = False\n            response['message'] = 'Admin Not Found'\n            return response, 404\n\n        # Find level and department\n        try:\n            department = Department.query.filter_by(code=department_code).first()\n            level = Level.query.filter_by(level=level).first()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not level or not department:\n            response['success'] = False\n            response['message'] = 'Invalid department or level'\n            return response, 404\n\n        try:\n            students = Student.query.filter_by(department=department, level=level).all()\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        if not students:\n            response['success'] = False\n            response['message'] = 'Student Not Found'\n            return response, 404\n\n        # Perform formatting to check if table with provided session and semester exists\n        formatted_session = session.lstrip('20')[0] + session.lstrip('20')[1]\n        table_to_search = f'STUDENT_LECTURES_{semester.upper()}_{formatted_session}'\n        table_name = select_table_name(table_to_search)\n\n        if table_name is None:\n            response['success'] = False\n            response['message'] = 'Invalid session or semester selected'\n            return response, 404\n\n        # Get json serialized data object\n        students_data = [student.to_dict for student in students]\n        try:\n            for index, student in enumerate(students):\n                # add registered column attribute\n                students_data[index]['registered_courses'] = []\n\n                # Append json serialized registered courses and count to each student data object\n                for registered_course in student.registered_courses.all():\n                    sql = f'''\n                        SELECT count\n                        FROM {table_name}\n                        WHERE {table_name}.student_id = {student.id}\n                        AND {table_name}.course_id = {registered_course.id}\n                        LIMIT 1\n                    '''\n                    result = db.session.execute(sql)\n                    record = result.fetchone()\n                    count = record[0] if record is not None else 0\n                    students_data[index]['registered_courses'].append({f'{registered_course.code}': count})\n        except Exception:\n            raise AppException('Internal Server Error', 500)\n\n        response['success'] = True\n        response['data'] = students_data\n        return response, 200", "answer": "{}"}