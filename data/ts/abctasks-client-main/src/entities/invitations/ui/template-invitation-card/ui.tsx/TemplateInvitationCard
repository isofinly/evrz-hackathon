TemplateInvitationCard: React.FC<TemplateInvitationCardProps> = (
	props
) => {
	const { inviterName, roomName, slots, username, className } = props;

	// <REVIEW>переменная должна иметь явный смысл в своем названии</REVIEW>
	const { t } = useTranslation('room-invitation');

	const { inviterAvatar, userAvatar, actions } = slots;

	const title = t('card.title', {
		inviter_name: inviterName,
	});

	const text = t('card.text', {
		inviter_name: inviterName,
		user_name: username,
		room_name: roomName,
		returnObjects: true,
	}) as Array<string>;

	return (
		<Card className={cn(styles.card, className)}>
			<CardHeader
				avatar={inviterAvatar}
				title={title}
				titleTypographyProps={{ fontWeight: 500 }}
			/>
			<CardContent>
				<div className={styles.content}>
					{inviterAvatar}
					<Typography className={styles.text} variant='body2' component='p'>
						{text[0]}
						{/*<REVIEW><b></b> не использовать, только стилистика</REVIEW> */}
						<b>{text[1]}</b>
						{text[2]}
						{/*<REVIEW><b></b> не использовать, только стилистика</REVIEW> */}
						<b>{text[3]}</b>
						{text[4]}
						{/*<REVIEW><b></b> не использовать, только стилистика</REVIEW> */}
						<b>{text[5]}</b>
					</Typography>
					{userAvatar}
				</div>
			</CardContent>
			{actions ? (
				<CardActions className={styles.actions}>{actions}</CardActions>
			) : null}
		</Card>
	);
}