{"query": "\nimport { Autocomplete, ListItem } from '@mui/material';\n\nimport { useUnit } from 'effector-react';\n\nimport * as React from 'react';\n\n\nimport { Tag } from '@/shared/api';\n\nimport { CommonProps, PickerProps } from '@/shared/types';\n\nimport { Field, FieldProps } from '@/shared/ui';\n\n\nimport { tagsModel } from '../../model';\n\nimport { TagLabel } from '../tag-label';\n\n\nexport type TagPickerProps = CommonProps &\n\n\tPickerProps<number> &\n\n\tOmit<FieldProps, 'onChange' | 'value' | 'className' | 'multiline'>;\n\n\nexport const TagPicker: React.FC<TagPickerProps> = React.memo((props) => {\n\n\tconst { className, onChange, value, limitTags, multiple, ...rest } = props;\n\n\tconst tags = useUnit(tagsModel.query);\n\n\n\tlet changeHandler;\n\n\tif (multiple) {\n\n\t\tchangeHandler = (_: unknown, tags: Tag[]) => {\n\n\t\t\tonChange(tags.map((tag) => tag.id));\n\n\t\t};\n\n\t} else {\n\n\t\tchangeHandler = (_: unknown, tag: Tag | null) => {\n\n\t\t\tonChange(tag?.id || null);\n\n\t\t};\n\n\t}\n\n\n\tlet selected;\n\n\tif (multiple) {\n\n\t\tselected = tags.data.filter((tag) => value.includes(tag.id));\n\n\t} else {\n\n\t\tselected = tags.data.find((tag) => tag.id === value) ?? null;\n\n\t}\n\n\n\treturn (\n\n\t\t<Autocomplete\n\n\t\t\tclassName={className}\n\n\t\t\toptions={tags.data}\n\n\t\t\tloading={tags.pending}\n\n\t\t\tonChange={changeHandler as any}\n\n\t\t\tvalue={selected as any}\n\n\t\t\tgetOptionLabel={(tag) => tag.name}\n\n\t\t\trenderOption={(props, tag) => (\n\n\t\t\t\t<ListItem {...props} key={tag.id}>\n\n\t\t\t\t\t<TagLabel {...tag} />\n\n\t\t\t\t</ListItem>\n\n\t\t\t)}\n\n\t\t\trenderTags={(tags, getTagProps) => {\n\n\t\t\t\treturn tags.map((tag, index) => (\n\n\t\t\t\t\t<TagLabel {...tag} {...getTagProps({ index })} />\n\n\t\t\t\t));\n\n\t\t\t}}\n\n\t\t\trenderInput={(params) => <Field {...params} {...rest} />}\n\n\t\t\tlimitTags={limitTags}\n\n\t\t\tmultiple={multiple}\n\n\t\t/>\n\n\t);\n\n});\n", "answer": "{\"1\": \"\u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0439 \u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e \u043f\u0443\u0442\u0438\"/src/Components/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043f\u043a\u0438}/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430}.tsx\"\",\n\"0\": \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 CamelCase\",\n\"0\": \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 ui \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u043d\u0430 \u043f\u043e\u0434\u043e\u0431\u0438\u0438 material \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e\",\n\"1\": \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0441\u0430 \u0438\u043b\u0438 \u0442\u0438\u043f\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 types.ts \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435 \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0439\"}"}