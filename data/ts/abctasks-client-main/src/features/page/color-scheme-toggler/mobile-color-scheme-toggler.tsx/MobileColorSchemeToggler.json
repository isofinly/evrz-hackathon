{"start_line": 22, "code": "MobileColorSchemeToggler: React.FC<\n\n\tMobileColorSchemeTogglerProps\n\n> = (props) => {\n\tconst { className } = props;\n\tconst [opened, handlers] = useToggle();\n\t// <REVIEW>\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u043c\u0435\u0442\u044c \u044f\u0432\u043d\u044b\u0439 \u0441\u043c\u044b\u0441\u043b \u0432 \u0441\u0432\u043e\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438</REVIEW>\n\tconst { t } = useTranslation('common');\n\tconst [ref, setRef] = React.useState<HTMLElement | null>(null);\n\tconst [colorScheme, changeColorScheme] = useToggleColorScheme();\n\n\tconst SelectedIcon = ICONS_MAP[colorScheme];\n\n\tconst createOnChange = (value: colorSchemeModel.ColorScheme) => {\n\t\treturn () => {\n\t\t\tchangeColorScheme(value);\n\t\t\thandlers.toggleOff();\n\t\t};\n\t};\n\n\tconst activated = t('color_schemes.activated', { scheme: colorScheme });\n\n\treturn (\n\t\t<>\n\t\t\t<Tooltip title={activated}>\n\t\t\t\t<IconButton\n\t\t\t\t\tclassName={className}\n\t\t\t\t\tonClick={handlers.toggleOn}\n\t\t\t\t\tref={setRef}>\n\t\t\t\t\t<SelectedIcon />\n\t\t\t\t</IconButton>\n\t\t\t</Tooltip>\n\t\t\t<Menu\n\t\t\t\topen={opened}\n\t\t\t\tanchorEl={ref}\n\t\t\t\tonClose={handlers.toggleOff}\n\t\t\t\tanchorOrigin={{\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t\tvertical: 'bottom',\n\t\t\t\t}}\n\t\t\t\ttransformOrigin={{\n\t\t\t\t\thorizontal: 'right',\n\t\t\t\t\tvertical: 'top',\n\t\t\t\t}}\n\t\t\t\tMenuListProps={{\n\t\t\t\t\tdisablePadding: true,\n\t\t\t\t}}>\n\t\t\t\t{SCHEMES.map((scheme) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\tonClick={createOnChange(scheme)}\n\t\t\t\t\t\t\tselected={colorScheme === scheme}\n\t\t\t\t\t\t\tkey={scheme}>\n\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t{React.createElement(ICONS_MAP[scheme])}\n\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t{t(`color_schemes.schemes.${scheme}`)}\n\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Menu>\n\t\t</>\n\t);\n}"}