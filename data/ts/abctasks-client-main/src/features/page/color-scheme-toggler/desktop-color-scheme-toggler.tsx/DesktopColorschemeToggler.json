{"query": "DesktopColorschemeToggler: React.FC<\n\n\tDesktopColorSchemeTogglerProps\n\n> = (props) => {\n\tconst { className, size = 'small' } = props;\n\tconst { t } = useTranslation('common');\n\tconst [colorScheme, changeColorScheme] = useToggleColorScheme();\n\n\tconst onChange = (_event: unknown, value: colorSchemeModel.ColorScheme) => {\n\t\tchangeColorScheme(value);\n\t};\n\n\treturn (\n\t\t<ToggleButtonGroup\n\t\t\tclassName={className}\n\t\t\tvalue={colorScheme}\n\t\t\tonChange={onChange}\n\t\t\taria-label='color scheme'\n\t\t\tsize={size}\n\t\t\tcolor='primary'\n\t\t\texclusive>\n\t\t\t{SCHEMES.map((scheme) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Tooltip title={t(`color_schemes.schemes.${scheme}`)} key={scheme}>\n\t\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\t\tvalue={scheme}\n\t\t\t\t\t\t\tselected={colorScheme === scheme}\n\t\t\t\t\t\t\taria-label={`${scheme} scheme`}>\n\t\t\t\t\t\t\t{React.createElement(ICONS_MAP[scheme])}\n\t\t\t\t\t\t</ToggleButton>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t);\n\t\t\t})}\n\t\t</ToggleButtonGroup>\n\t);\n}", "answer": "{\"1\": \"\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0438\u043c\u0435\u0442\u044c \u044f\u0432\u043d\u044b\u0439 \u0441\u043c\u044b\u0441\u043b \u0432 \u0441\u0432\u043e\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438\"}"}