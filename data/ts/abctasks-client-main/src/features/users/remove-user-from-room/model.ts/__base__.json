{"start_line": 0, "code": "import { createMutation, update } from '@farfetched/core';\n\nimport { runtypeContract } from '@farfetched/runtypes';\n\nimport { createEffect, createEvent, createStore, sample } from 'effector';\n\nimport { Boolean } from 'runtypes';\n\n\nimport { usersInRoomModel } from '@/entities/users';\n\n\nimport { RemoveUserParams, membersApi } from '@/shared/api';\n\nimport { i18n, popupsMap, routes } from '@/shared/configs';\n\nimport { createPopupControlModel } from '@/shared/lib';\n\nimport { notificationsModel } from '@/shared/models';\n\nimport { getStandardResponse } from '@/shared/types';\n\n\nconst handlerFx = createEffect(membersApi.remove);\n\n\nexport const popupControls = createPopupControlModel({\n\n\tname: popupsMap.removeUserFromRoom,\n\n\tsync: false,\n\n});\n\n\nconst $id = createStore<number | null>(null);\n\n\nexport const openConfirm = createEvent<number>();\n\nexport const remove = createEvent();\n\n\nexport const mutation = createMutation({\n\n\teffect: handlerFx,\n\n\tcontract: runtypeContract(getStandardResponse(Boolean)),\n\n});\n\n\nsample({\n\n\tclock: openConfirm,\n\n\ttarget: [popupControls.open, $id],\n\n});\n\n\nsample({\n\n\tclock: remove,\n\n\tsource: {\n\n\t\tid: $id,\n\n\t\troomId: routes.room.users.$params.map((params) => params.id),\n\n\t},\n\n\tfilter: ({ id, roomId, }) => !!id && !!roomId,\n\n\tfn: ({ id, roomId, }) => {\n\n\t\treturn {\n\n\t\t\troomId,\n\n\t\t\tuserId: id,\n\n\t\t} as RemoveUserParams;\n\n\t},\n\n\ttarget: mutation.start,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.finally,\n\n\ttarget: popupControls.close,\n\n});\n\n\nsample({\n\n\tclock: popupControls.closed,\n\n\ttarget: $id.reinit!,\n\n});\n\n\nupdate(usersInRoomModel.query, {\n\n\ton: mutation,\n\n\tby: {\n\n\t\tsuccess: ({ mutation, query, }) => {\n\n\t\t\tif (!query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\tresult: [],\n\n\t\t\t\t\trefetch: true,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\tif ('error' in query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\terror: query.error,\n\n\t\t\t\t\trefetch: true,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\treturn {\n\n\t\t\t\tresult: query.result.filter(\n\n\t\t\t\t\t(user) => user.id !== mutation.params.userId\n\n\t\t\t\t),\n\n\t\t\t};\n\n\t\t},\n\n\t},\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.remove_user.notifications.success', {\n\n\t\t\tns: 'room-users',\n\n\t\t}),\n\n\t\tcolor: 'success' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.failure,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.remove_user.notifications.error', {\n\n\t\t\tns: 'room-users',\n\n\t\t}),\n\n\t\tcolor: 'error' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n"}