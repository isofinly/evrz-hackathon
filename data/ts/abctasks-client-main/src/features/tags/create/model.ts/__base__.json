{"start_line": 0, "code": "import { createMutation, update } from '@farfetched/core';\n\nimport { runtypeContract } from '@farfetched/runtypes';\n\nimport { createEffect, sample } from 'effector';\n\n\nimport { tagsModel } from '@/entities/tags';\n\n\nimport { CreateTagParams, tag, Tag, tagsApi } from '@/shared/api';\n\nimport { i18n, popupsMap, routes } from '@/shared/configs';\n\nimport { createPopupControlModel } from '@/shared/lib';\n\nimport { notificationsModel } from '@/shared/models';\n\nimport { StandardResponse, getStandardResponse } from '@/shared/types';\n\n\nimport { tagFormModel } from '../form';\n\n\nexport const popupControls = createPopupControlModel({\n\n\tname: popupsMap.createTag,\n\n});\n\n\nexport const form = tagFormModel.create();\n\n\nconst { formValidated, reset, } = form;\n\n\nconst handlerFx = createEffect(tagsApi.create);\n\n\nexport const mutation = createMutation<\n\n\tCreateTagParams,\n\n\tStandardResponse<Tag>,\n\n\tStandardResponse<Tag>,\n\n\tError\n\n>({\n\n\teffect: handlerFx,\n\n\tcontract: runtypeContract(getStandardResponse(tag)),\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\ttarget: popupControls.close,\n\n});\n\n\nsample({\n\n\tclock: popupControls.closed,\n\n\ttarget: reset,\n\n});\n\n\nsample({\n\n\tclock: formValidated,\n\n\tsource: routes.room.tags.$params,\n\n\tfn: (params, values) => ({ ...values, roomId: params.id, }),\n\n\ttarget: mutation.start,\n\n});\n\n\nupdate(tagsModel.query, {\n\n\ton: mutation,\n\n\tby: {\n\n\t\tsuccess: ({ query, mutation, }) => {\n\n\t\t\tif (!query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\tresult: [],\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\tif ('error' in query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\terror: query.error,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\treturn {\n\n\t\t\t\tresult: [...query.result, mutation.result.data],\n\n\t\t\t};\n\n\t\t},\n\n\t},\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.create_tag.notifications.success', {\n\n\t\t\tns: 'room-tags',\n\n\t\t}),\n\n\t\tcolor: 'success' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.failure,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.create_tag.notifications.success', {\n\n\t\t\tns: 'room-tags',\n\n\t\t}),\n\n\t\tcolor: 'error' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n"}