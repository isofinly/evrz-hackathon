{"start_line": 0, "code": "import { createMutation, update } from '@farfetched/core';\n\nimport { runtypeContract } from '@farfetched/runtypes';\n\nimport { createEffect, createEvent, sample } from 'effector';\n\nimport { and, not } from 'patronum';\n\n\nimport { tagsModel, tagModel } from '@/entities/tags';\n\n\nimport { UpdateTagParams, Tag, tagsApi, tag, GetTagParams } from '@/shared/api';\n\nimport { getParams, i18n, popupsMap, routes } from '@/shared/configs';\n\nimport { createPopupControlModel, createQueryModel } from '@/shared/lib';\n\nimport { notificationsModel } from '@/shared/models';\n\nimport { StandardResponse, getStandardResponse } from '@/shared/types';\n\n\nimport { tagFormModel } from '../form';\n\n\nconst handlerFx = createEffect(tagsApi.update);\n\n\nexport const mutation = createMutation<\n\n\tUpdateTagParams,\n\n\tStandardResponse<Tag>,\n\n\tStandardResponse<Tag>,\n\n\tError\n\n>({\n\n\teffect: handlerFx,\n\n\tcontract: runtypeContract(getStandardResponse(tag)),\n\n});\n\n\nexport const popupControls = createPopupControlModel({\n\n\tname: popupsMap.updateTag,\n\n});\n\nexport const $roomId = routes.room.tags.$params.map((params) => params.id);\n\nexport const form = tagFormModel.create();\n\nexport const tagId = createQueryModel<number | null>({\n\n\tname: getParams.tagId,\n\n\tdefaultValue: null,\n\n});\n\n\nexport const openPopup = createEvent<number>();\n\n\nsample({\n\n\tclock: openPopup,\n\n\ttarget: [popupControls.open, tagId.set],\n\n});\n\n\nconst { fields, setForm, reset, formValidated, } = form;\n\n\nsample({\n\n\tclock: popupControls.closed,\n\n\ttarget: [tagId.reset, reset],\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\ttarget: popupControls.close,\n\n});\n\n\nsample({\n\n\tclock: popupControls.opened,\n\n\tsource: {\n\n\t\troomId: $roomId,\n\n\t\tid: tagId.$value,\n\n\t},\n\n\tfilter: ({ id, }) => {\n\n\t\treturn !!id;\n\n\t},\n\n\tfn: ({ id, roomId, }) => {\n\n\t\treturn {\n\n\t\t\tid,\n\n\t\t\troomId,\n\n\t\t} as GetTagParams;\n\n\t},\n\n\ttarget: tagModel.query.start,\n\n});\n\n\nsample({\n\n\tclock: formValidated,\n\n\tsource: { params: routes.room.tags.$params, id: tagId.$value, },\n\n\tfilter: and(popupControls.$isOpen, not(tagId.$isEmpty)),\n\n\tfn: ({ params, id, }, values) => ({\n\n\t\t...values,\n\n\t\tid: Number(id),\n\n\t\troomId: params.id,\n\n\t}),\n\n\ttarget: mutation.start,\n\n});\n\n\nsample({\n\n\tclock: tagModel.query.finished.success,\n\n\tfn: ({ result, }) => result,\n\n\ttarget: setForm,\n\n});\n\n\nsample({\n\n\tclock: tagModel.query.finished.success,\n\n\tfn: () => false,\n\n\ttarget: [\n\n\t\tfields.name.$isDirty,\n\n\t\tfields.mainColor.$isDirty,\n\n\t\tfields.secondColor.$isDirty\n\n\t],\n\n});\n\n\nupdate(tagsModel.query, {\n\n\ton: mutation,\n\n\tby: {\n\n\t\tsuccess: ({ query, mutation, }) => {\n\n\t\t\tif (!query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\tresult: [],\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\tif ('error' in query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\terror: query.error,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\treturn {\n\n\t\t\t\tresult: query.result.map((tag) =>\n\n\t\t\t\t\ttag.id === mutation.result.data.id ? mutation.result.data : tag\n\n\t\t\t\t),\n\n\t\t\t};\n\n\t\t},\n\n\t},\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.update_tag.notifications.success', {\n\n\t\t\tns: 'room-tags',\n\n\t\t}),\n\n\t\tcolor: 'success' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.failure,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.update_tag.notifications.error', {\n\n\t\t\tns: 'room-tags',\n\n\t\t}),\n\n\t\tcolor: 'error' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n"}