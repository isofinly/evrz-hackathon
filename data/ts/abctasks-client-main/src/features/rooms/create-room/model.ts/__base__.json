{"start_line": 0, "code": "import { createMutation, update } from '@farfetched/core';\n\nimport { runtypeContract } from '@farfetched/runtypes';\n\nimport { createDomain, createEvent, sample } from 'effector';\n\n\nimport { roomsModel } from '@/entities/rooms';\n\n\nimport { CreateRoomParams, room, Room, roomsApi } from '@/shared/api';\n\nimport { i18n, popupsMap } from '@/shared/configs';\n\nimport { createPopupControlModel } from '@/shared/lib';\n\nimport { notificationsModel } from '@/shared/models';\n\nimport { getStandardResponse, StandardResponse } from '@/shared/types';\n\n\nimport { roomFormModel } from '../form';\n\n\nconst createRoomsDomain = createDomain();\n\n\nconst handlerFx = createRoomsDomain.effect(roomsApi.create);\n\n\nexport const mutation = createMutation<\n\n\tCreateRoomParams,\n\n\tStandardResponse<Room>,\n\n\tStandardResponse<Room>,\n\n\tError\n\n>({\n\n\teffect: handlerFx,\n\n\tcontract: runtypeContract(getStandardResponse(room)),\n\n});\n\n\nexport const openButtonClicked = createEvent();\n\nexport const form = roomFormModel.create();\n\n\nexport const popupControls = createPopupControlModel({\n\n\tname: popupsMap.createRoom,\n\n});\n\nconst { reset, formValidated, } = form;\n\n\nsample({\n\n\tclock: popupControls.closed,\n\n\ttarget: reset,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\ttarget: popupControls.close,\n\n});\n\n\nsample({\n\n\tclock: formValidated,\n\n\tfilter: popupControls.$isOpen,\n\n\ttarget: mutation.start,\n\n});\n\n\nupdate(roomsModel.query, {\n\n\ton: mutation,\n\n\tby: {\n\n\t\tsuccess: ({ query, mutation, }) => {\n\n\t\t\tif (!query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\tresult: [],\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\tif ('error' in query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\terror: query.error,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\treturn {\n\n\t\t\t\tresult: [mutation.result.data, ...query.result],\n\n\t\t\t};\n\n\t\t},\n\n\t},\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.create_room.notifications.success', {\n\n\t\t\tns: 'rooms',\n\n\t\t}),\n\n\t\tcolor: 'success' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.failure,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.create_room.notifications.error', { ns: 'rooms', }),\n\n\t\tcolor: 'error' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n"}