{"start_line": 0, "code": "import { createMutation, update } from '@farfetched/core';\n\nimport { runtypeContract } from '@farfetched/runtypes';\n\nimport { createDomain, createEvent, sample } from 'effector';\n\nimport { and, not } from 'patronum';\n\n\nimport { roomModel, roomsModel } from '@/entities/rooms';\n\n\nimport { UpdateRoomParams, Room, roomsApi, room } from '@/shared/api';\n\nimport { getParams, i18n, popupsMap } from '@/shared/configs';\n\nimport { createPopupControlModel, createQueryModel } from '@/shared/lib';\n\nimport { notificationsModel } from '@/shared/models';\n\nimport { StandardResponse, getStandardResponse } from '@/shared/types';\n\n\nimport { roomFormModel } from '../form';\n\n\nconst updateRoomDomain = createDomain();\n\n\nconst handlerFx = updateRoomDomain.effect<\n\n\tUpdateRoomParams,\n\n\tStandardResponse<Room>,\n\n\tError\n\n>(roomsApi.update);\n\n\nexport const mutation = createMutation<\n\n\tUpdateRoomParams,\n\n\tStandardResponse<Room>,\n\n\tStandardResponse<Room>,\n\n\tError\n\n>({\n\n\teffect: handlerFx,\n\n\tcontract: runtypeContract(getStandardResponse(room)),\n\n});\n\n\nexport const form = roomFormModel.create();\n\nexport const popupControls = createPopupControlModel({\n\n\tname: popupsMap.updateRoom,\n\n});\n\nexport const roomId = createQueryModel<number | null>({\n\n\tname: getParams.roomId,\n\n\tdefaultValue: null,\n\n});\n\nexport const openPopup = createEvent<number>();\n\n\nconst { formValidated, reset, setInitialForm, } = form;\n\n\nsample({\n\n\tclock: openPopup,\n\n\ttarget: [popupControls.open, roomId.set],\n\n});\n\n\nsample({\n\n\tclock: popupControls.opened,\n\n\tsource: roomId.$value,\n\n\tfilter: Boolean,\n\n\tfn: (id) => ({ roomId: id, }),\n\n\ttarget: roomModel.query.start,\n\n});\n\n\nsample({\n\n\tclock: popupControls.closed,\n\n\ttarget: [roomId.reset, reset, roomModel.query.reset],\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\ttarget: popupControls.close,\n\n});\n\n\nsample({\n\n\tclock: formValidated,\n\n\tsource: roomId.$value,\n\n\tfilter: and(popupControls.$isOpen, not(roomId.$isEmpty)),\n\n\tfn: (roomId, values) => {\n\n\t\treturn { ...values, roomId: Number(roomId), };\n\n\t},\n\n\ttarget: mutation.start,\n\n});\n\n\nsample({\n\n\tclock: roomModel.query.finished.success,\n\n\tfn: ({ result, }) => result,\n\n\ttarget: setInitialForm,\n\n});\n\n\nupdate(roomsModel.query, {\n\n\ton: mutation,\n\n\tby: {\n\n\t\tsuccess: ({ query, mutation, }) => {\n\n\t\t\tif (!query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\tresult: [],\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\tif ('error' in query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\terror: query.error,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\treturn {\n\n\t\t\t\tresult: query.result.map((room) =>\n\n\t\t\t\t\troom.id === mutation.result.data.id ? mutation.result.data : room\n\n\t\t\t\t),\n\n\t\t\t};\n\n\t\t},\n\n\t},\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.update_room.notifications.success', {\n\n\t\t\tns: 'rooms',\n\n\t\t}),\n\n\t\tcolor: 'success' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.failure,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.update_room.notifications.error', { ns: 'rooms', }),\n\n\t\tcolor: 'error' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n"}