{"start_line": 0, "code": "import { createMutation, update } from '@farfetched/core';\n\nimport { runtypeContract } from '@farfetched/runtypes';\n\nimport { createDomain, createEvent, sample } from 'effector';\n\n\nimport { tasksInRoomModel } from '@/entities/tasks';\n\n\nimport {\n\n\tCreateTaskParams,\n\n\tTask,\n\n\ttasksApi,\n\n\ttask,\n\n\tTaskStatus,\n\n} from '@/shared/api';\n\nimport { getParams, i18n, popupsMap, routes } from '@/shared/configs';\n\nimport { createPopupControlModel, createQueryModel } from '@/shared/lib';\n\nimport { notificationsModel } from '@/shared/models';\n\nimport { StandardResponse, getStandardResponse } from '@/shared/types';\n\n\nimport { taskFormModel } from '../form';\n\n\nconst createTaskDomain = createDomain();\n\n\nconst handlerFx = createTaskDomain.effect<\n\n\tCreateTaskParams,\n\n\tStandardResponse<Task>,\n\n\tError\n\n>(tasksApi.create);\n\n\nexport const mutation = createMutation<\n\n\tCreateTaskParams,\n\n\tStandardResponse<Task>,\n\n\tStandardResponse<Task>,\n\n\tError\n\n>({\n\n\teffect: handlerFx,\n\n\tcontract: runtypeContract(getStandardResponse(task)),\n\n});\n\n\nexport const form = taskFormModel.create();\n\n\nexport const popupControls = createPopupControlModel({\n\n\tname: popupsMap.createTask,\n\n});\n\n\nexport const status = createQueryModel<TaskStatus | null>({\n\n\tname: getParams.taskStatus,\n\n\tdefaultValue: null,\n\n});\n\nexport const openPopup = createEvent<TaskStatus>();\n\n\nconst { reset, formValidated } = form;\n\n\nsample({\n\n\tclock: openPopup,\n\n\ttarget: popupControls.open,\n\n});\n\n\nsample({\n\n\tclock: openPopup,\n\n\ttarget: status.set,\n\n});\n\n\nsample({\n\n\tclock: popupControls.closed,\n\n\ttarget: status.reset,\n\n});\n\n\nsample({\n\n\tclock: popupControls.closed,\n\n\ttarget: status.reset,\n\n});\n\n\nsample({\n\n\tclock: popupControls.closed,\n\n\ttarget: reset,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\ttarget: popupControls.close,\n\n});\n\n\nsample({\n\n\tclock: formValidated,\n\n\tsource: routes.room.tasks.$params,\n\n\tfn: ({ id }, values) => ({ roomId: id, ...values }),\n\n\ttarget: mutation.start,\n\n});\n\n\nsample({\n\n\tclock: popupControls.opened,\n\n\tsource: status.$value,\n\n\tfilter: Boolean,\n\n\tfn: (status) => ({ status }),\n\n\ttarget: form.setInitialForm,\n\n});\n\n\nupdate(tasksInRoomModel.query, {\n\n\ton: mutation,\n\n\tby: {\n\n\t\tsuccess: ({ query, mutation }) => {\n\n\t\t\tif (!query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\tresult: [],\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\tif ('error' in query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\terror: query.error,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\treturn {\n\n\t\t\t\tresult: [...query.result, mutation.result.data],\n\n\t\t\t};\n\n\t\t},\n\n\t},\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.create_task.notifications.success', {\n\n\t\t\tns: 'tasks',\n\n\t\t}),\n\n\t\tcolor: 'success' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.failure,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.create_task.notifications.error', { ns: 'tasks' }),\n\n\t\tcolor: 'error' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n"}