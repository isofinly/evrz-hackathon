{"start_line": 0, "code": "import { createMutation, update } from '@farfetched/core';\n\nimport { runtypeContract } from '@farfetched/runtypes';\n\nimport { combine, createDomain, createEvent, sample } from 'effector';\n\nimport { not } from 'patronum';\n\n\nimport { taskModel, tasksInRoomModel } from '@/entities/tasks';\n\n\nimport { UpdateTaskParams, Task, tasksApi, task } from '@/shared/api';\n\nimport { getParams, i18n, popupsMap, routes } from '@/shared/configs';\n\nimport { createPopupControlModel, createQueryModel } from '@/shared/lib';\n\nimport { notificationsModel } from '@/shared/models';\n\nimport { StandardResponse, getStandardResponse } from '@/shared/types';\n\n\nimport { taskFormModel } from '../form';\n\n\nconst updateTaskDomain = createDomain();\n\n\nconst handlerFx = updateTaskDomain.effect(tasksApi.update);\n\n\nexport const mutation = createMutation<\n\n\tUpdateTaskParams,\n\n\tStandardResponse<Task>,\n\n\tStandardResponse<Task>,\n\n\tError\n\n>({\n\n\teffect: handlerFx,\n\n\tcontract: runtypeContract(getStandardResponse(task)),\n\n});\n\n\nexport const popupControls = createPopupControlModel({\n\n\tname: popupsMap.updateTask,\n\n});\n\nexport const taskId = createQueryModel<number | null>({\n\n\tname: getParams.taskId,\n\n\tdefaultValue: null,\n\n});\n\nexport const openPopup = createEvent<number>();\n\n\nconst $routeParams = combine(\n\n\ttaskId.$value,\n\n\troutes.room.tasks.$params,\n\n\t(id, params) => ({ id: Number(id), roomId: params.id, })\n\n);\n\n\nexport const form = taskFormModel.create();\n\n\nconst { formValidated, setInitialForm, reset, } = form;\n\n\nsample({\n\n\tclock: openPopup,\n\n\ttarget: popupControls.open,\n\n});\n\n\nsample({\n\n\tclock: openPopup,\n\n\ttarget: taskId.set,\n\n});\n\n\nsample({\n\n\tclock: popupControls.closed,\n\n\ttarget: taskId.reset,\n\n});\n\n\nsample({\n\n\tclock: popupControls.close,\n\n\ttarget: [taskId.reset!, reset],\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\ttarget: popupControls.close,\n\n});\n\n\nsample({\n\n\tclock: popupControls.opened,\n\n\tsource: $routeParams,\n\n\ttarget: taskModel.query.start,\n\n});\n\n\nsample({\n\n\tclock: formValidated,\n\n\tsource: $routeParams,\n\n\tfilter: not(taskId.$isEmpty),\n\n\tfn: (routeParams, values) => {\n\n\t\treturn { ...values, ...routeParams, };\n\n\t},\n\n\ttarget: mutation.start,\n\n});\n\n\nsample({\n\n\tclock: taskModel.query.finished.success,\n\n\tfn: ({ result, }) => {\n\n\t\tconst { tags, ...rest } = result;\n\n\n\t\treturn {\n\n\t\t\t...rest,\n\n\t\t\ttagIds: tags.map((tag) => tag.id),\n\n\t\t};\n\n\t},\n\n\ttarget: setInitialForm,\n\n});\n\n\nupdate(tasksInRoomModel.query, {\n\n\ton: mutation,\n\n\tby: {\n\n\t\tsuccess: ({ query, mutation, }) => {\n\n\t\t\tif (!query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\tresult: [],\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\tif ('error' in query) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\terror: query.error,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\n\t\t\treturn {\n\n\t\t\t\tresult: query.result.map((task) =>\n\n\t\t\t\t\ttask.id === mutation.result.data.id ? mutation.result.data : task\n\n\t\t\t\t),\n\n\t\t\t};\n\n\t\t},\n\n\t},\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.success,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.update_task.notifications.success', {\n\n\t\t\tns: 'tasks',\n\n\t\t}),\n\n\t\tcolor: 'success' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n\n\nsample({\n\n\tclock: mutation.finished.failure,\n\n\tfn: () => ({\n\n\t\tmessage: i18n.t('actions.update_task.notifications.error', { ns: 'tasks', }),\n\n\t\tcolor: 'error' as const,\n\n\t}),\n\n\ttarget: notificationsModel.create,\n\n});\n"}