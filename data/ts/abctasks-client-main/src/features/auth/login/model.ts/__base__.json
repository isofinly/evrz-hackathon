{"start_line": 0, "code": "import { createMutation } from '@farfetched/core';\n\nimport { runtypeContract } from '@farfetched/runtypes';\n\nimport { createDomain, sample } from 'effector';\n\nimport { createForm } from 'effector-forms';\n\nimport Joi from 'joi';\n\nimport { splitMap } from 'patronum';\n\n\nimport { authApi, authResponse, AuthResponse, LoginParams } from '@/shared/api';\n\nimport { MAX_SHORT_LENGTH, MIN_LENGTH } from '@/shared/configs';\n\nimport { createRuleFromSchema, isHttpErrorCode } from '@/shared/lib';\n\nimport { sessionModel } from '@/shared/models';\n\nimport { StandardResponse, getStandardResponse } from '@/shared/types';\n\n\n// <REVIEW>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043e\u043c\u0435\u043d\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u043e \u043f\u0443\u0442\u0438 /src/Model/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435}/state.ts </REVIEW>\nconst loginDomain = createDomain();\n\n\n// <REVIEW>\u0435\u0444\u0444\u0435\u043a\u0442 \u0434\u043e\u043b\u0436\u043d \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 /src/Model/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435}/effects/effect.ts</REVIEW>\nconst handlerFx = loginDomain.effect<\n\n\tLoginParams,\n\n\tStandardResponse<AuthResponse>\n\n>(authApi.login);\n\n\n// <REVIEW>\u041c\u0443\u0442\u0430\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 /src/Model/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435}/effects/effect.ts</REVIEW>\nexport const mutation = createMutation<\n\n\tLoginParams,\n\n\tStandardResponse<AuthResponse>,\n\n\tStandardResponse<AuthResponse>,\n\n\tError\n\n>({\n\n\teffect: handlerFx,\n\n\tcontract: runtypeContract(getStandardResponse(authResponse)),\n\n});\n\n\nconst schemas = {\n\n\temail: Joi.string()\n\n\t\t.email({ tlds: { allow: false } })\n\n\t\t.min(MIN_LENGTH)\n\n\t\t.max(MAX_SHORT_LENGTH)\n\n\t\t.required()\n\n\t\t.messages({\n\n\t\t\t'string.empty': 'empty',\n\n\t\t\t'string.email': 'email',\n\n\t\t\t'string.min': 'min_length',\n\n\t\t\t'string.max': 'max_length',\n\n\t\t}),\n\n\tpassword: Joi.string()\n\n\t\t.min(MIN_LENGTH)\n\n\t\t.max(MAX_SHORT_LENGTH)\n\n\t\t.required()\n\n\t\t.messages({\n\n\t\t\t'string.empty': 'empty',\n\n\t\t\t'string.pattern.base': 'pattern',\n\n\t\t\t'string.min': 'min_length',\n\n\t\t\t'string.max': 'max_length',\n\n\t\t}),\n\n\trememberMe: Joi.boolean(),\n\n};\n\n\nexport const form = createForm<LoginParams>({\n\n\tfields: {\n\n\t\temail: {\n\n\t\t\tinit: '',\n\n\t\t\trules: [createRuleFromSchema('email', schemas.email)],\n\n\t\t},\n\n\t\tpassword: {\n\n\t\t\tinit: '',\n\n\t\t\trules: [createRuleFromSchema('password', schemas.password)],\n\n\t\t},\n\n\t\trememberMe: {\n\n\t\t\tinit: false,\n\n\t\t\trules: [createRuleFromSchema('remember', schemas.rememberMe)],\n\n\t\t},\n\n\t},\n\n\tdomain: loginDomain,\n\n});\n\n\n// <REVIEW>\u0441\u044d\u043c\u043f\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 /src/Model/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435}/state.ts</REVIEW>\nsample({\n\n\tclock: form.formValidated,\n\n\ttarget: mutation.start,\n\n});\n\n\n// <REVIEW>\u0441\u044d\u043c\u043f\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 /src/Model/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435}/state.ts</REVIEW>\nsample({\n\n\tclock: mutation.finished.success,\n\n\tfn: ({ result }) => result.data.user,\n\n\ttarget: sessionModel.query.start,\n\n});\n\n\n// <REVIEW>splitMap \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 /src/Model/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435}/state.ts</REVIEW>\nconst errors = splitMap({\n\n\tsource: mutation.finished.failure,\n\n\tcases: {\n\n\t\tincorrectPassword: ({ error }) => {\n\n\t\t\tif (isHttpErrorCode(error, 403)) {\n\n\t\t\t\treturn 'incorrect_password';\n\n\t\t\t}\n\n\t\t},\n\n\n\t\tuserNotFound: ({ error }) => {\n\n\t\t\tif (isHttpErrorCode(error, 404)) {\n\n\t\t\t\treturn 'not_found';\n\n\t\t\t}\n\n\t\t},\n\n\t},\n\n});\n\n\n// <REVIEW>\u0441\u044d\u043c\u043f\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 /src/Model/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435}/state.ts</REVIEW>\nsample({\n\n\tclock: errors.userNotFound,\n\n\tfn: (message) => ({\n\n\t\trule: 'server',\n\n\t\terrorText: message,\n\n\t}),\n\n\ttarget: form.fields.email.addError,\n\n});\n\n\n// <REVIEW>\u0441\u044d\u043c\u043f\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 /src/Model/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435}/state.ts</REVIEW>\nsample({\n\n\tclock: errors.incorrectPassword,\n\n\tfn: (message) => ({\n\n\t\trule: 'server',\n\n\t\terrorText: message,\n\n\t}),\n\n\ttarget: form.fields.password.addError,\n\n});\n"}