{"start_line": 0, "code": "import { cache, createQuery, update } from '@farfetched/core';\n\nimport { runtypeContract } from '@farfetched/runtypes';\n\nimport { RouteQuery, querySync } from 'atomic-router';\n\nimport { createDomain, sample } from 'effector';\n\n\nimport { dragTaskModel } from '@/widgets/tasks';\n\n\nimport {\n\n\tcreateTaskModel,\n\n\tremoveTaskModel,\n\n\ttasksFiltersModel,\n\n\tupdateTaskModel\n\n} from '@/features/tasks';\n\n\nimport { progressesModel } from '@/entities/progresses';\n\nimport { roomModel, roomsModel } from '@/entities/rooms';\n\nimport { tagsModel } from '@/entities/tags';\n\nimport { tasksInRoomModel } from '@/entities/tasks';\n\nimport { usersInRoomModel } from '@/entities/users';\n\n\nimport {\n\n\tActivity,\n\n\tUpdateTaskParams,\n\n\tactivitiesApi,\n\n\tactivity\n\n} from '@/shared/api';\n\nimport { controls, getParams, routes } from '@/shared/configs';\n\nimport { dataExtractor } from '@/shared/lib';\n\nimport { sessionModel } from '@/shared/models';\n\nimport {\n\n\tInRoomParams,\n\n\tStandardResponse,\n\n\tPaginationResponse,\n\n\tgetStandardResponse,\n\n\tgetPaginationResponse\n\n} from '@/shared/types';\n\n\nexport const currentRoute = routes.room.tasks;\n\nexport const authorizedRoute = sessionModel.chainAuthorized(currentRoute, {\n\n\totherwise: routes.login.open,\n\n});\n\nconst { formValidated, reset, fields, } = tasksFiltersModel.form;\n\n\nconst activitiesDomain = createDomain();\n\nconst handlerFx = activitiesDomain.effect<\n\n\tInRoomParams,\n\n\tStandardResponse<PaginationResponse<Activity>>\n\n>(({ roomId, }) =>\n\n\tactivitiesApi.getAll({ roomId, count: 6, by: 'createdAt', type: 'desc', })\n\n);\n\nconst $roomId = authorizedRoute.$params.map((params) => params.id);\n\n\nexport const query = createQuery<\n\n\tInRoomParams,\n\n\tStandardResponse<PaginationResponse<Activity>>,\n\n\tError,\n\n\tStandardResponse<PaginationResponse<Activity>>,\n\n\tPaginationResponse<Activity>\n\n>({\n\n\tinitialData: { items: [], totalCount: 0, limit: 5, },\n\n\teffect: handlerFx,\n\n\tcontract: runtypeContract(\n\n\t\tgetStandardResponse(getPaginationResponse(activity))\n\n\t),\n\n\tmapData: dataExtractor,\n\n});\n\n\nconst queries = [\n\n\ttasksInRoomModel.query,\n\n\ttagsModel.query,\n\n\troomsModel.query,\n\n\tusersInRoomModel.query,\n\n\tprogressesModel.query,\n\n\tquery\n\n];\n\n\nconst mapQuery = (query: RouteQuery) => <BODY mapQuery>;\n\n\ncache(query);\n\n\nsample({\n\n\tclock: [$roomId, authorizedRoute.opened],\n\n\tsource: { query: authorizedRoute.$query, roomId: $roomId, },\n\n\tfn: ({ query, roomId, }) => ({\n\n\t\troomId: roomId as number,\n\n\t\t...mapQuery(query),\n\n\t}),\n\n\ttarget: queries.map((query) => query.start).concat(roomModel.query.start),\n\n});\n\n\nquerySync({\n\n\tcontrols,\n\n\tsource: {\n\n\t\t[getParams.userId]: fields.authorIds.$value,\n\n\t\t[getParams.tagId]: fields.tagIds.$value,\n\n\t\t[getParams.after]: fields.after.$value,\n\n\t\t[getParams.before]: fields.before.$value,\n\n\t},\n\n\tclock: [formValidated, reset],\n\n\troute: authorizedRoute,\n\n});\n\n\nsample({\n\n\tclock: [formValidated, reset],\n\n\tsource: authorizedRoute.$params,\n\n\tfilter: authorizedRoute.$isOpened,\n\n\tfn: ({ id, }, values) => ({ roomId: id, ...values, }),\n\n\ttarget: tasksInRoomModel.query.start,\n\n});\n\n\nsample({\n\n\tclock: authorizedRoute.closed,\n\n\ttarget: queries.map((query) => query.reset).concat(reset),\n\n});\n\n\nsample({\n\n\tclock: dragTaskModel.dropped,\n\n\tsource: { id: dragTaskModel.$id, roomId: $roomId, },\n\n\tfn: ({ id, roomId, }, evt) => {\n\n\t\tconst { status, } = evt.currentTarget.dataset;\n\n\t\treturn {\n\n\t\t\tid,\n\n\t\t\troomId,\n\n\t\t\tstatus,\n\n\t\t} as UpdateTaskParams;\n\n\t},\n\n\ttarget: updateTaskModel.mutation.start,\n\n});\n\n\nconst queriesForUpdate = [progressesModel.query, query];\n\n\n[\n\n\tupdateTaskModel.mutation,\n\n\tremoveTaskModel.mutation,\n\n\tcreateTaskModel.mutation\n\n].forEach((mutation) => {\n\n\tqueriesForUpdate.forEach((query) => {\n\n\t\tupdate(query, {\n\n\t\t\ton: mutation,\n\n\t\t\tby: {\n\n\t\t\t\tsuccess: ({ query, }) => {\n\n\t\t\t\t\tif (!query) {\n\n\t\t\t\t\t\treturn {\n\n\t\t\t\t\t\t\tresult: { items: [], totalCount: 0, limit: 50, },\n\n\t\t\t\t\t\t\trefetch: true,\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ('error' in query) {\n\n\t\t\t\t\t\treturn {\n\n\t\t\t\t\t\t\terror: query.error,\n\n\t\t\t\t\t\t\trefetch: true,\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn {\n\n\t\t\t\t\t\tresult: query.result,\n\n\t\t\t\t\t\trefetch: true,\n\n\t\t\t\t\t};\n\n\t\t\t\t},\n\n\t\t\t},\n\n\t\t});\n\n\t});\n\n});\n"}