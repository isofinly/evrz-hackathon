{"start_line": 17, "code": "Tasks: React.FC<CommonProps> = (props) => {\n\tconst { className, } = props;\n\tconst { t, } = useTranslation('tasks');\n\tconst roomId = useParam(routes.room.tasks, 'id');\n\tconst tasks = useUnit({\n\t\tloaded: tasksInRoomModel.loaded.$flag,\n\t\terror: tasksInRoomModel.query.$error,\n\t\tstart: tasksInRoomModel.query.start,\n\t});\n\tconst columns = useUnit(tasksInRoomModel.$tasksColumns);\n\n\tconst isLoading = !tasks.loaded;\n\tconst isError = !!tasks.error;\n\n\tif (isError) {\n\t\tconst onRetry = () => {\n\t\t\ttasks.start({ roomId, });\n\t\t};\n\n\t\tconst text = t('actions.retry_tasks.text');\n\t\tconst actionText = t('actions.retry', { ns: 'common', });\n\n\t\treturn (\n\t\t\t<TextWithAction\n\t\t\t\tclassName={className}\n\t\t\t\tactionText={actionText}\n\t\t\t\ttext={text}\n\t\t\t\tonClick={onRetry}\n\t\t\t\ticon={<ReplayIcon />}\n\t\t\t/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Scrollable\n\t\t\tclassName={cn(styles.wrapper, className)}\n\t\t\tdirection='horizontal'>\n\t\t\t{columns.map(({ status, tasks, hasActions, }) => (\n\t\t\t\t<TaskColumn\n\t\t\t\t\ttasks={tasks}\n\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\tcolumnStatus={status}\n\t\t\t\t\theader={t(`statuses.${status}`)}\n\t\t\t\t\thasActions={hasActions}\n\t\t\t\t\tkey={status}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</Scrollable>\n\t);\n}"}