{"start_line": 0, "code": "import { querySync } from 'atomic-router';\n\nimport { createEvent, sample } from 'effector';\n\n\nimport { activitiesFiltersModel } from '@/features/activities';\n\n\nimport {\n\n\tactivitiesInRoomModel,\n\n\tactivityActionsModel,\n\n\tactivitySpheresModel\n\n} from '@/entities/activities';\n\nimport { roomModel, roomsModel } from '@/entities/rooms';\n\nimport { usersInRoomModel } from '@/entities/users';\n\n\nimport { GetActivitiesInRoomParams } from '@/shared/api';\n\nimport { controls, getParams, routes } from '@/shared/configs';\n\nimport { createQueryModel } from '@/shared/lib';\n\nimport { sessionModel } from '@/shared/models';\n\n\nexport const currentRoute = routes.room.activities;\n\nexport const authorizedRoute = sessionModel.chainAuthorized(currentRoute, {\n\n\totherwise: routes.login.open,\n\n});\n\n\nconst $roomId = authorizedRoute.$params.map((params) => params.id);\n\n\nexport const page = createQueryModel<string>({\n\n\tname: getParams.page,\n\n\tdefaultValue: '1',\n\n\troute: authorizedRoute,\n\n});\n\n\nconst { fields, formValidated, reset, $values, } = activitiesFiltersModel.form;\n\n\nconst formApplied = createEvent<void>();\n\n\nconst queries = [\n\n\tactivitiesInRoomModel.query,\n\n\tusersInRoomModel.query,\n\n\troomsModel.query,\n\n\tactivityActionsModel.query,\n\n\tactivitySpheresModel.query\n\n];\n\nconst sorting = {\n\n\tby: 'createdAt',\n\n\ttype: 'desc',\n\n} as const;\n\n\nsample({\n\n\tclock: [formValidated, reset],\n\n\ttarget: formApplied,\n\n});\n\n\nsample({\n\n\tclock: formApplied,\n\n\ttarget: page.reset,\n\n});\n\n\nsample({\n\n\tclock: [formApplied, page.$value],\n\n\tsource: {\n\n\t\troomId: $roomId,\n\n\t\tpage: page.$value,\n\n\t\tvalues: $values,\n\n\t},\n\n\tfn: ({ roomId, values, page, }): GetActivitiesInRoomParams => {\n\n\t\treturn {\n\n\t\t\troomId,\n\n\t\t\t...sorting,\n\n\t\t\t...values,\n\n\t\t\tpage: page ? Number(page) : 1,\n\n\t\t};\n\n\t},\n\n\ttarget: activitiesInRoomModel.query.start,\n\n});\n\n\nsample({\n\n\tclock: authorizedRoute.opened,\n\n\tfn: ({ params, query, }): GetActivitiesInRoomParams => ({\n\n\t\troomId: params.id,\n\n\t\tactivistIds: query[getParams.userId],\n\n\t\tactionIds: query[getParams.actionId],\n\n\t\tafter: query[getParams.after],\n\n\t\tbefore: query[getParams.before],\n\n\t\tsphereIds: query[getParams.sphereId],\n\n\t\tcount: query[getParams.count],\n\n\t\tpage: query[getParams.page],\n\n\t\t...sorting,\n\n\t}),\n\n\ttarget: queries.map((query) => query.start).concat(roomModel.query.start),\n\n});\n\n\nsample({\n\n\tclock: authorizedRoute.closed,\n\n\ttarget: reset,\n\n});\n\n\nsample({\n\n\tclock: authorizedRoute.closed,\n\n\ttarget: queries.map((query) => query.reset),\n\n});\n\n\nquerySync({\n\n\tcontrols,\n\n\tsource: {\n\n\t\t[getParams.userId]: fields.activistIds.$value,\n\n\t\t[getParams.actionId]: fields.actionIds.$value,\n\n\t\t[getParams.after]: fields.after.$value,\n\n\t\t[getParams.before]: fields.before.$value,\n\n\t\t[getParams.sphereId]: fields.sphereIds.$value,\n\n\t},\n\n\tclock: formApplied,\n\n\troute: authorizedRoute,\n\n});\n"}