{"start_line": 0, "code": "import { createEvent, sample } from 'effector';\n\nimport { CreateSnackbarOptions } from 'effector-mui-snacks';\n\nimport { delay, splitMap } from 'patronum';\n\n\nimport { activateAccountModel } from '@/features/auth';\n\n\nimport { ActivateParams } from '@/shared/api';\n\nimport { i18n, routes } from '@/shared/configs';\n\nimport { chainInternalRoute, isHttpErrorCode } from '@/shared/lib';\n\nimport { notificationsModel, sessionModel } from '@/shared/models';\n\n\nexport const currentRoute = routes.registration.activate;\n\nexport const anonymousRoute = sessionModel.chainAnonymous(currentRoute, {\n\n\totherwise: routes.rooms.base.open,\n\n});\n\nexport const hiddenRoute = chainInternalRoute(anonymousRoute, {\n\n\totherwise: routes.login.open,\n\n\tisInternal: anonymousRoute.$query.map((query) => Boolean(query.token)),\n\n});\n\nconst tryActivate = createEvent<ActivateParams>();\n\n\nsample({\n\n\tclock: hiddenRoute.closed,\n\n\ttarget: activateAccountModel.query.reset,\n\n});\n\n\nsample({\n\n\tclock: hiddenRoute.opened,\n\n\tfn: ({ query, }) => query as ActivateParams,\n\n\ttarget: tryActivate,\n\n});\n\n\ndelay({\n\n\tsource: tryActivate,\n\n\ttimeout: 500,\n\n\ttarget: activateAccountModel.query.start,\n\n});\n\n\nconst { userError, serverError, } = splitMap({\n\n\tsource: activateAccountModel.query.finished.failure,\n\n\tcases: {\n\n\t\tuserError: ({ error, }) => {\n\n\t\t\tif (isHttpErrorCode(error, 409)) {\n\n\t\t\t\treturn 'already_activated';\n\n\t\t\t}\n\n\t\t},\n\n\t\tserverError: ({ error, }) => {\n\n\t\t\treturn isHttpErrorCode(error, 500) ? 'server_error' : undefined;\n\n\t\t},\n\n\t},\n\n});\n\n\nsample({\n\n\tclock: userError,\n\n\tfilter: hiddenRoute.$isOpened,\n\n\tfn: (error) =>\n\n\t\t({\n\n\t\t\tmessage: i18n.t(`errors.${error}`, { ns: 'activate', }),\n\n\t\t\tcolor: 'error',\n\n\t\t} as CreateSnackbarOptions),\n\n\ttarget: notificationsModel.create,\n\n});\n\n\nsample({\n\n\tclock: serverError,\n\n\tfilter: hiddenRoute.$isOpened,\n\n\tfn: () =>\n\n\t\t({\n\n\t\t\tmessage: i18n.t('errors.default', { ns: 'common', }),\n\n\t\t\tcolor: 'error',\n\n\t\t} as CreateSnackbarOptions),\n\n\ttarget: notificationsModel.create,\n\n});\n"}