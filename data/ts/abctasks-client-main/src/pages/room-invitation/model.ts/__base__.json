{"start_line": 0, "code": "import { sample } from 'effector';\n\n\nimport {\n\n\tapproveInvitationModel,\n\n\trejectInvitationModel\n\n} from '@/features/invitation';\n\n\nimport { invitationViaTokenModel } from '@/entities/invitations';\n\n\nimport { routes } from '@/shared/configs';\n\nimport { chainInternalRoute } from '@/shared/lib';\n\nimport { sessionModel } from '@/shared/models';\n\n\nexport const currentRoute = routes.rooms.invite;\n\nexport const authorizedRoute = sessionModel.chainAuthorized(currentRoute, {\n\n\totherwise: routes.login.open,\n\n});\n\n\nexport const hiddenRoute = chainInternalRoute(authorizedRoute, {\n\n\totherwise: routes.rooms.base.open,\n\n\tisInternal: authorizedRoute.$query.map((query) => Boolean(query.token)),\n\n});\n\n\nsample({\n\n\tclock: hiddenRoute.opened,\n\n\tfn: ({ query, }) => {\n\n\t\treturn { token: query.token, };\n\n\t},\n\n\ttarget: invitationViaTokenModel.query.start,\n\n});\n\n\nsample({\n\n\tclock: hiddenRoute.closed,\n\n\ttarget: invitationViaTokenModel.query.reset,\n\n});\n\n\nsample({\n\n\tclock: invitationViaTokenModel.query.finished.failure,\n\n\ttarget: routes.rooms.base.open,\n\n});\n\n\nsample({\n\n\tclock: [approveInvitationModel.mutation.finished.success],\n\n\tsource: invitationViaTokenModel.query.$data,\n\n\tfilter: Boolean,\n\n\tfn: (invitation) => ({ id: invitation.room.id, }),\n\n\ttarget: routes.room.tasks.open,\n\n});\n\n\nsample({\n\n\tclock: [rejectInvitationModel.mutation.finished.success],\n\n\tsource: invitationViaTokenModel.query.$data,\n\n\tfilter: Boolean,\n\n\ttarget: routes.rooms.base.open,\n\n});\n"}