createPopupControlModel = (
	params: CreatePopupControlModelParams
) => {
	const { name, sync = true } = params;

	// <REVIEW>хранение состояние в переменной должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	const $isOpen = createStore<boolean>(false);
	// <REVIEW>событие должно происходить в хранилище по пути /src/Model/{название}/events/event.ts</REVIEW>
	const close = createEvent();
	// <REVIEW>событие должно происходить в хранилище по пути /src/Model/{название}/events/event.ts</REVIEW>
	const opened = createEvent();
	// <REVIEW>событие должно происходить в хранилище по пути /src/Model/{название}/events/event.ts</REVIEW>
	const open = createEvent();
	// <REVIEW>событие должно происходить в хранилище по пути /src/Model/{название}/events/event.ts</REVIEW>
	const closed = createEvent();

	const openPopup = sync ? popupsModel.openSynced : popupsModel.open;
	const closePopup = sync ? popupsModel.closeSynced : popupsModel.close;

	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: open,
		fn: () => name,
		target: openPopup,
	});

	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: close,
		fn: () => name,
		target: closePopup,
	});

	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: popupsModel.$popups,
		fn: (popups) => popups.includes(name),
		target: $isOpen,
	});

	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: $isOpen,
		filter: Boolean,
		target: opened,
	});

	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: not($isOpen),
		filter: Boolean,
		target: closed,
	});

	const unitShape = {
		close,
		opened,
		open,
		closed,
		isOpen: $isOpen,
	};

	return {
		$isOpen,
		close,
		opened,
		open,
		closed,
		'@@unitShape': () => unitShape,
	};
}