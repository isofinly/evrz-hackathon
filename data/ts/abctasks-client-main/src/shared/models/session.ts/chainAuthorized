chainAuthorized = <Params extends RouteParams>(
	route: RouteInstance<Params>,
	options?: ChainedParams
): RouteInstance<Params> => {
	const sessionCheckStarted = createEvent<RouteParamsAndQuery<Params>>();
	const alreadyAnonymous = createEvent();
	const alreadyAuthorized = createEvent();
	const sessionCheckSuccessful = createEvent();
	const sessionCheckFailure = createEvent();

	const $paramsAndQuery = combine({
		params: route.$params,
		query: route.$query,
	});
	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: sessionCheckStarted,
		filter: equals($status, 'initial'),
		target: query.start,
	});
	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: sessionCheckStarted,
		source: $paramsAndQuery,
		filter: equals($status, 'anonymous'),
		target: alreadyAnonymous,
	});
	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: sessionCheckStarted,
		source: $paramsAndQuery,
		filter: equals($status, 'authorized'),
		target: alreadyAuthorized,
	});
	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: [alreadyAnonymous, query.finished.failure],
		source: $paramsAndQuery,
		filter: route.$isOpened,
		target: sessionCheckFailure,
	});
	// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
	sample({
		clock: [alreadyAuthorized, query.finished.success],
		source: $paramsAndQuery,
		filter: route.$isOpened,
		target: sessionCheckSuccessful,
	});

	if (options?.otherwise) {
		// <REVIEW>сэмплирование должно происходить в хранилище по пути /src/Model/{название}/state.ts</REVIEW>
		sample({
			clock: sessionCheckFailure,
			target: options.otherwise as Event<any>,
		});
	}

	return chainRoute({
		route,
		beforeOpen: sessionCheckStarted,
		openOn: sessionCheckSuccessful,
		cancelOn: sessionCheckFailure,
	});
}