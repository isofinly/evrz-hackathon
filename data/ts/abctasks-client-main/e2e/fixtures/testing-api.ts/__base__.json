{"start_line": 0, "code": "import { BrowserContext, test as base } from '@playwright/test';\n\n\nexport interface UserParams <BODY UserParams>\n\nexport interface User <BODY User>\n\nexport interface LoginParams extends UserParams <BODY LoginParams>\n\nexport interface Tokens <BODY Tokens>\n\nexport interface Login <BODY Login>\n\nexport interface MemberParams <BODY MemberParams>\n\nexport interface Member <BODY Member>\n\nexport interface RoomParams <BODY RoomParams>\n\nexport interface Room <BODY Room>\n\nexport interface TagParams <BODY TagParams>\n\nexport interface Tag <BODY Tag>\n\nexport interface TaskParams <BODY TaskParams>\n\nexport interface Task <BODY Task>\n\nexport interface InvitationParams <BODY InvitationParams>\n\nexport interface Invitation <BODY Invitation>\n\nexport interface ActivityParams <BODY ActivityParams>\n\ninterface ActivitySphere <BODY ActivitySphere>\n\ninterface ActivityAction <BODY ActivityAction>\n\nexport interface Activity <BODY Activity>\n\nexport interface TestingApiFixture <BODY TestingApiFixture>\n\nconst buildUrl = (endpoint: string): string => <BODY buildUrl>;\n\n\nconst createRequest = <Func extends (ctx: BrowserContext, data: any) => any>(\n\n\tctx: BrowserContext,\n\n\tfunc: Func\n\n) => <BODY createRequest>;\n\n\nconst request = async <T>(\n\n\tctx: BrowserContext,\n\n\tendpoint: string,\n\n\tinit: Parameters<BrowserContext['request']['fetch']>[1] = {}\n\n): Promise<T> => <BODY request>;\n\n\nconst user = async (\n\n\tctx: BrowserContext,\n\n\tdata: UserParams = {}\n\n): Promise<User> => <BODY user>;\n\n\nconst removeUser = async (\n\n\tctx: BrowserContext,\n\n\tdata: UserParams = {}\n\n): Promise<boolean> => <BODY removeUser>;\n\n\nconst auth = async (\n\n\tctx: BrowserContext,\n\n\tdata: UserParams = {}\n\n): Promise<Login> => <BODY auth>;\n\n\nconst activateAccountLink = async (\n\n\tctx: BrowserContext,\n\n\tdata: UserParams = {}\n\n): Promise<string> => <BODY activateAccountLink>;\n\n\nconst logout = async (ctx: BrowserContext): Promise<boolean> => <BODY logout>;\n\n\nconst room = async (\n\n\tctx: BrowserContext,\n\n\tdata: RoomParams = {}\n\n): Promise<Room> => <BODY room>;\n\n\nconst removeRoom = async (\n\n\tctx: BrowserContext,\n\n\tdata: RoomParams = {}\n\n): Promise<boolean> => <BODY removeRoom>;\n\n\nconst member = async (\n\n\tctx: BrowserContext,\n\n\tdata: MemberParams = {}\n\n): Promise<Member> => <BODY member>;\n\n\nconst removeMember = async (\n\n\tctx: BrowserContext,\n\n\tdata: MemberParams = {}\n\n): Promise<boolean> => <BODY removeMember>;\n\n\nconst tag = async (ctx: BrowserContext, data: TagParams = {}): Promise<Tag> => <BODY tag>;\n\n\nconst removeTag = async (\n\n\tctx: BrowserContext,\n\n\tdata: TagParams = {}\n\n): Promise<boolean> => <BODY removeTag>;\n\n\nconst task = async (\n\n\tctx: BrowserContext,\n\n\tdata: TaskParams = {}\n\n): Promise<Task> => <BODY task>;\n\n\nconst removeTask = async (\n\n\tctx: BrowserContext,\n\n\tdata: TaskParams = {}\n\n): Promise<boolean> => <BODY removeTask>;\n\n\nconst invitation = async (\n\n\tctx: BrowserContext,\n\n\tdata: InvitationParams = {}\n\n): Promise<Invitation> => <BODY invitation>;\n\n\nconst removeInvitation = async (\n\n\tctx: BrowserContext,\n\n\tdata: InvitationParams = {}\n\n): Promise<boolean> => <BODY removeInvitation>;\n\n\nconst invitationLink = async (\n\n\tctx: BrowserContext,\n\n\tdata: InvitationParams = {}\n\n): Promise<string> => <BODY invitationLink>;\n\n\nconst activity = async (\n\n\tctx: BrowserContext,\n\n\tdata: ActivityParams = {}\n\n): Promise<Activity> => <BODY activity>;\n\n\nconst removeActivity = async (\n\n\tctx: BrowserContext,\n\n\tdata: ActivityParams = {}\n\n): Promise<boolean> => <BODY removeActivity>;\n\n\nexport const test = base.extend<TestingApiFixture>({\n\n\tuser: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, user));\n\n\t},\n\n\tremoveUser: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, removeUser));\n\n\t},\n\n\tauth: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, auth));\n\n\t},\n\n\tactivateAccountLink: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, activateAccountLink));\n\n\t},\n\n\tlogout: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, logout));\n\n\t},\n\n\troom: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, room));\n\n\t},\n\n\tremoveRoom: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, removeRoom));\n\n\t},\n\n\tmember: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, member));\n\n\t},\n\n\tremoveMember: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, removeMember));\n\n\t},\n\n\ttag: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, tag));\n\n\t},\n\n\tremoveTag: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, removeTag));\n\n\t},\n\n\ttask: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, task));\n\n\t},\n\n\tremoveTask: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, removeTask));\n\n\t},\n\n\tinvitation: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, invitation));\n\n\t},\n\n\tremoveInvitation: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, removeInvitation));\n\n\t},\n\n\tinvitationLink: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, invitationLink));\n\n\t},\n\n\tactivity: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, activity));\n\n\t},\n\n\tremoveActivity: async ({ context }, use) => {\n\n\t\tawait use(createRequest(context, removeActivity));\n\n\t},\n\n});\n"}