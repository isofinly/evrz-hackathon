{"start_line": 0, "code": "import { faker } from '@faker-js/faker';\n\nimport { Locator, Page, expect } from '@playwright/test';\n\nimport { expectAlert } from './utils';\n\nimport { Room, User, test } from './fixtures';\n\n\nconst getFormControls = (locator: Locator | Page, buttonText: string) => <BODY getFormControls>;\n\n\ninterface GetListItemParams <BODY GetListItemParams>\n\nconst getListItem = (params: GetListItemParams) => <BODY getListItem>;\n\n\ninterface ExpectListItemParams extends GetListItemParams <BODY ExpectListItemParams>\n\nconst expectListItem = async (params: ExpectListItemParams) => <BODY expectListItem>;\n\n\nconst data = {\n\n\tname: faker.lorem.words({ min: 1, max: 3 }),\n\n\tprimaryColor: '#000000',\n\n\tsecondaryColor: '#ffffff',\n\n};\n\n\ntest.describe('tags page(online)', () => {\n\n\tlet user: User;\n\n\tlet room: Room;\n\n\n\ttest.beforeEach(async ({ auth, room: getRoom, page }) => {\n\n\t\tconst data = await auth({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t});\n\n\n\t\tuser = data.user;\n\n\n\t\troom = await getRoom({\n\n\t\t\townerId: user.id,\n\n\t\t});\n\n\n\t\tawait page.goto(`/rooms/${room.id}/tags`);\n\n\t});\n\n\n\ttest('has correct view', async ({ page }) => {\n\n\t\tawait expect(page).toHaveScreenshot();\n\n\t});\n\n\n\ttest('has right title', async ({ page }) => {\n\n\t\tawait expect(page).toHaveTitle(/Tags/);\n\n\t});\n\n\n\ttest('can create tag', async ({ page, removeTag }) => {\n\n\t\tawait removeTag({\n\n\t\t\tname: data.name,\n\n\t\t});\n\n\n\t\tconst create = page.getByRole('button', {\n\n\t\t\tname: 'Create tag',\n\n\t\t\texact: true,\n\n\t\t});\n\n\n\t\tawait create.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst heading = dialog.getByRole('heading', { name: 'Create tag' });\n\n\t\tawait expect(heading).toBeVisible();\n\n\t\tconst form = dialog.locator('form');\n\n\t\tawait expect(form).toBeVisible();\n\n\t\tconst controls = getFormControls(form, 'Create');\n\n\n\t\tawait controls.name.fill(data.name);\n\n\t\tawait controls.primaryColor.fill(data.primaryColor);\n\n\t\tawait controls.secondaryColor.fill(data.secondaryColor);\n\n\t\tawait controls.button.click();\n\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Tag was created successfully',\n\n\t\t});\n\n\t\tawait expectListItem({\n\n\t\t\tparent: page,\n\n\t\t\tname: data.name,\n\n\t\t\tprimaryColor: 'rgb(0, 0, 0)',\n\n\t\t\tsecondaryColor: 'rgb(255, 255, 255)',\n\n\t\t});\n\n\t});\n\n\n\ttest('can change tag', async ({ page, tag }) => {\n\n\t\tconst created = await tag({\n\n\t\t\troom,\n\n\t\t\tmainColor: data.primaryColor,\n\n\t\t\tsecondColor: data.secondaryColor,\n\n\t\t});\n\n\n\t\tconst listItem = getListItem({\n\n\t\t\tparent: page,\n\n\t\t\tname: created.name,\n\n\t\t});\n\n\t\tawait expect(listItem).toBeVisible();\n\n\n\t\tconst open = listItem.getByRole('button', { name: 'Update tag' });\n\n\t\tawait expect(open).toBeVisible();\n\n\t\tawait open.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst form = dialog.locator('form');\n\n\t\tawait expect(form).toBeVisible();\n\n\t\tconst controls = getFormControls(form, 'Save');\n\n\t\tawait expect(controls.name).toHaveValue(created.name);\n\n\t\tawait expect(controls.primaryColor).toHaveValue(created.mainColor);\n\n\t\tawait expect(controls.secondaryColor).toHaveValue(created.secondColor);\n\n\t\tawait controls.name.fill('Some another name');\n\n\t\tawait controls.button.click();\n\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Tag was updated successfully',\n\n\t\t});\n\n\t\tawait expectListItem({\n\n\t\t\tparent: page,\n\n\t\t\tname: 'Some another name',\n\n\t\t\tprimaryColor: 'rgb(0, 0, 0)',\n\n\t\t\tsecondaryColor: 'rgb(255, 255, 255)',\n\n\t\t});\n\n\t});\n\n\n\ttest('can remove tag', async ({ page, tag }) => {\n\n\t\tconst created = await tag({\n\n\t\t\troom,\n\n\t\t\tmainColor: data.primaryColor,\n\n\t\t\tsecondColor: data.secondaryColor,\n\n\t\t});\n\n\n\t\tconst listItem = getListItem({\n\n\t\t\tparent: page,\n\n\t\t\tname: created.name,\n\n\t\t});\n\n\t\tawait expect(listItem).toBeVisible();\n\n\n\t\tconst open = listItem.getByRole('button', { name: 'Remove tag' });\n\n\t\tawait expect(open).toBeVisible();\n\n\t\tawait open.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\n\t\tconst cancel = dialog.getByRole('button', { name: 'Cancel' });\n\n\t\tawait cancel.click();\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expect(listItem).toBeVisible();\n\n\n\t\tawait open.click();\n\n\n\t\tconst remove = dialog.getByRole('button', { name: 'Remove' });\n\n\t\tawait remove.click();\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expect(listItem).toBeHidden();\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Tag was removed successfully',\n\n\t\t});\n\n\t});\n\n});\n"}