{"start_line": 0, "code": "import { faker } from '@faker-js/faker';\n\nimport { expect } from '@playwright/test';\n\nimport { Room, User, test } from './fixtures';\n\n\ntest.describe('activities page(online)', () => {\n\n\tconst iterator = new Array(100).fill(true);\n\n\n\tlet user: User;\n\n\tlet room: Room;\n\n\n\ttest.beforeEach(async ({ auth, room: getRoom, activity, page }) => {\n\n\t\tconst data = await auth({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t});\n\n\n\t\tuser = data.user;\n\n\n\t\troom = await getRoom({\n\n\t\t\townerId: user.id,\n\n\t\t});\n\n\n\t\tawait Promise.all(\n\n\t\t\titerator.map((_, index) => {\n\n\t\t\t\tconst moreThanHalf = index >= 50;\n\n\t\t\t\tconst action = moreThanHalf ? 'update' : 'create';\n\n\n\t\t\t\treturn activity({ room, activist: user, action });\n\n\t\t\t})\n\n\t\t);\n\n\n\t\tawait page.goto(`/rooms/${room.id}/activities`);\n\n\t});\n\n\n\ttest('has correct view', async ({ page }) => {\n\n\t\tawait expect(page).toHaveScreenshot();\n\n\t});\n\n\n\ttest('has right title', async ({ page }) => {\n\n\t\tawait expect(page).toHaveTitle(/Activities/);\n\n\t});\n\n\n\ttest('has been navigated to first page by default', async ({ page }) => {\n\n\t\tawait expect(\n\n\t\t\tpage.getByRole('link', { name: 'page 1', exact: true })\n\n\t\t).toBeVisible();\n\n\t});\n\n\n\ttest('can navigate to another page', async ({ page }) => {\n\n\t\tconst link = page.getByRole('link', { name: 'Go to page 2', exact: true });\n\n\t\tawait link.click();\n\n\n\t\tawait expect(page).toHaveURL(/p=2/);\n\n\t\tawait expect(\n\n\t\t\tpage.getByRole('link', { name: 'page 2', exact: true })\n\n\t\t).toBeVisible();\n\n\t});\n\n\n\ttest('can filter activities', async ({ page }) => {\n\n\t\tconst filterButton = page.getByRole('button', {\n\n\t\t\tname: 'Activities filters',\n\n\t\t});\n\n\t\tawait filterButton.click();\n\n\n\t\tconst form = page.getByRole('form', {\n\n\t\t\tname: 'Activities filters',\n\n\t\t\texact: true,\n\n\t\t});\n\n\t\tawait expect(form).toBeVisible();\n\n\t\tconst action = form.getByLabel('Action');\n\n\t\tawait action.fill('create');\n\n\t\tawait page.getByRole('option').click();\n\n\t\tconst apply = form.getByRole('button', { name: 'Apply', exact: true });\n\n\t\tawait apply.click();\n\n\n\t\tawait expect(page).toHaveURL(/action=1/);\n\n\t\tawait expect(\n\n\t\t\tpage.getByRole('link', { name: 'Go to page 2', exact: true })\n\n\t\t).toBeHidden();\n\n\t\tawait expect(page.getByText('updated')).toBeHidden();\n\n\n\t\tawait filterButton.click();\n\n\t\tconst sphere = form.getByLabel('Sphere');\n\n\t\tawait sphere.fill('tag');\n\n\t\tawait page.getByRole('option').click();\n\n\t\tawait apply.click();\n\n\t\t370;\n\n\n\t\tawait expect(page).toHaveURL(/action=1&sphere=2/);\n\n\t\tawait expect(page.getByRole('list')).toBeHidden();\n\n\n\t\tawait filterButton.click();\n\n\t\tawait form.getByRole('button', { name: 'Reset' }).click();\n\n\n\t\tawait expect(\n\n\t\t\tpage.getByRole('link', { name: 'Go to page 2', exact: true })\n\n\t\t).toBeVisible();\n\n\t\tawait expect(\n\n\t\t\tpage.getByRole('list').filter({ hasText: 'User' })\n\n\t\t).toBeVisible();\n\n\t});\n\n\n\ttest('add activities if there has been added new one', async ({\n\n\t\tpage,\n\n\t\tactivity,\n\n\t}) => {\n\n\t\tconst data = {\n\n\t\t\troom,\n\n\t\t\tactivist: user,\n\n\t\t\taction: 'remove',\n\n\t\t\tsphere: 'tag',\n\n\t\t\tcreatedAt: new Date(),\n\n\t\t};\n\n\n\t\tconst listitem = page.getByRole('listitem').filter({ hasText: 'removed' });\n\n\n\t\tawait expect(listitem).toBeHidden();\n\n\n\t\tawait activity(data);\n\n\n\t\tawait expect(listitem).toBeVisible();\n\n\t});\n\n});\n"}