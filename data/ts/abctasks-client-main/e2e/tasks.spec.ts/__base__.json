{"start_line": 0, "code": "import { faker } from '@faker-js/faker';\n\nimport { Locator, Page, expect } from '@playwright/test';\n\nimport {\n\n\tgetTagsLabels,\n\n\texpectActivityItem,\n\n\texpectAlert,\n\n\tgetMenuItemByName,\n\n} from './utils';\n\nimport { Room, Tag, User, test } from './fixtures';\n\n\nconst getColumn = (locator: Locator | Page, type: string) => <BODY getColumn>;\n\n\nconst getFormControls = (locator: Locator | Page, buttonText: string) => <BODY getFormControls>;\n\n\ninterface GetCardParams <BODY GetCardParams>\n\nconst getCard = (params: GetCardParams) => <BODY getCard>;\n\n\nconst data = {\n\n\ttitle: faker.lorem.words({ min: 1, max: 3 }),\n\n\tdescription: faker.lorem.words({ min: 4, max: 6 }),\n\n};\n\n\ntest.describe('tasks page(online)', () => {\n\n\tlet user: User;\n\n\tlet room: Room;\n\n\tlet tags: Tag[];\n\n\n\ttest.beforeEach(async ({ auth, room: getRoom, tag, page }) => {\n\n\t\tconst data = await auth({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t});\n\n\n\t\tuser = data.user;\n\n\n\t\troom = await getRoom({\n\n\t\t\townerId: user.id,\n\n\t\t});\n\n\n\t\ttags = await Promise.all([\n\n\t\t\ttag({\n\n\t\t\t\tname: faker.lorem.words({ min: 1, max: 3 }),\n\n\t\t\t\troom,\n\n\t\t\t}),\n\n\t\t\ttag({\n\n\t\t\t\tname: faker.lorem.words({ min: 1, max: 3 }),\n\n\t\t\t\troom,\n\n\t\t\t}),\n\n\t\t]);\n\n\n\t\tawait page.goto(`/rooms/${room.id}/tasks`);\n\n\t});\n\n\n\ttest('has correct view', async ({ page }) => {\n\n\t\tawait expect(page).toHaveScreenshot();\n\n\t});\n\n\n\ttest('has right title', async ({ page }) => {\n\n\t\tawait expect(page).toHaveTitle(/Tasks/);\n\n\t});\n\n\n\ttest('can create task with one tag', async ({ page }) => {\n\n\t\tconst column = getColumn(page, 'Ready');\n\n\n\t\tconst create = column.getByRole('button', {\n\n\t\t\tname: 'Create task',\n\n\t\t\texact: true,\n\n\t\t});\n\n\n\t\tawait create.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst form = dialog.locator('form');\n\n\t\tawait expect(form).toBeVisible();\n\n\t\tconst controls = getFormControls(form, 'Create');\n\n\n\t\tawait controls.title.fill(data.title);\n\n\t\tawait controls.description.fill(data.description);\n\n\t\tawait controls.tags.fill(getTagsLabels(tags)[0]);\n\n\t\tawait page.getByRole('option').click();\n\n\t\tawait controls.button.click();\n\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Task was created successfully',\n\n\t\t});\n\n\t\tawait expectActivityItem({\n\n\t\t\tcontent: `User ${user.username} has created the task`,\n\n\t\t\tparent: page,\n\n\t\t\ttype: 'success',\n\n\t\t});\n\n\t\tconst card = getCard({\n\n\t\t\tparent: page,\n\n\t\t\tdescription: data.description,\n\n\t\t\ttitle: data.title,\n\n\t\t\ttags: [getTagsLabels(tags)[0]],\n\n\t\t});\n\n\t\tawait expect(card).toBeVisible();\n\n\t});\n\n\n\ttest('can create task with several tags tag', async ({ page }) => {\n\n\t\tconst column = getColumn(page, 'Ready');\n\n\n\t\tconst create = column.getByRole('button', {\n\n\t\t\tname: 'Create task',\n\n\t\t\texact: true,\n\n\t\t});\n\n\t\tawait create.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst form = dialog.locator('form');\n\n\t\tawait expect(form).toBeVisible();\n\n\t\tconst controls = getFormControls(form, 'Create');\n\n\n\t\tawait controls.title.fill(data.title);\n\n\t\tawait controls.description.fill(data.description);\n\n\t\tawait controls.tags.fill(getTagsLabels(tags)[0]);\n\n\t\tawait page.getByRole('option').click();\n\n\t\tawait controls.tags.fill(getTagsLabels(tags)[1]);\n\n\t\tawait page.getByRole('option').click();\n\n\t\tawait controls.button.click();\n\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Task was created successfully',\n\n\t\t});\n\n\t\tawait expectActivityItem({\n\n\t\t\tcontent: `User ${user.username} has created the task`,\n\n\t\t\tparent: page,\n\n\t\t\ttype: 'success',\n\n\t\t});\n\n\t\tconst card = getCard({\n\n\t\t\tparent: page,\n\n\t\t\tdescription: data.description,\n\n\t\t\ttitle: data.title,\n\n\t\t\ttags: getTagsLabels(tags),\n\n\t\t});\n\n\t\tawait expect(card).toBeVisible();\n\n\t});\n\n\n\ttest('can not create task with done status', async ({ page }) => {\n\n\t\tconst column = getColumn(page, 'Done');\n\n\n\t\tawait expect(column).toBeVisible();\n\n\n\t\tconst create = column.getByRole('button', {\n\n\t\t\tname: 'Create task',\n\n\t\t\texact: true,\n\n\t\t});\n\n\n\t\tawait expect(create).toBeHidden();\n\n\t});\n\n\n\ttest('can change task via popup', async ({ page, task }) => {\n\n\t\tconst created = await task({\n\n\t\t\ttags,\n\n\t\t\troom,\n\n\t\t\tauthor: user,\n\n\t\t});\n\n\n\t\tconst newTitle = faker.lorem.words({ min: 1, max: 3 });\n\n\n\t\tconst card = getCard({\n\n\t\t\tparent: page,\n\n\t\t\tdescription: created.description,\n\n\t\t\ttags: getTagsLabels(created.tags),\n\n\t\t\ttitle: created.title,\n\n\t\t});\n\n\t\tawait expect(card).toBeVisible();\n\n\n\t\tconst openMenu = card.getByRole('button');\n\n\t\tawait expect(openMenu).toBeVisible();\n\n\t\tawait openMenu.click();\n\n\t\tconst menu = page.getByRole('menu');\n\n\t\tawait expect(menu).toBeVisible();\n\n\t\tconst menuItem = getMenuItemByName(menu, 'Update task');\n\n\t\tawait menuItem.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst form = dialog.locator('form');\n\n\t\tawait expect(form).toBeVisible();\n\n\t\tconst controls = getFormControls(form, 'Save');\n\n\t\t// const tagName = getTagsLabels(tags).join('|') + '\\\\+1';\n\n\t\tawait expect(controls.title).toHaveValue(created.title);\n\n\t\tawait expect(controls.description).toHaveValue(created.description);\n\n\t\tawait expect(controls.status).toContainText(created.status, {\n\n\t\t\tignoreCase: true,\n\n\t\t});\n\n\t\t/**\n\t\t * @todo\n\t\t */\n\t\t// await expect(controls.tags).toContainText(new RegExp(tagName));\n\n\t\tawait controls.title.fill(newTitle);\n\n\t\tawait controls.button.click();\n\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Task was updated successfully',\n\n\t\t});\n\n\t\tawait expectActivityItem({\n\n\t\t\tcontent: `User ${user.username} has updated the task`,\n\n\t\t\tparent: page,\n\n\t\t\ttype: 'warning',\n\n\t\t});\n\n\t\tconst updatedCard = getCard({\n\n\t\t\tparent: page,\n\n\t\t\tdescription: created.description,\n\n\t\t\ttags: getTagsLabels(created.tags),\n\n\t\t\ttitle: newTitle,\n\n\t\t});\n\n\t\tawait expect(updatedCard).toBeVisible();\n\n\t});\n\n\n\ttest('can change task status via dnd', async ({ page, task }) => {\n\n\t\tconst created = await task({\n\n\t\t\ttags,\n\n\t\t\troom,\n\n\t\t\tauthor: user,\n\n\t\t});\n\n\n\t\tconst card = getCard({\n\n\t\t\tparent: page,\n\n\t\t\tdescription: created.description,\n\n\t\t\ttags: getTagsLabels(created.tags),\n\n\t\t\ttitle: created.title,\n\n\t\t});\n\n\t\tawait expect(card).toBeVisible();\n\n\t\tconst targetColumn = getColumn(page, 'In progress');\n\n\t\tawait card.dragTo(targetColumn);\n\n\n\t\tawait expect(\n\n\t\t\tgetCard({\n\n\t\t\t\tparent: targetColumn,\n\n\t\t\t\tdescription: created.description,\n\n\t\t\t\ttags: getTagsLabels(created.tags),\n\n\t\t\t\ttitle: created.title,\n\n\t\t\t})\n\n\t\t).toBeVisible();\n\n\t\tawait expect(\n\n\t\t\tgetCard({\n\n\t\t\t\tparent: getColumn(page, 'Ready'),\n\n\t\t\t\tdescription: created.description,\n\n\t\t\t\ttags: getTagsLabels(created.tags),\n\n\t\t\t\ttitle: created.title,\n\n\t\t\t})\n\n\t\t).toBeHidden();\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Task was updated successfully',\n\n\t\t});\n\n\t\tawait expectActivityItem({\n\n\t\t\tcontent: `User ${user.username} has updated the task`,\n\n\t\t\tparent: page,\n\n\t\t\ttype: 'warning',\n\n\t\t});\n\n\t});\n\n\n\ttest('can remove task', async ({ page, task }) => {\n\n\t\tconst created = await task({\n\n\t\t\ttags,\n\n\t\t\troom,\n\n\t\t\tauthor: user,\n\n\t\t});\n\n\n\t\tconst card = getCard({\n\n\t\t\tparent: page,\n\n\t\t\tdescription: created.description,\n\n\t\t\ttags: getTagsLabels(created.tags),\n\n\t\t\ttitle: created.title,\n\n\t\t});\n\n\t\tawait expect(card).toBeVisible();\n\n\n\t\tconst openMenu = card.getByRole('button');\n\n\t\tawait expect(openMenu).toBeVisible();\n\n\t\tawait openMenu.click();\n\n\t\tconst menu = page.getByRole('menu');\n\n\t\tawait expect(menu).toBeVisible();\n\n\t\tconst menuItem = getMenuItemByName(menu, 'Remove task');\n\n\t\tawait menuItem.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst cancelButton = dialog.getByRole('button', { name: 'Cancel' });\n\n\t\tawait cancelButton.click();\n\n\t\tawait expect(dialog).toBeHidden();\n\n\n\t\tawait openMenu.click();\n\n\t\tawait menuItem.click();\n\n\t\tconst removeButton = dialog.getByRole('button', { name: 'Remove' });\n\n\t\tawait removeButton.click();\n\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expectAlert({\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Task was removed successfully',\n\n\t\t\ttype: 'success',\n\n\t\t});\n\n\t\tawait expectActivityItem({\n\n\t\t\tcontent: `User ${user.username} has removed the task`,\n\n\t\t\tparent: page,\n\n\t\t\ttype: 'error',\n\n\t\t});\n\n\t\tawait expect(card).toBeHidden();\n\n\t});\n\n\n\ttest('can go to last activities', async ({ page }) => {\n\n\t\tconst lastActivities = page.getByRole('region', {\n\n\t\t\tname: 'Last activities',\n\n\t\t});\n\n\t\tconst link = lastActivities.getByRole('link', {\n\n\t\t\tname: 'open all activities',\n\n\t\t});\n\n\n\t\tawait link.click();\n\n\n\t\tawait expect(page).toHaveURL(new RegExp(`/${room.id}/activities`));\n\n\t});\n\n\n\ttest.describe('tasks filtering', () => {});\n\n});\n"}