{"start_line": 0, "code": "import { Locator, Page, expect } from '@playwright/test';\n\nimport { expectAlert } from './utils';\n\nimport { Room, User, test } from './fixtures';\n\nimport { faker } from '@faker-js/faker';\n\n\ninterface GetUserItemParams <BODY GetUserItemParams>\n\nconst getUserItem = (params: GetUserItemParams) => <BODY getUserItem>;\n\n\ninterface GetInvitationParams <BODY GetInvitationParams>\n\nconst getInvitationItem = (params: GetInvitationParams) => <BODY getInvitationItem>;\n\n\ntest.describe('users page(online)', () => {\n\n\tlet owner: User;\n\n\tlet room: Room;\n\n\n\ttest.beforeEach(async ({ auth, room: getRoom, page }) => {\n\n\t\tconst data = await auth({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t});\n\n\n\t\towner = data.user;\n\n\n\t\troom = await getRoom({\n\n\t\t\townerId: owner.id,\n\n\t\t});\n\n\n\t\tawait page.goto(`/rooms/${room.id}/users`);\n\n\t});\n\n\n\ttest('has correct view', async ({ page }) => {\n\n\t\tawait expect(page).toHaveScreenshot();\n\n\t});\n\n\n\ttest('has right title', async ({ page }) => {\n\n\t\tawait expect(page).toHaveTitle(/Users/);\n\n\t});\n\n\n\ttest('can invite user', async ({ page, user: getUser }) => {\n\n\t\tconst user = await getUser({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t\tusername: faker.internet.userName(),\n\n\t\t});\n\n\n\t\tconst addUser = page.getByRole('button', { name: 'invite user' });\n\n\t\tawait addUser.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst form = dialog.locator('form');\n\n\t\tawait expect(form).toBeVisible();\n\n\n\t\tconst selectButton = form.getByRole('button', {\n\n\t\t\tname: 'select user above',\n\n\t\t});\n\n\t\tawait expect(selectButton).toBeVisible();\n\n\n\t\tconst input = form.getByLabel('username');\n\n\t\tawait input.fill(user.username.slice(0, 4));\n\n\t\tconst option = page.getByRole('option');\n\n\t\tawait option.click();\n\n\n\t\tconst selectedUser = getUserItem({ parent: form, username: user.username });\n\n\t\tawait expect(selectedUser).toBeVisible();\n\n\t\tawait expect(input).toBeHidden();\n\n\n\t\tconst removeSelection = form.getByRole('button', {\n\n\t\t\tname: `Unselect ${user.username}`,\n\n\t\t});\n\n\t\tawait removeSelection.click();\n\n\t\tawait expect(selectedUser).toBeHidden();\n\n\t\tawait expect(input).toBeVisible();\n\n\n\t\tawait input.fill(user.username.slice(0, 4));\n\n\t\tawait option.click();\n\n\n\t\tconst inviteUser = form.getByRole('button', {\n\n\t\t\tname: `invite ${user.username} to the room`,\n\n\t\t});\n\n\t\tawait inviteUser.click();\n\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Invitation was sent successfully',\n\n\t\t});\n\n\n\t\tconst invitation = getInvitationItem({\n\n\t\t\tparent: page,\n\n\t\t\tusername: user.username,\n\n\t\t});\n\n\n\t\tawait expect(invitation).toBeVisible();\n\n\t\tawait expect(invitation).toHaveText(\n\n\t\t\tnew RegExp(`Invited by ${owner.username}`)\n\n\t\t);\n\n\t});\n\n\n\ttest('can copy link for group invitation', async ({\n\n\t\tpage,\n\n\t\tcontext,\n\n\t\tbrowserName,\n\n\t}) => {\n\n\t\ttest.skip(browserName === 'firefox', 'Skip clipboard test in firefox');\n\n\n\t\tconst link = new RegExp(\n\n\t\t\t`${process.env.BASE_CLIENT_URL}/rooms/invite\\\\?token=[a-z0-9-]+\\.[a-z0-9-]+\\.[a-z0-9-]+`\n\n\t\t);\n\n\n\t\tawait context.grantPermissions(['clipboard-read', 'clipboard-write']);\n\n\n\t\tconst addUser = page.getByRole('button', { name: 'invite user' });\n\n\t\tawait addUser.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\n\t\tconst tab = dialog.getByRole('tab', { name: 'Via link' });\n\n\t\tawait tab.click();\n\n\n\t\tconst form = dialog.locator('form');\n\n\t\tawait expect(form).toBeVisible();\n\n\n\t\tconst input = form.getByLabel('Link', { exact: true });\n\n\t\tawait expect(input).toBeVisible();\n\n\t\tawait expect(input).toHaveValue(link);\n\n\n\t\tconst copy = form.getByRole('button', { name: 'copy link' });\n\n\t\tawait copy.click();\n\n\n\t\tawait expect(dialog).toBeHidden();\n\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'info',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Link was copied',\n\n\t\t});\n\n\n\t\tconst clipboard = await page.evaluate(() => navigator.clipboard.readText());\n\n\n\t\texpect(clipboard).toMatch(link);\n\n\t});\n\n\n\ttest('existing member cannot be invited', async ({\n\n\t\tpage,\n\n\t\tuser: getUser,\n\n\t\tmember: getMember,\n\n\t}) => {\n\n\t\tconst user = await getUser({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t\tusername: faker.internet.userName(),\n\n\t\t});\n\n\t\tconst member = await getMember({\n\n\t\t\troom,\n\n\t\t\tuser,\n\n\t\t\tstatus: 'activated',\n\n\t\t});\n\n\n\t\tconst addUser = page.getByRole('button', { name: 'invite user' });\n\n\t\tawait addUser.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst form = dialog.locator('form');\n\n\t\tawait expect(form).toBeVisible();\n\n\n\t\tconst selectButton = form.getByRole('button', {\n\n\t\t\tname: 'select user above',\n\n\t\t});\n\n\t\tawait expect(selectButton).toBeVisible();\n\n\n\t\tconst input = form.getByLabel('username');\n\n\t\tawait input.fill(user.username.slice(0, 4));\n\n\t\tconst option = page.getByRole('option');\n\n\t\tawait option.click();\n\n\t\tconst inviteUser = form.getByRole('button', {\n\n\t\t\tname: `invite ${user.username} to the room`,\n\n\t\t});\n\n\t\tawait inviteUser.click();\n\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'error',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Invitation was not sent',\n\n\t\t});\n\n\t});\n\n\n\ttest('common member cannot invite user', async ({\n\n\t\tpage,\n\n\t\tuser: getUser,\n\n\t\tmember: getMember,\n\n\t\tlogout,\n\n\t\tauth,\n\n\t}) => {\n\n\t\ttest.skip(true, 'Need fix on test side');\n\n\n\t\tconst user = await getUser({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t\tusername: faker.internet.userName(),\n\n\t\t});\n\n\t\tconst member = await getMember({\n\n\t\t\troom,\n\n\t\t\tuser,\n\n\t\t\tstatus: 'activated',\n\n\t\t});\n\n\t\tawait logout({});\n\n\t\tawait auth(user);\n\n\n\t\tawait page.reload();\n\n\t\tawait page.waitForSelector('li');\n\n\n\t\tconst addUser = page.getByRole('button', { name: 'invite user' });\n\n\t\tawait expect(addUser).toBeHidden();\n\n\t});\n\n\n\ttest('can remove invitation', async ({\n\n\t\tpage,\n\n\t\tinvitation: getInvitation,\n\n\t\tuser: getUser,\n\n\t}) => {\n\n\t\tconst user = await getUser({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t\tusername: faker.internet.userName(),\n\n\t\t});\n\n\t\tconst invitation = await getInvitation({\n\n\t\t\troom,\n\n\t\t\tuser,\n\n\t\t\tinviter: owner,\n\n\t\t});\n\n\n\t\tconst listitem = getInvitationItem({\n\n\t\t\tparent: page,\n\n\t\t\tusername: user.username,\n\n\t\t});\n\n\n\t\tawait expect(listitem).toBeVisible();\n\n\t\tconst remove = listitem.getByRole('button', { name: 'Remove invitation' });\n\n\t\tawait remove.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst accept = dialog.getByRole('button', { name: 'remove' });\n\n\t\tconst cancel = dialog.getByRole('button', { name: 'cancel' });\n\n\n\t\tawait cancel.click();\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expect(listitem).toBeVisible();\n\n\n\t\tawait remove.click();\n\n\t\tawait accept.click();\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expect(listitem).toBeHidden();\n\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'Invitation was removed from the room successfully',\n\n\t\t});\n\n\t});\n\n\n\ttest('room owner can remove user', async ({\n\n\t\tpage,\n\n\t\tuser: getUser,\n\n\t\tmember: getMember,\n\n\t}) => {\n\n\t\tconst user = await getUser({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t\tusername: faker.internet.userName(),\n\n\t\t});\n\n\t\tconst member = await getMember({\n\n\t\t\troom,\n\n\t\t\tuser,\n\n\t\t\tstatus: 'activated',\n\n\t\t});\n\n\n\t\tconst listitem = getUserItem({\n\n\t\t\tparent: page,\n\n\t\t\tusername: user.username,\n\n\t\t});\n\n\n\t\tawait expect(listitem).toBeVisible();\n\n\n\t\tconst remove = listitem.getByRole('button', { name: 'Remove user' });\n\n\t\tawait remove.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst accept = dialog.getByRole('button', { name: 'remove' });\n\n\t\tconst cancel = dialog.getByRole('button', { name: 'cancel' });\n\n\n\t\tawait cancel.click();\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expect(listitem).toBeVisible();\n\n\n\t\tawait remove.click();\n\n\t\tawait accept.click();\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expect(listitem).toBeHidden();\n\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'User was removed from the room successfully',\n\n\t\t});\n\n\t});\n\n\n\ttest('common member can exit from room', async ({\n\n\t\tpage,\n\n\t\tuser: getUser,\n\n\t\tmember: getMember,\n\n\t\tlogout,\n\n\t\tauth,\n\n\t}) => {\n\n\t\tconst user = await getUser({\n\n\t\t\temail: faker.internet.email(),\n\n\t\t\tusername: faker.internet.userName(),\n\n\t\t});\n\n\t\tconst member = await getMember({\n\n\t\t\troom,\n\n\t\t\tuser,\n\n\t\t\tstatus: 'activated',\n\n\t\t});\n\n\t\tawait logout({});\n\n\t\tawait auth(user);\n\n\n\t\tawait page.goto(`/rooms/${room.id}/users`);\n\n\t\tawait page.waitForSelector('li');\n\n\n\t\tconst listitem = getUserItem({\n\n\t\t\tparent: page,\n\n\t\t\tusername: user.username,\n\n\t\t});\n\n\t\tawait expect(listitem).toBeVisible();\n\n\n\t\tconst exit = listitem.getByRole('button', { name: 'Exit from room' });\n\n\t\tawait exit.click();\n\n\n\t\tconst dialog = page.getByRole('dialog');\n\n\t\tawait expect(dialog).toBeVisible();\n\n\t\tconst accept = dialog.getByRole('button', { name: 'exit' });\n\n\t\tconst cancel = dialog.getByRole('button', { name: 'cancel' });\n\n\n\t\tawait cancel.click();\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expect(listitem).toBeVisible();\n\n\n\t\tawait exit.click();\n\n\t\tawait accept.click();\n\n\t\tawait expect(dialog).toBeHidden();\n\n\t\tawait expect(listitem).toBeHidden();\n\n\n\t\tawait expectAlert({\n\n\t\t\ttype: 'success',\n\n\t\t\tparent: page,\n\n\t\t\tmessage: 'You exited from room successfully',\n\n\t\t});\n\n\t});\n\n\n\ttest('owner cannot exit from room', async ({ page }) => {\n\n\t\tconst listitem = getUserItem({\n\n\t\t\tparent: page,\n\n\t\t\tusername: owner.username,\n\n\t\t});\n\n\n\t\tawait expect(listitem).toBeVisible();\n\n\n\t\tconst exit = listitem.getByRole('button', { name: 'Exit from room' });\n\n\t\tawait expect(exit).toBeHidden();\n\n\t});\n\n});\n"}