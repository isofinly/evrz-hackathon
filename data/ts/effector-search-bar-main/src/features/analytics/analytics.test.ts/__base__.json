{"start_line": 0, "code": "import { fork, allSettled } from \"effector\";\n\nimport {\n\n  analyticsDomain,\n\n  sendDataToAnalytics,\n\n  initializeAnalyticsFx,\n\n  sendEventFx,\n\n} from \"./analytics\";\n\n\ndescribe(\"analytics\", () => {\n\n  test(\"should send events instantly if analytics already initialized\", async () => {\n\n    const sendEventMock = jest.fn();\n\n\n    const TEST_EVENT = { name: \"test_event_1\", payload: {} };\n\n\n    const scope = fork(analyticsDomain, {\n\n      handlers: new Map<any, any>([\n\n        [initializeAnalyticsFx, jest.fn()],\n\n        [sendEventFx, sendEventMock],\n\n      ]),\n\n    });\n\n\n    await allSettled(initializeAnalyticsFx, { scope });\n\n    await allSettled(sendDataToAnalytics, {\n\n      scope,\n\n      params: TEST_EVENT,\n\n    });\n\n\n    expect(sendEventMock).toHaveBeenCalledTimes(1);\n\n    expect(sendEventMock).toHaveBeenCalledWith(TEST_EVENT);\n\n  });\n\n\n  test(\"should send events only after initialization\", async () => {\n\n    const sendEventMock = jest.fn();\n\n\n    const TEST_EVENT = { name: \"test_event_1\", payload: {} };\n\n\n    const scope = fork(analyticsDomain, {\n\n      handlers: new Map<any, any>([\n\n        [initializeAnalyticsFx, jest.fn()],\n\n        [sendEventFx, sendEventMock],\n\n      ]),\n\n    });\n\n\n    await allSettled(sendDataToAnalytics, {\n\n      scope,\n\n      params: TEST_EVENT,\n\n    });\n\n\n    expect(sendEventMock).not.toHaveBeenCalled();\n\n\n    await allSettled(initializeAnalyticsFx, { scope });\n\n\n    expect(sendEventMock).toHaveBeenCalledTimes(1);\n\n    expect(sendEventMock).toHaveBeenCalledWith(TEST_EVENT);\n\n  });\n\n\n  test(\"Initialization event must occur only one time\", async () => {\n\n    const sendEventMock = jest.fn();\n\n\n    const TEST_EVENT = { name: \"test_event_1\", payload: {} };\n\n\n    const scope = fork(analyticsDomain, {\n\n      handlers: new Map<any, any>([\n\n        [initializeAnalyticsFx, jest.fn()],\n\n        [sendEventFx, sendEventMock],\n\n      ]),\n\n    });\n\n\n    await allSettled(sendDataToAnalytics, {\n\n      scope,\n\n      params: TEST_EVENT,\n\n    });\n\n\n    expect(sendEventMock).not.toHaveBeenCalled();\n\n\n    await allSettled(initializeAnalyticsFx, { scope });\n\n\n    expect(sendEventMock).toHaveBeenCalledTimes(1);\n\n    expect(sendEventMock).toHaveBeenCalledWith(TEST_EVENT);\n\n\n    await allSettled(initializeAnalyticsFx, { scope });\n\n\n    expect(sendEventMock).toHaveBeenCalledTimes(1);\n\n    expect(sendEventMock).toHaveBeenCalledWith(TEST_EVENT);\n\n  });\n\n});\n"}