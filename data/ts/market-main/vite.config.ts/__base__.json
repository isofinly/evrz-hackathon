{"start_line": 0, "code": "import { defineConfig } from 'vite'\n\nimport react from '@vitejs/plugin-react'\n\nimport path from \"path\";\n\nimport { crx } from '@crxjs/vite-plugin'\n\nimport manifest from './manifest.json'\n\n\n\n// https://vitejs.dev/config/\n\nexport default defineConfig({\n\n\tplugins: [\n\n\t\treact(),\n\n\t\tcrx({ manifest }),\n\n\t],\n\n\n\tbuild: {\n\n\t\toutDir: path.resolve(__dirname, 'build'),\n\n\t\tmanifest:true,\n\n\t\trollupOptions: {\n\n\t\t\toutput: {\n\n\t\t\t\t\n\t\t\t\tassetFileNames: (assetInfo) => {\n\n\n\t\t\t\t\t//split the filename and get the last element (the file extension)\n\n\t\t\t\t\tlet extensionType = assetInfo.name.split('.').at(-1);\n\n\n\n\t\t\t\t\t//test if the extension is an image type\n\n\t\t\t\t\tif (/png|jpe?g|svg|gif|tiff|bmp|ico/i.test(extensionType)) {\n\n\t\t\t\t\t\textensionType = 'img';\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// tes if the file is a font, then put within css files\n\n\t\t\t\t\telse if (/ttf|woff|woff2|otf/i.test(extensionType)){\n\n\t\t\t\t\t\textensionType = 'css';\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn `static/${extensionType}/[name]-[hash][extname]`;\n\n\t\t\t\t},\n\n\n\t\t\t\t//Set output.chunkFileNames to configure the vendor chunk filenames.\n\n\t\t\t\tchunkFileNames: 'static/js/[name]-[hash].js',\n\n\n\t\t\t\t//Set output.entryFileNames to configure the index.js filename.\n\n\t\t\t\tentryFileNames: 'static/js/[name]-[hash].js',\n\n\t\t\t},\n\n\t\t}\n\n\t},\n\n\tresolve: {\n\n\t\talias: {\n\n\t\t\t'@': path.resolve(__dirname, 'src'),\n\n\t\t}\n\n\t}\n\n})\n"}