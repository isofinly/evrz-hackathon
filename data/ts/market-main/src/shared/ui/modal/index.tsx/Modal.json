{"start_line": 19, "code": "function Modal({\n\n  isVisible,\n\n  hideModal,\n\n  product,\n\n  products,\n\n  setActiveProduct,\n\n}: ModalProps): JSX.Element | null {\n  const [fullScreen, setFullscreen] = useState<boolean>(false);\n  const [activeImage, setActiveImage] = useState<string>(\n    product && product.images[0] ? product.images[0] : \"\"\n  );\n  const { theme } = useContext(ThemeContext);\n\n  const nextProduct = ((): null | Product => {\n    const currentProductIndex = products.findIndex(\n      (item) => product && item.id === product.id\n    );\n    if (currentProductIndex !== -1 && products[currentProductIndex + 1]) {\n      return products[currentProductIndex + 1];\n    }\n    return null;\n  })();\n\n  const previousProduct = ((): null | Product => {\n    const currentProductIndex = products.findIndex(\n      (item) => product && item.id === product.id\n    );\n\n    if (currentProductIndex !== -1 && products[currentProductIndex - 1]) {\n      return products[currentProductIndex - 1];\n    }\n    return null;\n  })();\n\n  const handleModalHide = (e: React.MouseEvent<HTMLDivElement>): void => {\n    const el = e.target as HTMLElement;\n    if (el.id.toString() === \"modalContainer\") hideModal();\n  };\n  useLayoutEffect(() => {\n    if (product) setActiveImage(product.images[0]);\n  }, [product, activeImage, setActiveImage]);\n\n  return isVisible && product ? (\n    <Portal>\n      <div\n        className={styles.modal}\n        data-fullscreen={fullScreen}\n        onClick={handleModalHide}\n        id=\"modalContainer\"\n      >\n        <div className={clsx(styles.modalContent, [theme])}>\n          <div className={styles.Header}>\n            <div className={styles.NextPreviButtonsContainer}>\n              <button\n                disabled={previousProduct ? false : true}\n                className={clsx(styles.PrevBtn, { disabled: !previousProduct })}\n                onClick={() => {\n                  setActiveProduct(previousProduct);\n                  setActiveImage(\n                    previousProduct ? previousProduct.images[0] : \"\"\n                  );\n                }}\n              >\n                Previous\n              </button>\n              <button\n                disabled={nextProduct ? false : true}\n                className={clsx(styles.NextBtn, { disabled: !nextProduct })}\n                onClick={() => {\n                  setActiveProduct(nextProduct);\n                  setActiveImage(nextProduct?.images[0] ?? \"\");\n                }}\n              >\n                Next\n              </button>\n            </div>\n            <div className={styles.FullscreenCloseButtons}>\n              <button\n                className={styles.FullScreenBtn}\n                onClick={() => setFullscreen(!fullScreen)}\n              >\n                <ICON\n                  name={fullScreen ? \"compress-solid\" : \"expand-solid\"}\n                  color=\"silver\"\n                  height=\"16px\"\n                />\n              </button>\n              <button\n                className={styles.HeaderCloseBtn}\n                onClick={() => hideModal()}\n              >\n                <ICON name=\"xmark-solid\" color=\"white\" height=\"16px\" />\n              </button>\n            </div>\n          </div>\n          <div className={styles.Body}>\n            <div className={styles.title}>{product.title}</div>\n            <div className={styles.image}>\n              <div className={styles.activeImage}>\n                <img src={activeImage} alt=\"\" />\n              </div>\n              <div className={styles.imagesSlider}>\n                {product.images.map((img, i: number) => (\n                  <img\n                    className=\"image\"\n                    key={`${i}_image_${img}`}\n                    onClick={() => setActiveImage(img)}\n                    src={img}\n                    alt=\"\"\n                  />\n                ))}\n              </div>\n            </div>\n            <div className={styles.price}>\n              <span>Price</span>\n              <span>{product.price}</span>\n            </div>\n            <div className={styles.rating}>\n              <span>Rating</span>\n              <span>{product.rating}</span>\n            </div>\n            <div className={styles.discount}>\n              <span>Discount</span>\n              <span>{product.discountPercentage}%</span>\n            </div>\n            <div className={styles.description}>\n              <span>{product.description}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Portal>\n  ) : null;\n}"}