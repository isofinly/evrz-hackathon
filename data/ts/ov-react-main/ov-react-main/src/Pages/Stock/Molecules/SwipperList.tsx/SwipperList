SwipperList = () => {
  //<REVIEW>При использовании нескольких моделей effector - комбинируйте модели методом combine в файле ./model.ts</REVIEW>
  const checkStock = useStore($checkStock);
  const checkAmazing = useStore($checkAmazing);

  //<REVIEW>Рассмотрите возможность вынесения StockObjects в отдельный файл или получение данных из API. Это улучшит поддерживаемость и тестируемость кода.</REVIEW>
  const StockObjects = [
    {
      picture: Picture_1,
      name: "Fake Gen Jersey",
      price: "3000",
    },
    { picture: Picture_2, name: "Evil Jersey", price: "3500" },
    { picture: Picture_3, name: "Angel Hood", price: "5500" },
    { picture: Picture_4, name: "Over Stars Scarfe", price: "2200" },
  ];

  return (
    <div className="Stock__SwipperList">
      {checkAmazing ? <SwipperAmazingList /> : null}
      //
      <REVIEW>
        Рассмотрите возможность использования тернарного оператора для улучшения
        читаемости: {checkAmazing && <SwipperAmazingList />}.
      </REVIEW>
      <div className="Stock__SwipperList__Swipper">
        <Swiper
          // cssMode={true}
          // <REVIEW>Для пропсов с положительным bool не нужно присваивать "={true}"</REVIEW>
          navigation={true}
          // <REVIEW>Для пропсов с положительным bool не нужно присваивать "={true}"</REVIEW>
          pagination={true}
          // <REVIEW>Для пропсов с положительным bool не нужно присваивать "={true}"</REVIEW>
          mousewheel={true}
          // <REVIEW>Для пропсов с положительным bool не нужно присваивать "={true}"</REVIEW>
          keyboard={true}
          modules={[Navigation, Pagination, Mousewheel, Keyboard]}
          className="mySwiper"
          onRealIndexChange={(swiper: any) => {
            setcheckStock(swiper.activeIndex);
          }}
          //<REVIEW>Избегайте использования any. Рассмотрите возможность использования типизации для swiper. Это улучшит читаемость и надежность кода.</REVIEW>
          onClick={() => {
            setcheckAmazing(true);
          }}
          //<REVIEW>Рассмотрите возможность использования useCallback для оптимизации функции onClick. Это может улучшить производительность компонента.</REVIEW>
        >
          {StockObjects.map((e, index) => (
            <SwiperSlide key={index}>
              {
                //<REVIEW>Используйте уникальный идентификатор для ключа, например, e.name или e.picture, чтобы избежать потенциальных проблем с производительностью.</REVIEW>
              }
              <img src={e.picture} alt={e.name} />
              {
                //<REVIEW>Добавьте описание для alt, чтобы улучшить доступность. Это важно для пользователей с ограниченными возможностями.</REVIEW>
              }
            </SwiperSlide>
          ))}
        </Swiper>

        <div className="Stock__SwipperList__Info">
          <div className="Stock__SwipperList__Info__Name">
            {
              //<REVIEW> Рассмотрите возможность сделать нейминг элементов более читаемым</REVIEW>
            }
            {StockObjects.map((e, i) => (i === checkStock ? e.name : null))}
            {
              //<REVIEW>Избегайте использования any. Убедитесь, что типы i и e определены. Это улучшит читаемость и надежность кода.</REVIEW>
            }
          </div>
          <div className="Stock__SwipperList__Info__Price">
            {
              //<REVIEW> Рассмотрите возможность сделать нейминг элементов более читаемым</REVIEW>
            }
            {StockObjects.map((e, i) =>
              //<REVIEW>  Конкатинация строк должна происходить внутри бектиков - `${e.price} Руб.`</REVIEW>
              i === checkStock ? `${e.price} Руб.` : null
            )}
            {
              //<REVIEW>Избегайте использования any. Убедитесь, что типы i и e определены. Это улучшит читаемость и надежность кода.</REVIEW>
            }
          </div>
        </div>
        <Link to={"/Basket"}>Купить</Link>
      </div>
    </div>
  );
}