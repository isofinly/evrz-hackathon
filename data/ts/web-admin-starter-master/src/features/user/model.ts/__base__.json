{"start_line": 0, "code": "import { createStore, createDomain } from 'effector';\n\nimport { message } from 'antd';\n\n\nimport * as API from 'api/user';\n\n\nimport { errorCodes } from 'lib/constants';\n\n\nexport const userDomain = createDomain();\n\n\nconst defaultUser = {\n\n  role: null,\n\n};\n\n\nexport const $user = createStore<API.UserSession>(defaultUser);\n\nexport const $isUserPending = createStore<boolean>(true);\n\n\ntype GetUserResult = { payload: API.UserSession };\n\n\nexport const getUser = userDomain.createEffect<void, GetUserResult>();\n\nexport const logIn = userDomain.createEffect<API.Credentials, void>();\n\nexport const logOut = userDomain.createEffect<void, void>();\n\n\ngetUser.use(API.getUser);\n\nlogOut.use(API.logOut);\n\nlogIn.use(API.logIn);\n\n\n$user\n\n  .on(getUser.done, (state, { result }) => ({ ...state, ...result.payload }))\n\n  .on(getUser.fail, () => defaultUser)\n\n  .on(logOut.done, () => defaultUser);\n\n\n$isUserPending.on(getUser.finally, () => false);\n\n$isUserPending.map((item) => console.log('!!!', item));\n\n\nuserDomain.onCreateEffect((effect) => {\n\n  $user.on(effect.fail, (user, payload) => {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    const err = payload.error as any;\n\n\n    if (err.status === errorCodes.NOT_AUTHED) {\n\n      return { role: null };\n\n    }\n\n    return user;\n\n  });\n\n\n  effect.done.watch(() => {\n\n    message.warning('Authorization success');\n\n  });\n\n\n  effect.fail.watch(() => {\n\n    message.warning('Authorization fail');\n\n  });\n\n});\n"}