{"start_line": 0, "code": "type FetchProps = {\n\n  method: string;\n\n  body: string;\n\n};\n\n\nfunction wait<R, T>(data: R): Promise<T> <BODY wait>\n\nexport const apiMock: Mocks = {\n\n  'POST /user/signin': (body: string): object => {\n\n    let found;\n\n    const users: { [key: number]: { id: number; role: string } } = {\n\n      1: {\n\n        id: 1,\n\n        role: 'operator',\n\n      },\n\n      2: {\n\n        id: 2,\n\n        role: 'security',\n\n      },\n\n      3: {\n\n        id: 3,\n\n        role: 'superadmin',\n\n      },\n\n    };\n\n\n    const params = JSON.parse(body);\n\n\n    switch (params.login) {\n\n      case 'operator':\n\n        found = {\n\n          user: users[1],\n\n        };\n\n        break;\n\n      case 'security':\n\n        found = {\n\n          user: users[2],\n\n        };\n\n        break;\n\n      case 'superadmin':\n\n        found = {\n\n          user: users[3],\n\n        };\n\n        break;\n\n      default:\n\n        // throw\n\n        return { error: 'Invalid credentials' };\n\n    }\n\n\n    window.localStorage.setItem('current-user-id', String(found.user.id));\n\n\n    return found;\n\n  },\n\n  'POST /user/logout': (): object => {\n\n    window.localStorage.removeItem('current-user-id');\n\n    return {};\n\n  },\n\n};\n\n\nexport const fetchMocks = async (\n\n  url: string,\n\n  { method, body }: FetchProps,\n\n): Promise<any> => <BODY fetchMocks>;\n\n\ntype Mocks = {\n\n  [key: string]: (body: string) => object;\n\n};\n\n\n// class Failed extends Error {\n\n//   public data: object;\n\n//   constructor(data: { error: string }) {\n\n//     super(`Failed to fetch data: ${data.error}`);\n\n//     this.data = data;\n\n//   }\n\n// }\n"}