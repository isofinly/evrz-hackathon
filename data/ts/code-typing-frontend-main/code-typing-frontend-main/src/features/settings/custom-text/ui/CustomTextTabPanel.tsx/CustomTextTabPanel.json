{"start_line": 21, "code": "CustomTextTabPanel = () => {\n    const { data: languages } = useGetProgrammingLanguages()\n    const { mutate: addCustomCodeExample, isPending } = useAddCustomCodeExample()\n\n    const toast = useToast()\n\n    const [newCodeExample, setNewCodeExample] = useState<CustomCodeExampleBody>({\n        programmingLanguageUUID: \"default\",\n        content: \"\"\n    })\n\n    useEffect(() => {\n        if (languages && languages.length !== 0) {\n            setNewCodeExample(prev => ({\n                ...prev,\n                programmingLanguageUUID: languages[0].UUID\n            }))\n        }\n    }, [languages])\n\n    const handleSubmit: FormEventHandler = e => {\n        e.preventDefault()\n\n        const errors = validateCustomCodeExample(newCodeExample)\n        if (errors.length !== 0) {\n            return toast({\n                title: errors[0],\n                status: \"error\"\n            })\n        }\n\n        addCustomCodeExample(newCodeExample, {\n            onSuccess: () => {\n                toast({\n                    title: \"Code example added\",\n                    status: \"success\"\n                })\n            },\n            onError: () => {\n                toast({\n                    title: \"Error adding code example\",\n                    status: \"error\"\n                })\n            }\n        })\n    }\n\n    const handleChangeLanguage: ChangeEventHandler<HTMLSelectElement> = e =>\n        setNewCodeExample(prev => ({\n            ...prev,\n            programmingLanguageUUID: e.target.value\n        }))\n\n    const handleChangeCode: ChangeEventHandler<HTMLTextAreaElement> = e =>\n        setNewCodeExample(prev => ({ ...prev, content: e.target.value }))\n\n    const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = e => {\n        keyboardShortcuts({\n            \"Ctrl+Enter\": () => {\n                handleSubmit(e)\n            }\n        })(e)\n    }\n\n    return (\n        <AsideTabPanel name={settingTabs.customText} maxW=\"400px\" w=\"100%\">\n            <AsideButtons>\n                <AsideCloseButton>\u2014</AsideCloseButton>\n            </AsideButtons>\n\n            <Flex as={\"form\"} direction=\"column\" gap={2} mt={5} onSubmit={handleSubmit}>\n                <Select\n                    onChange={handleChangeLanguage}\n                    value={newCodeExample.programmingLanguageUUID}\n                >\n                    <option value=\"default\">--Language--</option>\n\n                    {languages?.map(language => (\n                        <option key={language.UUID} value={language.UUID}>\n                            {language.name}\n                        </option>\n                    ))}\n                </Select>\n\n                {newCodeExample.programmingLanguageUUID === \"default\" ? (\n                    <Text textAlign=\"center\">Select a language</Text>\n                ) : (\n                    <Textarea\n                        value={newCodeExample.content}\n                        onChange={handleChangeCode}\n                        resize=\"none\"\n                        h=\"10em\"\n                        onKeyDown={handleKeyDown}\n                    />\n                )}\n\n                <Button onSubmit={handleSubmit} type=\"submit\">\n                    Add Text\n                </Button>\n            </Flex>\n\n            {isPending && <CodeLoadingProgress maxLoadingCount={10} />}\n        </AsideTabPanel>\n    )\n}"}