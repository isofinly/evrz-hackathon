{"start_line": 15, "code": "LanguageTabPanel = () => {\n    const [searchValue, setSearchValue] = useState(\"\")\n\n    const languageName = useLanguageNameSearch()\n\n    const { data: programmingLanguages } = useGetProgrammingLanguages()\n\n    const searchList = useSearch(programmingLanguages, searchValue, item => item.name)\n    const searchListWithRandom: ProgrammingLanguage[] = useMemo(\n        () => [\n            {\n                name: \"Random\",\n                logo: programmingLanguageIcon,\n                UUID: \"Random\"\n            },\n            ...(searchList ?? [])\n        ],\n        [searchList]\n    )\n\n    const {\n        containerRef,\n        handleResetFocused,\n        itemFocused,\n        itemFocusedRef,\n        handleArrowUp,\n        handleArrowDown,\n        handleEnter\n    } = useListArrows<HTMLAnchorElement, HTMLDivElement>(searchListWithRandom.length)\n\n    const handleChangeSearch: ChangeEventHandler<HTMLInputElement> = e => {\n        setSearchValue(e.target.value)\n        handleResetFocused()\n    }\n\n    const handleKeyDownSearch: KeyboardEventHandler = e => {\n        keyboardShortcuts({\n            ArrowDown: handleArrowDown,\n            ArrowUp: handleArrowUp,\n            Enter: handleEnter\n        })(e)\n    }\n\n    return (\n        <AsideTabPanel overflow=\"hidden\" display=\"flex\" name={settingTabs.language}>\n            <Stack overflow=\"hidden\">\n                <AsideButtons>\n                    <AsideCloseButton>\u2014</AsideCloseButton>\n                </AsideButtons>\n\n                <Input\n                    variant=\"flushed\"\n                    placeholder=\"Search..\"\n                    value={searchValue}\n                    onChange={handleChangeSearch}\n                    autoFocus\n                    onKeyDown={handleKeyDownSearch}\n                    onFocus={handleResetFocused}\n                    onBlur={handleResetFocused}\n                />\n\n                <ProgrammingLanguagesList\n                    ref={containerRef}\n                    programmingLanguages={searchListWithRandom}\n                    renderItem={(item, index) => (\n                        <Link\n                            as={NavLink}\n                            to={item.to}\n                            key={item.key}\n                            ref={index === itemFocused ? itemFocusedRef : null}\n                        >\n                            <Tile\n                                border=\"1px solid\"\n                                borderColor={index === itemFocused ? \"primary.500\" : \"transparent\"}\n                                isActive={\n                                    item.name === languageName ||\n                                    (item.name === \"Random\" && !languageName)\n                                }\n                            >\n                                <TileText>{item.name}</TileText>\n                                <TileImage src={item.logo} />\n                            </Tile>\n                        </Link>\n                    )}\n                />\n            </Stack>\n        </AsideTabPanel>\n    )\n}"}