TypingModeTabPanel = () => {
    const { changeTimerSetting, timer } = useTypingCodeTimer()
    const {
        timerSettings: { direction, startSeconds }
    } = timer

    const handleChangeTimerSetting =
        (direction: TimerDirection, startSeconds: number = 0): MouseEventHandler =>
        e => {
            e.stopPropagation()

            changeTimerSetting({
                direction: direction,
                startSeconds: startSeconds
            })
        }

    return (
        <AsideTabPanel name={settingTabs.typingMode}>
            <AsideButtons>
                <AsideCloseButton>â€”</AsideCloseButton>
            </AsideButtons>

            <Stack spacing={4} mt={4}>
                <ModeItem
                    as="button"
                    onClick={handleChangeTimerSetting("up")}
                    isActive={direction === "up"}
                >
                    Counter up
                </ModeItem>

                <ModeItem
                    onClick={handleChangeTimerSetting("down", counterDownVariants[1])}
                    isActive={direction === "down"}
                >
                    <Text>Counter down</Text>

                    <Flex flexWrap="wrap" gap={1} justifyContent="center">
                        {counterDownVariants.map(variant => (
                            <ModeSmallItem
                                as="button"
                                key={variant}
                                onClick={handleChangeTimerSetting("down", variant)}
                                isActive={startSeconds === variant}
                            >
                                <TileText>{variant}s</TileText>
                            </ModeSmallItem>
                        ))}
                    </Flex>
                </ModeItem>
            </Stack>
        </AsideTabPanel>
    )
}