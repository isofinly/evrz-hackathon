{"start_line": 12, "code": "TypingModeTabPanel = () => {\n    const { changeTimerSetting, timer } = useTypingCodeTimer()\n    const {\n        timerSettings: { direction, startSeconds }\n    } = timer\n\n    const handleChangeTimerSetting =\n        (direction: TimerDirection, startSeconds: number = 0): MouseEventHandler =>\n        e => {\n            e.stopPropagation()\n\n            changeTimerSetting({\n                direction: direction,\n                startSeconds: startSeconds\n            })\n        }\n\n    return (\n        <AsideTabPanel name={settingTabs.typingMode}>\n            <AsideButtons>\n                <AsideCloseButton>\u2014</AsideCloseButton>\n            </AsideButtons>\n\n            <Stack spacing={4} mt={4}>\n                <ModeItem\n                    as=\"button\"\n                    onClick={handleChangeTimerSetting(\"up\")}\n                    isActive={direction === \"up\"}\n                >\n                    Counter up\n                </ModeItem>\n\n                <ModeItem\n                    onClick={handleChangeTimerSetting(\"down\", counterDownVariants[1])}\n                    isActive={direction === \"down\"}\n                >\n                    <Text>Counter down</Text>\n\n                    <Flex flexWrap=\"wrap\" gap={1} justifyContent=\"center\">\n                        {counterDownVariants.map(variant => (\n                            <ModeSmallItem\n                                as=\"button\"\n                                key={variant}\n                                onClick={handleChangeTimerSetting(\"down\", variant)}\n                                isActive={startSeconds === variant}\n                            >\n                                <TileText>{variant}s</TileText>\n                            </ModeSmallItem>\n                        ))}\n                    </Flex>\n                </ModeItem>\n            </Stack>\n        </AsideTabPanel>\n    )\n}"}