{"start_line": 6, "code": "useListArrows = <\n\n    TItemElement extends HTMLElement,\n\n    TContainerElement extends HTMLElement\n\n>(\n\n    itemsLength: number,\n\n    defaultFocusedIndex: number = -1\n\n): UseListArrowsReturn<TItemElement, TContainerElement> => {\n    const itemFocusedRef = useRef<TItemElement>(null)\n    const containerRef = useRef<TContainerElement>(null)\n\n    const [itemFocused, setItemFocused] = useState(-1)\n\n    const handleResetFocused = () => {\n        setItemFocused(defaultFocusedIndex)\n    }\n\n    // <REVIEW>\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 const handleArrowDown: KeyboardEventHandler = (e) => {}</REVIEW>\n    const handleArrowDown: KeyboardEventHandler = e => {\n        e.preventDefault()\n        setItemFocused(prev => (prev === itemsLength - 1 ? prev : prev + 1))\n    }\n\n    // <REVIEW>\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 const handleArrowUp: KeyboardEventHandler = (e) => {}</REVIEW>\n    const handleArrowUp: KeyboardEventHandler = e => {\n        e.preventDefault()\n        setItemFocused(prev => (prev <= 0 ? defaultFocusedIndex : prev - 1))\n    }\n\n    // <REVIEW>\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 const handleEnter: KeyboardEventHandler = (e) => {}</REVIEW>\n    const handleEnter: KeyboardEventHandler = e => {\n        e.preventDefault()\n        itemFocusedRef.current?.click()\n    }\n\n    const handleScrollToItem = () => {\n        containerRef.current?.scrollTo({\n            top: (itemFocusedRef.current?.offsetTop ?? 0) - containerRef.current?.offsetTop - 80,\n            behavior: \"smooth\"\n        })\n    }\n\n    useEffect(() => {\n        handleScrollToItem()\n    }, [itemFocused])\n\n    return {\n        handleEnter,\n        itemFocusedRef,\n        containerRef,\n        handleResetFocused,\n        handleArrowDown,\n        handleArrowUp,\n        handleScrollToItem,\n        itemFocused\n    }\n}"}