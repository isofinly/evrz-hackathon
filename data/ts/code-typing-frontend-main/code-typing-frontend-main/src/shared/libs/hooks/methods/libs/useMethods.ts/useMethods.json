{"start_line": 14, "code": "useMethods = <State, Methods extends AnyMethodsMap<State>>(\n\n    options: UseMethodsInit<State, Methods>\n\n): [State, BoundMethods<Methods>] => {\n    const initialOptions = useMemo(() => (typeof options === \"object\" ? options : options()), [])\n\n    const reducer = (state: State, action: AnyAction): State => {\n        const actualOptions = typeof options === \"object\" ? options : options()\n\n        const actionReducer = actualOptions.methods[action.type]\n\n        return produce(state, (draft: State) => actionReducer(draft, action.payload))\n    }\n\n    const [state, dispatch] = useReducer<Reducer<State, AnyAction>>(\n        reducer,\n        initialOptions.initialState\n    )\n\n    const methods = useMemo(() => {\n        const result = {} as BoundMethods<Methods>\n\n        for (const key in initialOptions.methods) {\n            result[key] = (payload?: unknown) => dispatch({ type: key, payload })\n        }\n        return result\n    }, [initialOptions])\n\n    return [state, methods as BoundMethods<Methods>]\n}"}