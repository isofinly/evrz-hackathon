{"query": "useScrollIntoView = <\n\n    ScrollElement extends HTMLElement,\n\n    ScrollElementParent extends HTMLElement = ScrollElement\n\n>(\n\n    indentTop: number = 0,\n\n    indentLeft: number = 0\n\n): [\n\n    scrollRef: RefObject<ScrollElement>,\n\n    scrollRefParent: RefObject<ScrollElementParent>,\n\n    scrollHandlers: ScrollHandlers\n\n] => {\n    const scrollRef = useRef<ScrollElement>(null)\n    const scrollRefParent = useRef<ScrollElementParent>(null)\n\n    const scrollIntoView = (behavior: ScrollBehavior = \"smooth\") => {\n        if (!scrollRef.current || !scrollRefParent.current) return\n\n        const parentRect = scrollRefParent.current.getBoundingClientRect()\n        const childRect = scrollRef.current.getBoundingClientRect()\n\n        const topOffset =\n            childRect.top - parentRect.top + scrollRefParent.current.scrollTop + indentTop\n        const leftOffset =\n            childRect.left - parentRect.left + scrollRefParent.current.scrollLeft + indentLeft\n\n        scrollRefParent.current.scroll({\n            top: topOffset,\n            left: leftOffset,\n            behavior\n        })\n    }\n\n    const scrollTo = (options?: ScrollToOptions, callback?: () => void) => {\n        if (!scrollRefParent.current) return\n\n        if (callback) {\n            const handleScrollEnd = () => {\n                const scrollLeft = scrollRefParent.current?.scrollLeft\n                const scrollTop = scrollRefParent.current?.scrollTop\n\n                // const condition1 = options?.left !== undefined && options.top !== undefined && scrollTop === options?.top && scrollLeft === options?.left;\n                // const condition2 = options?.top !== undefined && options?.left === undefined && scrollTop === options.top;\n                // const condition3 = options?.top === undefined && options?.left !== undefined &&scrollLeft === options.left;\n\n                // if ( condition1 || condition2 || condition3) {\n                //     callback()\n                //     scrollRefParent.current?.removeEventListener(\"scroll\", handleScrollEnd)\n                // }\n                // </REVIEW>\n                if (\n                    (options?.left !== undefined &&\n                        options.top !== undefined &&\n                        scrollTop === options?.top &&\n                        scrollLeft === options?.left) ||\n                    (options?.top !== undefined &&\n                        options?.left === undefined &&\n                        scrollTop === options.top) ||\n                    (options?.top === undefined &&\n                        options?.left !== undefined &&\n                        scrollLeft === options.left)\n                ) {\n                    callback()\n                    scrollRefParent.current?.removeEventListener(\"scroll\", handleScrollEnd)\n                }\n            }\n\n            scrollRefParent.current.addEventListener(\"scroll\", handleScrollEnd)\n        }\n\n        scrollRefParent.current.scrollTo(options)\n    }\n\n    return [scrollRef, scrollRefParent, { scrollIntoView, scrollTo }]\n}", "answer": "{}"}