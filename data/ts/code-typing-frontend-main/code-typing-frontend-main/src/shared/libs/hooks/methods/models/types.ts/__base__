


export type AnyAction = {
    type: string
    payload?: unknown
}

export type AnyMethod = (state: any, payload?: any) => any

export type Tail<Arr extends readonly unknown[]> = Arr extends readonly [unknown, ...infer Rest]
    ? Rest
    : []

export interface UseMethodsOptions<State, Methods> <BODY UseMethodsOptions>

export type AnyMethodsMap<State> = Record<
    string,
    // <REVIEW>исключений eslint быть не должно</REVIEW>
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    // <REVIEW>тип any быть не должно</REVIEW>
    (state: State, payload?: any) => State | void
>

export type UseMethodsInit<State, Methods extends AnyMethodsMap<State>> =
    | (() => UseMethodsOptions<State, Methods>)
    | UseMethodsOptions<State, Methods>

export type BoundMethod<Method extends AnyMethod> = (...args: Tail<Parameters<Method>>) => void




export type BoundMethods<Methods extends AnyMethodsMap<any>> = {
    [Key in keyof Methods]: BoundMethod<Methods[Key]>
}