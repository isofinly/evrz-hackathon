{"start_line": 0, "code": "import { TokenService } from \"@entities/token\"\n\nimport { ViewerService } from \"@entities/viewer\"\n\nimport { makeBaseQuery } from \"@shared/api/make-base-query\"\n\nimport axios from \"axios\"\n\n\nexport const baseQueryV1Instance = axios.create({\n\n    baseURL: import.meta.env.VITE_API_URL,\n\n    withCredentials: true\n\n})\n\n\n// add access token to every request\n\nbaseQueryV1Instance.interceptors.request.use(config => {\n\n    const token = TokenService.getAccessToken()\n\n\n    if (token) {\n\n        config.headers[\"Authorization\"] = `Bearer ${token}`\n\n    } else {\n\n        TokenService.deleteAccessToken()\n\n    }\n\n\n    return config\n\n})\n\n\n// refresh access token if it expires\n\nbaseQueryV1Instance.interceptors.response.use(\n\n    response => {\n\n        return response\n\n    },\n\n    async function (error) {\n\n        const originalRequest = error.config\n\n        if (error.response.status === 401 && !originalRequest._retry) {\n\n            originalRequest._retry = true\n\n            try {\n\n                const accessToken = await ViewerService.refresh()\n\n\n                if (accessToken) TokenService.setAccessToken(accessToken)\n\n                else {\n\n                    TokenService.deleteAccessToken()\n\n                }\n\n            } catch (e) {\n\n                TokenService.deleteAccessToken()\n\n            }\n\n\n            return baseQueryV1Instance(originalRequest)\n\n        }\n\n        return Promise.reject(error)\n\n    }\n\n)\n\n\nexport const baseQueryV1 = makeBaseQuery(baseQueryV1Instance)\n"}