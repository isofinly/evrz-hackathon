{"start_line": 10, "code": "Terminal = (props: TerminalProps) => {\n    const { onClose, isOpen } = props\n\n    const {\n        terminalCommands,\n        handleChange,\n        handleInputFocus,\n        inputRef,\n        containerRef,\n        handleKeyDown,\n        setTerminalCommands,\n        terminalValue\n    } = useTerminal(props)\n\n    const handleTerminalKeyDown: KeyboardEventHandler = e => {\n        keyboardShortcuts({\n            Escape: () => {\n                e.stopPropagation()\n                onClose()\n            }\n        })(e)\n    }\n\n    const isSuccessTerminal = (value: string) => value in CommandsEnum\n    const getTerminalColor = (value: string) => (isSuccessTerminal(value) ? \"green.500\" : \"red.500\")\n\n    return (\n        isOpen && (\n            <CustomModalBackdrop onClick={onClose}>\n                <CustomModalContent onClick={handleInputFocus} onKeyDown={handleTerminalKeyDown}>\n                    <Stack h=\"100%\" w=\"100%\" overflow=\"auto\" ref={containerRef}>\n                        {terminalCommands.map((terminalValue, index) => (\n                            <Fragment key={index}>\n                                <TerminalItem>\n                                    <Text color={getTerminalColor(terminalValue)}>\n                                        {terminalValue}\n                                    </Text>\n                                </TerminalItem>\n\n                                <TerminalAnswer\n                                    terminalValue={terminalValue}\n                                    setTerminalValues={setTerminalCommands}\n                                    answersWithComponent={answersWithComponent}\n                                />\n                            </Fragment>\n                        ))}\n\n                        <TerminalItem>\n                            <TerminalInput\n                                isSuccess={isSuccessTerminal(terminalValue)}\n                                isError={!isSuccessTerminal(terminalValue)}\n                                value={terminalValue}\n                                onChange={handleChange}\n                                onKeyDown={handleKeyDown}\n                                ref={inputRef}\n                            />\n                        </TerminalItem>\n                    </Stack>\n                </CustomModalContent>\n            </CustomModalBackdrop>\n        )\n    )\n}"}