{"start_line": 9, "code": "CodeLoadingProgress = (props: CodeLoadingProgressProps) => {\n    const {\n        maxLoadingCount = 50,\n        symbol = \"#\",\n        emptySymbol = \".\",\n        delay = 200,\n        onSuccess,\n        ...textProps\n    } = props\n\n    const [loadingCount, setLoadingCount] = useState(0)\n    const [loadingHash, setLoadingHash] = useState(Date.now())\n\n    const interval = useRef<NodeJS.Timeout>()\n\n    useEffect(() => {\n        interval.current = setInterval(() => {\n            const random = getRandomNumber(1, Math.floor(maxLoadingCount / 6))\n            setLoadingCount(prev =>\n                prev + random > maxLoadingCount ? maxLoadingCount : prev + random\n            )\n        }, delay)\n\n        return () => clearInterval(interval.current)\n    }, [delay, loadingHash, maxLoadingCount])\n\n    useEffect(() => {\n        if (loadingCount >= maxLoadingCount) {\n            onSuccess && onSuccess()\n\n            setTimeout(() => {\n                setLoadingHash(Date.now())\n                setLoadingCount(0)\n            }, 200)\n        }\n    }, [loadingCount, maxLoadingCount])\n\n    const filledLoadingSymbol = symbol.repeat(loadingCount)\n    const emptyLoadingSymbol = emptySymbol.repeat(maxLoadingCount - loadingCount)\n\n    return (\n        <Text color=\"main.900\" fontSize=\"xl\" whiteSpace=\"pre\" textAlign=\"end\" px={4} {...textProps}>\n            [{filledLoadingSymbol + emptyLoadingSymbol}]\n        </Text>\n    )\n}"}