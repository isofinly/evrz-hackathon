{"start_line": 0, "code": "import { createEvent, createStore } from \"effector\"\n\nimport { useUnit } from \"effector-react\"\n\n\nimport { loadStateFromLocalStorage } from \"./load-state-from-local-storage.ts\"\n\nimport { FontState } from \"@entities/font/model\"\n\nimport { FontFamilies, storageKeysEnum } from \"@shared/constants\"\n\n\nconst eventChangeFont = createEvent<FontFamilies>()\n\nconst eventChangeFontSize = createEvent<number>()\n\n\nexport const $font = createStore<FontState>(loadStateFromLocalStorage())\n\n    .on(eventChangeFont, (state, font) => ({\n\n        ...state,\n\n        fontFamily: font\n\n    }))\n\n    .on(eventChangeFontSize, (state, fontSize) => ({\n\n        ...state,\n\n        typingFontSize: fontSize\n\n    }))\n\n\n$font.watch(state => {\n\n    localStorage.setItem(storageKeysEnum.fontFamily, state.fontFamily)\n\n    localStorage.setItem(storageKeysEnum.typingFontSize, state.typingFontSize.toString())\n\n})\n\nexport const useCurrentFont = () => useUnit($font)\n\nexport const useChangeFontFamily = () => useUnit(eventChangeFont)\n\nexport const useChangeFontSize = () => useUnit(eventChangeFontSize)\n"}