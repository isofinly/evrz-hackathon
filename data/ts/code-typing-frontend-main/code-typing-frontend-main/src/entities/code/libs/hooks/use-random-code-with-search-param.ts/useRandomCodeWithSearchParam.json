{"start_line": 19, "code": "useRandomCodeWithSearchParam = (): UseRandomCodeWithSearchReturn => {\n    const [searchParams] = useSearchParams()\n    const languageName = searchParams.get(searchParamsEnum.languageName)\n\n    const toast = useToast()\n\n    const isGetAllCodes = !languageName || languageName === \"Random\"\n\n    const {\n        data: codesByName,\n        isError: isErrorByName,\n        isLoading: isLoadingByName\n    } = useGetCodeExamplesByName(languageName!, {\n        enabled: !isGetAllCodes\n    })\n\n    const {\n        data: codes,\n        isError: isErrorAll,\n        isLoading: isLoadingAll\n    } = useGetCodeExamples({\n        enabled: isGetAllCodes\n    })\n\n    const codesForRandom = codesByName ? codesByName : codes\n\n    const [randomText, newText] = useRandom(codesForRandom)\n    const [defaultRandomText, newDefaultRandomText] = useRandom(defaultTexts)\n\n    const handleNewTextWithoutNetwork = () => {\n        toast({\n            title: \"No network\",\n            description: `Backend not found :(. Only ${defaultTexts.length} texts are available.`,\n            status: \"warning\"\n        })\n        newDefaultRandomText()\n    }\n\n    const isLoading = isLoadingByName || isLoadingAll\n\n    if (isErrorByName || isErrorAll) {\n        return [\n            defaultRandomText,\n            {\n                isPending: isLoading,\n                newText: handleNewTextWithoutNetwork,\n                id: undefined\n            }\n        ]\n    }\n    return [\n        randomText?.content,\n        {\n            isPending: isLoading,\n            newText,\n            id: randomText?.UUID\n        }\n    ]\n}"}