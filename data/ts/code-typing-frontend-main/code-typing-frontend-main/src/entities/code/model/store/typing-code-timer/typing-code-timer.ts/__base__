import { createEvent, createStore } from "effector"

import { TypingCodeTimerStore, TypingTimerSettings } from "@entities/code"
import { storageKeysEnum } from "@shared/constants"

export const counterDownVariants = [15, 30, 60]
export const eventStartTimer = createEvent<number>()
export const eventStopTimer = createEvent<number>()
export const eventResetTimer = createEvent()
export const eventChangeTimerSettings = createEvent<TypingTimerSettings>()

const loadSettingsFromLocalStorage = (): TypingTimerSettings => <BODY loadSettingsFromLocalStorage>

export const $typingCodeTimerStore = createStore<TypingCodeTimerStore>({
    timerStatus: "stopped",
    timeMillisecondsStart: null,
    timeMillisecondsEnd: null,
    timerSettings: loadSettingsFromLocalStorage()
})
    .on(eventStartTimer, (store, startTimeMilliseconds) => ({
        ...store,
        timerStatus: "started",
        timeMillisecondsStart: startTimeMilliseconds,
        timeMillisecondsEnd: null
    }))
    .on(eventStopTimer, (store, stopTimeMilliseconds) => ({
        ...store,
        timerStatus: "stopped",
        timeMillisecondsStart: store.timeMillisecondsStart,
        timeMillisecondsEnd: stopTimeMilliseconds
    }))
    .on(eventResetTimer, store => ({
        ...store,
        timerStatus: "stopped",
        timeMillisecondsStart: null,
        timeMillisecondsEnd: null
    }))
    .on(eventChangeTimerSettings, (store, settings) => ({
        ...store,
        timerSettings: settings
    }))

$typingCodeTimerStore.watch(store => {
    localStorage.setItem(storageKeysEnum.timerDirection, store.timerSettings.direction)
    localStorage.setItem(
        storageKeysEnum.timerStartSeconds,
        store.timerSettings.startSeconds.toString()
    )
})