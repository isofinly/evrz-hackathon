{"start_line": 0, "code": "import { createEvent, createStore } from \"effector\"\n\nimport { useUnit } from \"effector-react\"\n\n\nimport { CurrentRowState } from \"@entities/code\"\n\n\nconst calculateRowStartIndent = (row?: string) => <BODY calculateRowStartIndent>\n\nconst calculateRowRightSymbols = (row: string, typingValue: string) => <BODY calculateRowRightSymbols>\n\nconst eventNextRow = createEvent<string[] | undefined>()\n\nconst eventSetTypingValue = createEvent<{ value: string; rows?: string[] }>()\n\nconst eventSetValueWithTab = createEvent()\n\nconst eventResetState = createEvent()\n\n\nconst initialState: CurrentRowState = {\n\n    currentRowIndex: 0,\n\n    typingValue: \"\",\n\n    prevRowsRightSymbols: 0,\n\n    currentRowRightSymbols: 0,\n\n    errorsCount: 0,\n\n    isError: false\n\n}\n\n\nconst $currentRow = createStore<CurrentRowState>(initialState)\n\n    .on(eventNextRow, (state, rows) => {\n\n        if (!rows) return state\n\n\n        const nextRow = rows.at(state.currentRowIndex + 1)\n\n\n        const indent = calculateRowStartIndent(nextRow)\n\n\n        return {\n\n            ...state,\n\n            typingValue: \" \".repeat(indent),\n\n            prevRowsRightSymbols:\n\n                state.prevRowsRightSymbols + rows[state.currentRowIndex].trimStart().length,\n\n            currentRowRightSymbols: 0,\n\n            currentRowIndex: state.currentRowIndex + 1\n\n        }\n\n    })\n\n    .on(eventSetTypingValue, (state, { value, rows }) => {\n\n        if (!rows)\n\n            return {\n\n                ...state,\n\n                typingValue: value\n\n            }\n\n        const currentRow = rows[state.currentRowIndex]\n\n\n        return {\n\n            ...state,\n\n            currentRowRightSymbols: calculateRowRightSymbols(currentRow, state.typingValue),\n\n            typingValue: value\n\n        }\n\n    })\n\n    .on(eventSetValueWithTab, state => {\n\n        return {\n\n            ...state,\n\n            typingValue: \" \".repeat(2) + state.typingValue\n\n        }\n\n    })\n\n    .on(eventResetState, state => {\n\n        return {\n\n            ...state,\n\n            typingValue: \"\",\n\n            currentRowIndex: 0,\n\n            prevRowsRightSymbols: 0,\n\n            currentRowRightSymbols: 0,\n\n            errorsCount: 0,\n\n            isError: false\n\n        }\n\n    })\n\n\nexport const useCurrentRow = () => useUnit($currentRow)\n\nexport const useCurrentRowHandlers = () =>\n\n    useUnit({\n\n        nextRow: eventNextRow,\n\n        setTypingValue: eventSetTypingValue,\n\n        setValueWithTab: eventSetValueWithTab,\n\n        resetState: eventResetState\n\n    })\n"}