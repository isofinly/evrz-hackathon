{"start_line": 0, "code": "import { createEvent, createStore } from \"effector\"\n\n\nimport { TypingCodeTimerStore, TypingTimerSettings } from \"@entities/code\"\n\nimport { storageKeysEnum } from \"@shared/constants\"\n\n\nexport const counterDownVariants = [15, 30, 60]\n\nexport const eventStartTimer = createEvent<number>()\n\nexport const eventStopTimer = createEvent<number>()\n\nexport const eventResetTimer = createEvent()\n\nexport const eventChangeTimerSettings = createEvent<TypingTimerSettings>()\n\n\nconst loadSettingsFromLocalStorage = (): TypingTimerSettings => <BODY loadSettingsFromLocalStorage>\n\nexport const $typingCodeTimerStore = createStore<TypingCodeTimerStore>({\n\n    timerStatus: \"stopped\",\n\n    timeMillisecondsStart: null,\n\n    timeMillisecondsEnd: null,\n\n    timerSettings: loadSettingsFromLocalStorage()\n\n})\n\n    .on(eventStartTimer, (store, startTimeMilliseconds) => ({\n\n        ...store,\n\n        timerStatus: \"started\",\n\n        timeMillisecondsStart: startTimeMilliseconds,\n\n        timeMillisecondsEnd: null\n\n    }))\n\n    .on(eventStopTimer, (store, stopTimeMilliseconds) => ({\n\n        ...store,\n\n        timerStatus: \"stopped\",\n\n        timeMillisecondsStart: store.timeMillisecondsStart,\n\n        timeMillisecondsEnd: stopTimeMilliseconds\n\n    }))\n\n    .on(eventResetTimer, store => ({\n\n        ...store,\n\n        timerStatus: \"stopped\",\n\n        timeMillisecondsStart: null,\n\n        timeMillisecondsEnd: null\n\n    }))\n\n    .on(eventChangeTimerSettings, (store, settings) => ({\n\n        ...store,\n\n        timerSettings: settings\n\n    }))\n\n\n$typingCodeTimerStore.watch(store => {\n\n    localStorage.setItem(storageKeysEnum.timerDirection, store.timerSettings.direction)\n\n    localStorage.setItem(\n\n        storageKeysEnum.timerStartSeconds,\n\n        store.timerSettings.startSeconds.toString()\n\n    )\n\n})\n"}