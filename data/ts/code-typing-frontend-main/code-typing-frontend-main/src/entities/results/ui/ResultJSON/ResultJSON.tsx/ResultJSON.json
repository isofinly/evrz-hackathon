{"start_line": 16, "code": "ResultJSON = (props: ResultsItemProps) => {\n    const { resultIndex, symbolsPerSecond, codeExampleUUID, ...restResult } = props\n    const [openDetails, setOpenDetails] = useState<undefined | ResultDetails>()\n\n    const chartData = symbolsPerSecondToChart(symbolsPerSecond)\n\n    const handleToggleDetails = (details: ResultDetails) => () => {\n        setOpenDetails(prev => (prev === details ? undefined : details))\n    }\n\n    return (\n        <>\n            <CodeContainer>\n                <CodeRows autoRows=\"33px\">\n                    <CodeRow>\n                        <Text as=\"span\" color=\"main.500\" ml={3}>\n                            // result number: {resultIndex + 1}\n                        </Text>\n                    </CodeRow>\n                    <CodeRow>{`{`}</CodeRow>\n                    {Object.entries(fields).map(([key, props]) => (\n                        <ResultKey\n                            key={key}\n                            jsonKey={key}\n                            value={JSON.stringify(restResult[key as keyof typeof restResult])}\n                            {...props}\n                        />\n                    ))}\n                    {detailsKeys.map(({ jsonKey, name }) => (\n                        <DetailsKey\n                            key={jsonKey}\n                            name={name}\n                            onShowDetails={handleToggleDetails(name)}\n                            jsonKey={jsonKey}\n                            openDetails={openDetails}\n                        />\n                    ))}\n                    <CodeRow>{`}`}</CodeRow>\n                </CodeRows>\n            </CodeContainer>\n\n            {openDetails === \"chart\" && <SymbolsPerSecondChart data={chartData} />}\n            {openDetails === \"code\" && !!codeExampleUUID && <DetailsCode uuid={codeExampleUUID} />}\n        </>\n    )\n}"}