export interface DatabaseUser <BODY DatabaseUser>

export interface ParsedTelegramUser <BODY ParsedTelegramUser>

export type InitializedWebAppUser = Omit<ParsedTelegramUser, 'id'> & {
  id: string
  initialized: true
  inDatabase: DatabaseUser
}

export type UnknownWebAppUser = Omit<ParsedTelegramUser, 'id'> & {
  id: string
  initialized: false
}

export type User = InitializedWebAppUser | UnknownWebAppUser

export interface Consulate <BODY Consulate>

interface AppointmentCommon <BODY AppointmentCommon>

type AppointmentByStatus =
  | { status: AppointmentStatus.Done; date: string; doneAt: string }
  | { status: AppointmentStatus.NotPayed }
  | { status: AppointmentStatus.Refunded }
  | {
      status: AppointmentStatus.InQueue
      queueNumber: number
      daysRemaining: number
    }

export type Appointment = AppointmentCommon & AppointmentByStatus

export interface Price <BODY Price>

export enum AppointmentStatus {
  NotPayed = 'NotPayed',
  InQueue = 'InQueue',
  Done = 'Done',
  Refunded = 'Refunded',
}