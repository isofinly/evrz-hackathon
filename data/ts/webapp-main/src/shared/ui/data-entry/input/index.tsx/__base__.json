{"start_line": 0, "code": "// <REVIEW>\u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0439 \u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e \u043f\u0443\u0442\u0438 \"/src/Components/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043f\u043a\u0438}/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430}.tsx\"</REVIEW>\n\nimport clsx from 'clsx'\n\nimport {\n\n  forwardRef,\n\n  InputHTMLAttributes,\n\n  ReactNode,\n\n  useLayoutEffect,\n\n  useRef,\n\n} from 'react'\n\nimport { mergeRefs } from '../../../lib/react'\n\nimport { Label } from '../../data-display/label'\n\nimport styles from './styles.module.css'\n\n\ntype InputProps = InputHTMLAttributes<HTMLInputElement>\n\n\n// <REVIEW>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0441\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 types.ts \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435 \u0441 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u043c</REVIEW> \ntype Props = InputProps & {\n\n  label?: string\n\n  filled?: boolean\n\n  error?: string\n\n  icon?: ReactNode\n\n}\n\n\nexport const Input = forwardRef<HTMLInputElement, Props>(\n\n  (\n\n    { className, label, filled = false, error, icon, ...rest },\n\n    forwardedRef,\n\n  ) => {\n\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const iconRef = useRef<HTMLDivElement>(null)\n\n\n    useLayoutEffect(() => {\n\n      const input = inputRef.current\n\n      const icon = iconRef.current\n\n      if (!input || !icon) return\n\n\n      const { width } = icon.getBoundingClientRect()\n\n      input.style.paddingRight = `${width}px`\n\n\n      return () => {\n\n        input.style.paddingRight = ''\n\n      }\n\n    }, [inputRef, iconRef, icon])\n\n\n    return (\n\n      <label\n\n        className={clsx(styles.wrapper, className)}\n\n        data-filled={filled}\n\n        data-valid={!error}\n\n      >\n\n        {label && <Label>{label}</Label>}\n\n        <div className=\"relative\">\n\n          <input\n\n            ref={mergeRefs(forwardedRef, inputRef)}\n\n            className={styles.input}\n\n            {...rest}\n\n          />\n\n          {icon && (\n\n            <div ref={iconRef} className={styles.icon}>\n\n              {icon}\n\n            </div>\n\n          )}\n\n        </div>\n\n        {error && (\n\n          <p\n\n            className={styles.error}\n\n            dangerouslySetInnerHTML={{ __html: error }}\n\n          />\n\n        )}\n\n      </label>\n\n    )\n\n  },\n\n)\n"}