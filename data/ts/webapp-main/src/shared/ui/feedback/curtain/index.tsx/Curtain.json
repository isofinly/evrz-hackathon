{"start_line": 15, "code": "Curtain = ({ isOpen, onClose, children }: Props) => {\n  const curtainRef = useRef<HTMLDivElement>(null)\n  const scrollableRef = useRef<HTMLDivElement>(null)\n\n  useLayoutEffect(() => {\n    const curtain = curtainRef.current\n    const scrollable = scrollableRef.current\n    if (!curtain || !scrollable) return\n    if (!isOpen) return\n    curtain.dataset.animation = 'in'\n    setTimeout(() => delete curtain.dataset.animation, 500)\n    disableBodyScroll(scrollable, { reserveScrollBarGap: true })\n    return () => enableBodyScroll(scrollable)\n  }, [isOpen])\n\n  if (!isOpen) {\n    return null\n  }\n\n  const animatedClose = () => {\n    const curtain = curtainRef.current\n    if (!curtain) return\n\n    curtain.dataset.animation = 'out'\n    setTimeout(onClose, 500)\n  }\n\n  return (\n    <div\n      ref={curtainRef}\n      className={styles.curtain}\n      data-open={isOpen}\n      style={{ bottom: `calc(100% - var(--tg-viewport-height))` }}\n    >\n      <div className={styles.overlay} />\n      <div ref={scrollableRef} className={styles.scrollable}>\n        <div\n          className={styles.closeOutsideZone}\n          onClick={animatedClose}\n          role=\"button\"\n          tabIndex={-1}\n        />\n        <div className={styles.contentWrapper}>\n          <div className={styles.content}>\n            <button onClick={animatedClose} className={styles.close}>\n              <Icon name=\"close\" />\n            </button>\n            <Container rounded=\"top\" padding=\"xl\">\n              {children}\n            </Container>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"}