StickyActions = ({ className, children }: Props) => {
  const height = useUnit($height)
  const ref = useRef<HTMLDivElement>(null)
  useSyncHeight(ref)

  useLayoutEffect(() => {
    const element = ref.current
    if (!element) return

    const updateStyles = ({ isStateStable }: { isStateStable: boolean }) => {
      if (!isStateStable) return

      if (Telegram.WebApp.isExpanded) {
        element.style.removeProperty('top')
        element.style.bottom = '0px'
      } else {
        element.style.removeProperty('bottom')
        element.style.top = `calc(var(--tg-viewport-stable-height) - ${height}px)`
      }
    }

    updateStyles({ isStateStable: true })
    Telegram.WebApp.onEvent('viewportChanged', updateStyles)

    return () => {
      Telegram.WebApp.offEvent('viewportChanged', updateStyles)
    }
  }, [ref, height])

  return (
    <Container
      ref={ref}
      className={clsx(styles.container, className)}
      rounded="top"
    >
      {children}
    </Container>
  )
}