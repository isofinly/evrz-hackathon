{"start_line": 13, "code": "StickyActions = ({ className, children }: Props) => {\n  const height = useUnit($height)\n  const ref = useRef<HTMLDivElement>(null)\n  useSyncHeight(ref)\n\n  useLayoutEffect(() => {\n    const element = ref.current\n    if (!element) return\n\n    const updateStyles = ({ isStateStable }: { isStateStable: boolean }) => {\n      if (!isStateStable) return\n\n      if (Telegram.WebApp.isExpanded) {\n        element.style.removeProperty('top')\n        element.style.bottom = '0px'\n      } else {\n        element.style.removeProperty('bottom')\n        element.style.top = `calc(var(--tg-viewport-stable-height) - ${height}px)`\n      }\n    }\n\n    updateStyles({ isStateStable: true })\n    Telegram.WebApp.onEvent('viewportChanged', updateStyles)\n\n    return () => {\n      Telegram.WebApp.offEvent('viewportChanged', updateStyles)\n    }\n  }, [ref, height])\n\n  return (\n    <Container\n      ref={ref}\n      className={clsx(styles.container, className)}\n      rounded=\"top\"\n    >\n      {children}\n    </Container>\n  )\n}"}