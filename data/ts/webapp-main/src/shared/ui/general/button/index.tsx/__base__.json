{"start_line": 0, "code": "// <REVIEW>\u0414\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0439 \u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e \u043f\u0443\u0442\u0438 \"/src/Components/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u043f\u043a\u0438}/{\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430}.tsx\"</REVIEW>\n\nimport { RouteParams } from 'atomic-router'\n\nimport { Link, LinkProps } from 'atomic-router-react'\n\nimport clsx from 'clsx'\n\nimport { ButtonHTMLAttributes, FC, forwardRef, ReactNode } from 'react'\n\nimport { Skeleton } from '../../feedback/skeleton'\n\nimport styles from './styles.module.css'\n\nimport { ButtonColor, ButtonSize, ButtonVariant } from './types'\n\n\n// <REVIEW>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0441\u0430 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 types.ts \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435 \u0441 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u043c</REVIEW> \ninterface SharedProps <BODY SharedProps>\n\nconst createDataset = ({\n\n  loading = false,\n\n  disabled = false,\n\n  size = 'md',\n\n  variant = 'solid',\n\n  color = 'primary',\n\n  fluid = false,\n\n}: SharedProps) => ({\n\n  'data-disabled': loading || disabled,\n\n  'data-loading': loading,\n\n  'data-size': size,\n\n  'data-color': color,\n\n  'data-variant': variant,\n\n  'data-fluid': fluid,\n\n})\n\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & SharedProps\n\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n\n  (props, forwardedRef) => {\n\n    const {\n\n      className,\n\n      children,\n\n      loading = false,\n\n      disabled = loading,\n\n      loadingText = children,\n\n      icon,\n\n      fluid,\n\n      variant,\n\n      size,\n\n      color,\n\n      ...rest\n\n    } = props\n\n\n    const dataset = createDataset(props)\n\n\n    return (\n\n      // <REVIEW>button \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u043f\u043e\u043b type</REVIEW> \n      <button\n\n        ref={forwardedRef}\n\n        className={clsx(styles.button, className)}\n\n        disabled={loading || disabled}\n\n        {...dataset}\n\n        {...rest}\n\n      >\n\n        {loading ? <LoadingIcon /> : icon}\n\n        {loading ? loadingText : children}\n\n      </button>\n\n    )\n\n  },\n\n)\n\n\nexport type ButtonLinkProps<T extends RouteParams> = SharedProps & LinkProps<T>\n\n\ninterface ButtonLinkForwarded extends FC<ButtonLinkProps<RouteParams>> <BODY ButtonLinkForwarded>\n\nexport const ButtonLink: ButtonLinkForwarded = forwardRef<\n\n  HTMLAnchorElement,\n\n  ButtonLinkProps<RouteParams>\n\n>((props, forwardedRef) => {\n\n  const {\n\n    className,\n\n    children,\n\n    loading = false,\n\n    disabled = loading,\n\n    loadingText = children,\n\n    icon,\n\n    onClick,\n\n    fluid,\n\n    variant,\n\n    size,\n\n    color,\n\n    ...rest\n\n  } = props\n\n\n  const dataset = createDataset(props)\n\n\n  return (\n\n    <Link\n\n      ref={forwardedRef}\n\n      className={clsx(styles.button, className)}\n\n      onClick={(event) => {\n\n        if (disabled) return event.preventDefault()\n\n        onClick?.(event)\n\n      }}\n\n      {...dataset}\n\n      {...rest}\n\n    >\n\n      {loading ? <LoadingIcon /> : icon}\n\n      {loading ? loadingText : children}\n\n    </Link>\n\n  )\n\n})\n\n\nexport const ButtonSkeleton = () => <BODY ButtonSkeleton>\n\nconst LoadingIcon = () => <BODY LoadingIcon>"}